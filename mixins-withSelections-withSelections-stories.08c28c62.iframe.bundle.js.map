{"version":3,"file":"mixins-withSelections-withSelections-stories.08c28c62.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AAGA;AAhBA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AA9CA;AACA;AAAA;AAAA;AAAA;AA+CA;;;;;;;;;;;;;;;;;;;ACpyBA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withSelections/index.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withSelections/withSelections.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport default function withSelections(Base, options = {}) {\n  const defaultOpts = {\n    captureKey: 'Enter',\n    defaultIndex: 0,\n    eventName: 'onSelect',\n    keys: {\n      currentSelected: 'currentSelected',\n      currentSelectedIndex: 'currentSelectedIndex',\n      isSelected: 'isSelected',\n      items: 'items',\n      setSelected: 'setSelected'\n    }\n  };\n  const {\n    captureKey,\n    defaultIndex,\n    eventName,\n    keys: {\n      currentSelected,\n      currentSelectedIndex,\n      isSelected,\n      items,\n      setSelected\n    }\n  } = {\n    ...defaultOpts,\n    ...options,\n    keys: {\n      ...defaultOpts.keys,\n      ...options.keys\n    }\n  };\n\n  return class extends Base {\n    static get name() {\n      return Base.name;\n    }\n\n    _construct() {\n      super._construct();\n      this[currentSelectedIndex] = defaultIndex;\n    }\n\n    _init() {\n      super._init();\n      this[currentSelected][isSelected] = true;\n    }\n\n    [setSelected](selected, val) {\n      const prevSelected = (this[items] || [])[this[currentSelectedIndex]];\n\n      if (\n        selected &&\n        (selected !== prevSelected || selected[isSelected] !== val)\n      ) {\n        prevSelected && (prevSelected[isSelected] = false);\n        selected[isSelected] = val;\n        this[currentSelectedIndex] = Array.from(this[items] || []).indexOf(\n          selected\n        );\n        this.fireAncestors('$' + eventName, selected, val);\n      }\n    }\n\n    _captureKey(event) {\n      if (\n        (Array.isArray(captureKey) && captureKey.indexOf(event.key) > -1) ||\n        event.key === captureKey\n      ) {\n        const [selected] = this.stage.application.focusPath.slice(-1);\n        this[setSelected](selected, true);\n      }\n      return false;\n    }\n\n    ['$' + setSelected](selected, val) {\n      this[setSelected](selected, val);\n    }\n\n    get [currentSelected]() {\n      return this[items][this[currentSelectedIndex]];\n    }\n  };\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { Button, Row } from '../../components';\\nimport withSelectionsMixin from '.';\\n\\nexport default {\\n  title: 'Utilities/withSelections'\\n};\\n\\nexport const withSelections = () => {\\n  class UnderlineButton extends Button {\\n    get isSelected() {\\n      return this._isSelected;\\n    }\\n\\n    set isSelected(v) {\\n      this._whenEnabled.then(() => {\\n        if (v !== this._isSelected) {\\n          this._isSelected = v;\\n          if (v) {\\n            this.patch({\\n              Line: {\\n                rect: true,\\n                color: 0xffffffff,\\n                w: w => w,\\n                h: 4,\\n                y: h => h + 20\\n              }\\n            });\\n          } else {\\n            this.patch({\\n              Line: undefined\\n            });\\n          }\\n        }\\n      });\\n    }\\n  }\\n\\n  return class withSelections extends lng.Component {\\n    static _template() {\\n      return {\\n        Items: {\\n          type: withSelectionsMixin(Row),\\n          y: 100,\\n          items: [\\n            {\\n              type: UnderlineButton,\\n              title: 'Left'\\n            },\\n            {\\n              type: UnderlineButton,\\n              title: 'Center',\\n              x: 150\\n            },\\n            {\\n              type: UnderlineButton,\\n              title: 'Right',\\n              x: 312\\n            }\\n          ]\\n        },\\n        Title: {\\n          text: {}\\n        }\\n      };\\n    }\\n\\n    _firstEnable() {\\n      this.tag('Title').text.text =\\n        'Selected: ' + this.tag('Items').currentSelected.title;\\n    }\\n\\n    $onSelect() {\\n      this.tag('Title').text.text =\\n        'Selected: ' + this.tag('Items').currentSelected.title;\\n    }\\n  };\\n};\\n\\nwithSelections.storyName = 'withSelections';\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"withSelections\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 25\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 84\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 25\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 84\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { Button, Row } from '../../components';\nimport withSelectionsMixin from '.';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { Button, Row } from '../../components';\\nimport withSelectionsMixin from '.';\\nexport default {\\n  title: 'Utilities/withSelections'\\n};\\nexport const withSelections = () => {\\n  class UnderlineButton extends Button {\\n    get isSelected() {\\n      return this._isSelected;\\n    }\\n    set isSelected(v) {\\n      this._whenEnabled.then(() => {\\n        if (v !== this._isSelected) {\\n          this._isSelected = v;\\n          if (v) {\\n            this.patch({\\n              Line: {\\n                rect: true,\\n                color: 0xffffffff,\\n                w: w => w,\\n                h: 4,\\n                y: h => h + 20\\n              }\\n            });\\n          } else {\\n            this.patch({\\n              Line: undefined\\n            });\\n          }\\n        }\\n      });\\n    }\\n  }\\n  return class withSelections extends lng.Component {\\n    static _template() {\\n      return {\\n        Items: {\\n          type: withSelectionsMixin(Row),\\n          y: 100,\\n          items: [{\\n            type: UnderlineButton,\\n            title: 'Left'\\n          }, {\\n            type: UnderlineButton,\\n            title: 'Center',\\n            x: 150\\n          }, {\\n            type: UnderlineButton,\\n            title: 'Right',\\n            x: 312\\n          }]\\n        },\\n        Title: {\\n          text: {}\\n        }\\n      };\\n    }\\n    _firstEnable() {\\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\\n    }\\n    $onSelect() {\\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\\n    }\\n  };\\n};\\nwithSelections.storyName = 'withSelections';\\nwithSelections.parameters = {\\n  ...withSelections.parameters,\\n  docs: {\\n    ...withSelections.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => {\\\\n  class UnderlineButton extends Button {\\\\n    get isSelected() {\\\\n      return this._isSelected;\\\\n    }\\\\n    set isSelected(v) {\\\\n      this._whenEnabled.then(() => {\\\\n        if (v !== this._isSelected) {\\\\n          this._isSelected = v;\\\\n          if (v) {\\\\n            this.patch({\\\\n              Line: {\\\\n                rect: true,\\\\n                color: 0xffffffff,\\\\n                w: w => w,\\\\n                h: 4,\\\\n                y: h => h + 20\\\\n              }\\\\n            });\\\\n          } else {\\\\n            this.patch({\\\\n              Line: undefined\\\\n            });\\\\n          }\\\\n        }\\\\n      });\\\\n    }\\\\n  }\\\\n  return class withSelections extends lng.Component {\\\\n    static _template() {\\\\n      return {\\\\n        Items: {\\\\n          type: withSelectionsMixin(Row),\\\\n          y: 100,\\\\n          items: [{\\\\n            type: UnderlineButton,\\\\n            title: 'Left'\\\\n          }, {\\\\n            type: UnderlineButton,\\\\n            title: 'Center',\\\\n            x: 150\\\\n          }, {\\\\n            type: UnderlineButton,\\\\n            title: 'Right',\\\\n            x: 312\\\\n          }]\\\\n        },\\\\n        Title: {\\\\n          text: {}\\\\n        }\\\\n      };\\\\n    }\\\\n    _firstEnable() {\\\\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\\\\n    }\\\\n    $onSelect() {\\\\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\\\\n    }\\\\n  };\\\\n}\\\",\\n      ...withSelections.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"with-selections\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 25\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 84\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 25\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 84\n        }\n      }\n    }\n  }\n,},\n  title: 'Utilities/withSelections'\n};\nexport const withSelections = () => {\n  class UnderlineButton extends Button {\n    get isSelected() {\n      return this._isSelected;\n    }\n    set isSelected(v) {\n      this._whenEnabled.then(() => {\n        if (v !== this._isSelected) {\n          this._isSelected = v;\n          if (v) {\n            this.patch({\n              Line: {\n                rect: true,\n                color: 0xffffffff,\n                w: w => w,\n                h: 4,\n                y: h => h + 20\n              }\n            });\n          } else {\n            this.patch({\n              Line: undefined\n            });\n          }\n        }\n      });\n    }\n  }\n  return class withSelections extends lng.Component {\n    static _template() {\n      return {\n        Items: {\n          type: withSelectionsMixin(Row),\n          y: 100,\n          items: [{\n            type: UnderlineButton,\n            title: 'Left'\n          }, {\n            type: UnderlineButton,\n            title: 'Center',\n            x: 150\n          }, {\n            type: UnderlineButton,\n            title: 'Right',\n            x: 312\n          }]\n        },\n        Title: {\n          text: {}\n        }\n      };\n    }\n    _firstEnable() {\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\n    }\n    $onSelect() {\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\n    }\n  };\n};\nwithSelections.storyName = 'withSelections';\nwithSelections.parameters = {\n  ...withSelections.parameters,\n  docs: {\n    ...withSelections.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  class UnderlineButton extends Button {\\n    get isSelected() {\\n      return this._isSelected;\\n    }\\n    set isSelected(v) {\\n      this._whenEnabled.then(() => {\\n        if (v !== this._isSelected) {\\n          this._isSelected = v;\\n          if (v) {\\n            this.patch({\\n              Line: {\\n                rect: true,\\n                color: 0xffffffff,\\n                w: w => w,\\n                h: 4,\\n                y: h => h + 20\\n              }\\n            });\\n          } else {\\n            this.patch({\\n              Line: undefined\\n            });\\n          }\\n        }\\n      });\\n    }\\n  }\\n  return class withSelections extends lng.Component {\\n    static _template() {\\n      return {\\n        Items: {\\n          type: withSelectionsMixin(Row),\\n          y: 100,\\n          items: [{\\n            type: UnderlineButton,\\n            title: 'Left'\\n          }, {\\n            type: UnderlineButton,\\n            title: 'Center',\\n            x: 150\\n          }, {\\n            type: UnderlineButton,\\n            title: 'Right',\\n            x: 312\\n          }]\\n        },\\n        Title: {\\n          text: {}\\n        }\\n      };\\n    }\\n    _firstEnable() {\\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\\n    }\\n    $onSelect() {\\n      this.tag('Title').text.text = 'Selected: ' + this.tag('Items').currentSelected.title;\\n    }\\n  };\\n}\",\n      ...withSelections.parameters?.docs?.source\n    }\n  }\n};"],"names":[],"sourceRoot":""}