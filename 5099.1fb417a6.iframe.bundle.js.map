{"version":3,"file":"5099.1fb417a6.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAzGA;AA4GA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AAXA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AA1FA;AA6FA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAjEA;AAoEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AANA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AANA;AACA;AACA;AAAA;AAAA;AAAA;AAgBA;AACA;AAAA;AAVA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AANA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AANA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AANA;AACA;AACA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AANA;AACA;AACA;AAAA;AAAA;AAAA;AAeA;AARA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;;AAEA;AACA;;AAQA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAQA;AACA;;AAEA;AACA;;AAQA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AA/IA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAVA;AAWA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AAGA;AAAA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AASA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAMA;AAGA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/textures/index.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Tooltip/Tooltip.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Tooltip/Tooltip.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Tooltip/Tooltip.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/utils.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\n\nclass Circle extends lng.Texture {\n  constructor(stage) {\n    super(stage);\n    this._color = 'rgb(0,0,0)';\n    this._fill = true;\n    this._radius = 100;\n    this._stroke = false;\n    this._strokeColor = 'rgb(0,0,0)';\n    this._strokeWidth = 1;\n  }\n\n  get fill() {\n    return this._fill;\n  }\n\n  set fill(fill) {\n    this._fill = fill;\n    this._changed();\n  }\n\n  get radius() {\n    return this._radius;\n  }\n\n  set radius(radius) {\n    this._radius = radius;\n    this._changed();\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  set color(color) {\n    this._color = color;\n    this._changed();\n  }\n\n  get stroke() {\n    return this._stroke;\n  }\n\n  set stroke(stroke) {\n    this._stroke = stroke;\n    this._changed();\n  }\n\n  get strokeWidth() {\n    return this._strokeWidth;\n  }\n\n  set strokeWidth(strokeWidth) {\n    this._strokeWidth = strokeWidth;\n    this._changed();\n  }\n\n  get strokeColor() {\n    return this._strokeColor;\n  }\n\n  set strokeColor(strokeColor) {\n    this._strokeColor = strokeColor;\n    this._changed();\n  }\n\n  _getLookupId() {\n    return `__circle_${this._radius}`;\n  }\n\n  _getSourceLoader() {\n    // We need to scope these to protect them from modifications while loading (which may be async).\n    const color = this._color;\n    const fill = this._fill;\n    const radius = this._radius;\n    const stroke = this._stroke;\n    const strokeColor = this._strokeColor;\n    const strokeWidth = this._strokeWidth;\n    const canvas = this.stage.platform.getDrawingCanvas();\n    let dimension = radius;\n\n    if (stroke) {\n      dimension = radius + strokeWidth * 2;\n    }\n\n    canvas.width = dimension * 2;\n    canvas.height = dimension * 2;\n\n    return function (cb) {\n      const ctx = canvas.getContext('2d');\n      ctx.lineWidth = strokeWidth;\n      ctx.strokeStyle = strokeColor;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n\n      ctx.arc(dimension, dimension, radius, 0, 2 * Math.PI);\n\n      if (fill) {\n        ctx.fill();\n      }\n\n      if (stroke) {\n        ctx.stroke();\n      }\n      cb(null, { source: canvas, radius });\n    };\n  }\n}\n\nclass Arrow extends lng.Texture {\n  constructor(stage) {\n    super(stage);\n    this._color = 'rgb(13, 13, 15)';\n    this._w = 0;\n    this._h = 0;\n    this._direction = 'right';\n  }\n\n  get w() {\n    return this._w;\n  }\n\n  set w(l) {\n    this._w = l;\n    this._changed();\n  }\n\n  get h() {\n    return this._h;\n  }\n\n  set h(l) {\n    this._h = l;\n    this._changed();\n  }\n\n  get direction() {\n    return this._direction;\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  set color(color) {\n    this._color = color;\n    this._changed();\n  }\n\n  set direction(direction) {\n    this._direction = direction;\n    this._changed();\n  }\n\n  _getLookupId() {\n    return `__triangle_${this._direction}_${this._w}x${this._h}`;\n  }\n\n  _getSourceLoader() {\n    // We need to scope these to protect them from modifications while loading (which may be async).\n\n    const color = this._color;\n    const w = this._w;\n    const h = this._h;\n    const direction = this._direction;\n\n    var canvas = this.stage.platform.getDrawingCanvas();\n    return function (cb) {\n      var ctx = canvas.getContext('2d');\n      canvas.width = w;\n      canvas.height = h;\n      ctx.fillStyle = color;\n      ctx.strokeStyle = ctx.fillStyle;\n      ctx.lineWidth = 2;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      const p = ctx.lineWidth / 2;\n      ctx.beginPath();\n\n      if (direction === 'right') {\n        ctx.moveTo(p, p);\n        ctx.lineTo(p, h - p);\n        ctx.lineTo(w - p, h / 2);\n      } else if (direction === 'down') {\n        ctx.moveTo(p, p);\n        ctx.lineTo(w - p, p);\n        ctx.lineTo(w / 2, h - p);\n      } else {\n        // default is left arrow\n        ctx.moveTo(p, h / 2);\n        ctx.lineTo(w - p, p);\n        ctx.lineTo(w - p, h - p);\n      }\n      ctx.closePath();\n      ctx.stroke();\n      ctx.fill();\n\n      cb(null, { source: canvas, w, h, direction });\n    };\n  }\n}\n\nclass Line extends lng.Texture {\n  constructor(stage) {\n    super(stage);\n\n    this._w = 0;\n    this._h = 0;\n    this._rounded = false;\n  }\n\n  get w() {\n    return this._w;\n  }\n\n  set w(l) {\n    this._w = l;\n    this._changed();\n  }\n\n  get h() {\n    return this._h;\n  }\n\n  set h(l) {\n    this._h = l;\n    this._changed();\n  }\n\n  get rounded() {\n    return this._rounded;\n  }\n\n  set rounded(rounded) {\n    this._rounded = rounded;\n    this._changed();\n  }\n\n  _getLookupId() {\n    return `__line_${this._w}x${this._h}${this._rounded ? '_rounded' : ''}`;\n  }\n\n  _getSourceLoader() {\n    // We need to scope these to protect them from modifications while loading (which may be async).\n    const w = this._w;\n    const h = this._h;\n    const rounded = this._rounded;\n\n    var canvas = this.stage.platform.getDrawingCanvas();\n    return function (cb) {\n      var ctx = canvas.getContext('2d');\n      canvas.width = w;\n      canvas.height = h;\n      ctx.lineWidth = h;\n\n      if (rounded) {\n        ctx.lineCap = 'round';\n      }\n\n      ctx.strokeStyle = 'white';\n      ctx.beginPath();\n      ctx.moveTo(rounded ? 2 : 0, h / 2);\n      ctx.lineTo(rounded ? w - 2 : w, h / 2);\n      ctx.stroke();\n\n      cb(null, { source: canvas, w, h, rounded });\n    };\n  }\n}\n\nclass Bubble extends lng.Texture {\n  constructor(stage) {\n    super(stage);\n    this._w = 0;\n    this._h = 0;\n    this._radius = 0;\n    this._pointerWidth = 0;\n    this._pointerHeight = 0;\n    this._strokeWidth = 0;\n    this._color = 'white';\n  }\n\n  set w(w) {\n    this._w = w;\n    this._changed();\n  }\n\n  get w() {\n    return this._w;\n  }\n\n  set h(h) {\n    this._h = h;\n    this._changed();\n  }\n\n  get h() {\n    return this._h;\n  }\n\n  set radius(radius) {\n    if (Array.isArray(radius)) {\n      this._radius = new Array(4).fill().map((_, index) => radius[index] || 0);\n    } else {\n      this._radius = radius;\n    }\n    this._changed();\n  }\n\n  get radius() {\n    return this._radius;\n  }\n\n  set pointerWidth(pointerWidth) {\n    this._pointerWidth = pointerWidth;\n    this._changed();\n  }\n\n  get pointerWidth() {\n    return this._pointerWidth;\n  }\n\n  set pointerHeight(pointerHeight) {\n    this._pointerHeight = pointerHeight;\n    this._changed();\n  }\n\n  get pointerHeight() {\n    return this._pointerHeight;\n  }\n\n  set strokeWidth(strokeWidth) {\n    this._strokeWidth = strokeWidth;\n    this._changed();\n  }\n\n  get strokeWidth() {\n    return this._strokeWidth;\n  }\n\n  set color(color) {\n    this._color = lng.StageUtils.getRgbaString(color);\n    this._changed();\n  }\n\n  get color() {\n    return this._color;\n  }\n\n  createBubble({\n    stage,\n    w = 0,\n    h = 0,\n    radius = 0,\n    pointerWidth = 0,\n    pointerHeight = 0,\n    strokeWidth = 1,\n    color = 'white'\n  }) {\n    const canvas = stage.platform.getDrawingCanvas();\n    const ctx = canvas.getContext('2d');\n\n    canvas.width = w + strokeWidth + 4;\n    canvas.height = h + strokeWidth + 4;\n\n    ctx.imageSmoothingEnabled = true;\n    ctx.fillStyle = color;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = strokeWidth;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n\n    const initialCoord = 0.5 * strokeWidth + 1;\n    const leftX = initialCoord;\n    const rightX = leftX + w;\n    const topY = initialCoord;\n    const bottomY = topY + h;\n    const bottomBubbleY = bottomY - pointerHeight;\n    const isRadiusAnArray = Array.isArray(radius);\n    // start: top left\n    ctx.beginPath();\n    ctx.moveTo(leftX + (isRadiusAnArray ? radius[0] : radius), topY);\n    // top side\n    ctx.lineTo(rightX - (isRadiusAnArray ? radius[0] : radius), topY);\n    // top right corner\n    ctx.arcTo(\n      rightX,\n      topY,\n      rightX,\n      topY + (isRadiusAnArray ? radius[1] : radius),\n      isRadiusAnArray ? radius[1] : radius\n    );\n\n    // right side\n    ctx.lineTo(rightX, bottomBubbleY - (isRadiusAnArray ? radius[2] : radius));\n\n    // bottom right corner\n    ctx.arcTo(\n      rightX,\n      bottomBubbleY,\n      rightX - (isRadiusAnArray ? radius[2] : radius),\n      bottomBubbleY,\n      isRadiusAnArray ? radius[2] : radius\n    );\n\n    // bottom side, right of point\n    ctx.lineTo(w / 2 + pointerWidth / 2, bottomBubbleY);\n\n    // point\n    ctx.arcTo(w / 2, bottomY, w / 2 - pointerWidth / 2, bottomBubbleY, 2);\n    ctx.lineTo(w / 2 - pointerWidth / 2, bottomBubbleY);\n\n    // bottom side, left of point\n    ctx.lineTo(leftX + (isRadiusAnArray ? radius[3] : radius), bottomBubbleY);\n\n    // bottom left corner\n    ctx.arcTo(\n      leftX,\n      bottomBubbleY,\n      leftX,\n      bottomBubbleY - (isRadiusAnArray ? radius[3] : radius),\n      isRadiusAnArray ? radius[3] : radius\n    );\n\n    // left side\n    ctx.lineTo(leftX, topY + (isRadiusAnArray ? radius[0] : radius));\n\n    // top left corner\n    ctx.arcTo(\n      leftX,\n      topY,\n      leftX + (isRadiusAnArray ? radius[0] : radius),\n      topY,\n      isRadiusAnArray ? radius[0] : radius\n    );\n\n    // draw shape and fill with color\n    ctx.stroke();\n    ctx.fill();\n\n    return canvas;\n  }\n\n  _getLookupId() {\n    const { w, h, radius, pointerWidth, pointerHeight, color } = this;\n    return `__bubble_${w}x${h}_radius-${radius}_pointer-${pointerWidth}x${pointerHeight}_fill-${color}`;\n  }\n\n  _getSourceLoader() {\n    return cb => {\n      cb(null, {\n        source: this.createBubble(this)\n      });\n    };\n  }\n}\n\n// TODO: Make sure FadeShader is exported in shaders\nexport { Circle, Arrow, Line, Bubble };\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  marginBottom: theme.spacer.xxxl,\n  paddingX: theme.spacer.lg,\n  paddingY: theme.spacer.md,\n  pointerWidth: theme.spacer.xl,\n  pointerHeight: theme.spacer.md + theme.spacer.xs,\n  radius: theme.radius.md,\n  textStyle: {\n    ...theme.typography.caption1,\n    textColor: theme.color.textInverse\n  },\n  transition: theme.animation.utility // TODO: should delay and duration be xfast?\n});\n\nexport const tone = theme => ({\n  neutral: {\n    backgroundColor: theme.color.fillNeutral,\n    textStyle: { textColor: theme.color.textInverse }\n  },\n  inverse: {\n    backgroundColor: theme.color.fillInverse,\n    textStyle: { textColor: theme.color.textNeutral }\n  },\n  brand: {\n    backgroundColor: theme.color.fillBrand,\n    textStyle: { textColor: theme.color.textNeutral }\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Bubble } from '../../textures';\nimport TextBox from '../TextBox';\nimport Base from '../Base';\nimport * as styles from './Tooltip.styles.js';\n\nexport default class Tooltip extends Base {\n  static get __componentName() {\n    return 'Tooltip';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      alpha: 0,\n      scale: 0.5,\n      mountX: 0.5,\n      x: w => w / 2,\n      Background: {\n        Text: {\n          type: TextBox,\n          signals: {\n            textBoxChanged: '_textLoaded'\n          }\n        }\n      }\n    };\n  }\n\n  static get properties() {\n    return ['title', 'delayVisible', 'timeVisible'];\n  }\n\n  static get tags() {\n    return ['Background', { name: 'Text', path: 'Background.Text' }];\n  }\n\n  static get aliasStyles() {\n    return [\n      { prev: 'pointerH', curr: 'pointerHeight' },\n      { prev: 'pointerW', curr: 'pointerWidth' }\n    ];\n  }\n\n  _update() {\n    this._updateText();\n  }\n\n  _updateText() {\n    if (this._Text) {\n      this._Text.patch({\n        content: this.title,\n        style: { textStyle: this.style.textStyle }\n      });\n    }\n  }\n\n  _textLoaded() {\n    this._updateBackground();\n    this._updateTextPosition();\n  }\n\n  _updateBackground() {\n    const backgroundH =\n      this._Text.finalH + this.style.paddingY * 2 + this.style.pointerHeight;\n    const backgroundW = this._Text.finalW + this.style.paddingX * 2;\n\n    this.patch({\n      w: backgroundW,\n      h: backgroundH,\n      mountY: 1,\n      y: -this.style.marginBottom,\n      Background: {\n        w: backgroundW,\n        h: backgroundH,\n        texture: {\n          type: Bubble,\n          w: backgroundW,\n          h: backgroundH,\n          radius: this.style.radius,\n          pointerWidth: this.style.pointerWidth,\n          pointerHeight: this.style.pointerHeight,\n          color: this.style.backgroundColor\n        }\n      }\n    });\n  }\n\n  _updateTextPosition() {\n    if (this._Text) {\n      this._Text.patch({\n        mount: 0.5,\n        x: this._Background.w / 2,\n        y: (this._Background.h - this.style.pointerHeight) / 2\n      });\n    }\n  }\n\n  _clearTimers() {\n    clearTimeout(this._hideTimer);\n    clearTimeout(this._showTimer);\n  }\n\n  _transitionIn() {\n    const smooth = {\n      smooth: {\n        alpha: [1, this.style.transition],\n        scale: [1, this.style.transition]\n      }\n    };\n\n    if (this.delayVisible) {\n      this._showTimer = setTimeout(() => {\n        this.patch({ smooth });\n      }, this.delayVisible);\n    } else {\n      this._showTimer = undefined;\n      this.patch({ smooth });\n    }\n\n    this._hideTimer = this.timeVisible\n      ? setTimeout(() => {\n          this._unfocus();\n        }, this.timeVisible + (this.delayVisible || 0))\n      : undefined;\n  }\n\n  _transitionOut() {\n    this.patch({\n      smooth: {\n        alpha: [0, this.style.transition],\n        scale: [0.5, this.style.transition]\n      }\n    });\n  }\n\n  _focus() {\n    this._clearTimers();\n    this._transitionIn();\n  }\n\n  _unfocus() {\n    this._clearTimers();\n    this._transitionOut();\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this._Text && this._Text.announce);\n  }\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"﻿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport Button from '../Button';\\nimport { createModeControl } from '../../docs/utils';\\nimport { default as TooltipComponent } from '.';\\n\\nexport default {\\n  title: 'Components/Tooltip',\\n  args: {\\n    title: 'Tooltip',\\n    delayVisible: 0,\\n    timeVisible: 0,\\n    mode: 'focused'\\n  },\\n  argTypes: {\\n    ...createModeControl({ options: ['focused'], summaryValue: 'focused' }),\\n    title: {\\n      control: 'text',\\n      description: 'Text content of tooltip',\\n      table: { defaultValue: { summary: 'undefined' } }\\n    },\\n    delayVisible: {\\n      control: 'number',\\n      description:\\n        'Start with unfocused mode and set the delay value in milliseconds, now change the mode to focused to see the required changes',\\n      table: { defaultValue: { summary: 'undefined' } }\\n    },\\n    timeVisible: {\\n      control: 'number',\\n      description:\\n        'Start with unfocused mode and set the time value in milliseconds, now change the mode to focused to see the required changes',\\n      table: { defaultValue: { summary: 'undefined' } }\\n    }\\n  }\\n};\\n\\nconst sharedArgActions = {\\n  argActions: {\\n    delayVisible: (delayVisible, component) => {\\n      component.tag('Tooltip').delayVisible = delayVisible;\\n    },\\n    timeVisible: (timeVisible, component) => {\\n      component.tag('Tooltip').timeVisible = timeVisible;\\n    }\\n  }\\n};\\n\\nexport const Basic = args =>\\n  class Basic extends lng.Component {\\n    static _template() {\\n      return {\\n        Tooltip: {\\n          type: TooltipComponent,\\n          x: 1280 / 2,\\n          delayVisible: args.delayVisible,\\n          timeVisible: args.timeVisible\\n        }\\n      };\\n    }\\n  };\\n\\nBasic.parameters = { ...sharedArgActions };\\n\\nexport const LongTitle = Basic.bind({});\\nLongTitle.args = {\\n  title:\\n    'This is a long message. Text will remain on a single line and does not have a maximum width'\\n};\\n\\nLongTitle.parameters = { ...sharedArgActions };\\n\\nexport const WithButton = args =>\\n  class WithButton extends lng.Component {\\n    static _template() {\\n      return {\\n        Button: {\\n          type: class extends Button {\\n            _getFocused() {\\n              return this.childList.getByRef('Tooltip');\\n            }\\n          },\\n          x: 200,\\n          y: 100,\\n          title: 'Button',\\n          backgroundType: 'stroke',\\n          Tooltip: {\\n            type: TooltipComponent,\\n            title: args.title,\\n            delayVisible: args.delayVisible,\\n            timeVisible: args.timeVisible\\n          }\\n        }\\n      };\\n    }\\n  };\\n\\nWithButton.args = {};\\n\\nWithButton.parameters = {\\n  argActions: {\\n    title: (title, component) => {\\n      component.tag('Button.Tooltip').title = title;\\n    },\\n    delayVisible: (delayVisible, component) => {\\n      component.tag('Button.Tooltip').delayVisible = delayVisible;\\n    },\\n    timeVisible: (timeVisible, component) => {\\n      component.tag('Button.Tooltip').timeVisible = timeVisible;\\n    }\\n  }\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Basic\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 75\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 86\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 75\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 86\n    }\n  },\n  \"LongTitle\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 75\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 86\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 75\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 86\n    }\n  },\n  \"WithButton\": {\n    \"startLoc\": {\n      \"col\": 26,\n      \"line\": 97\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 119\n    },\n    \"startBody\": {\n      \"col\": 26,\n      \"line\": 97\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 119\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Button from '../Button';\nimport { createModeControl } from '../../docs/utils';\nimport { default as TooltipComponent } from '.';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport Button from '../Button';\\nimport { createModeControl } from '../../docs/utils';\\nimport { default as TooltipComponent } from '.';\\nexport default {\\n  title: 'Components/Tooltip',\\n  args: {\\n    title: 'Tooltip',\\n    delayVisible: 0,\\n    timeVisible: 0,\\n    mode: 'focused'\\n  },\\n  argTypes: {\\n    ...createModeControl({\\n      options: ['focused'],\\n      summaryValue: 'focused'\\n    }),\\n    title: {\\n      control: 'text',\\n      description: 'Text content of tooltip',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    },\\n    delayVisible: {\\n      control: 'number',\\n      description: 'Start with unfocused mode and set the delay value in milliseconds, now change the mode to focused to see the required changes',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    },\\n    timeVisible: {\\n      control: 'number',\\n      description: 'Start with unfocused mode and set the time value in milliseconds, now change the mode to focused to see the required changes',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    }\\n  }\\n};\\nconst sharedArgActions = {\\n  argActions: {\\n    delayVisible: (delayVisible, component) => {\\n      component.tag('Tooltip').delayVisible = delayVisible;\\n    },\\n    timeVisible: (timeVisible, component) => {\\n      component.tag('Tooltip').timeVisible = timeVisible;\\n    }\\n  }\\n};\\nexport const Basic = args => class Basic extends lng.Component {\\n  static _template() {\\n    return {\\n      Tooltip: {\\n        type: TooltipComponent,\\n        x: 1280 / 2,\\n        delayVisible: args.delayVisible,\\n        timeVisible: args.timeVisible\\n      }\\n    };\\n  }\\n};\\nBasic.parameters = {\\n  ...sharedArgActions\\n};\\nexport const LongTitle = Basic.bind({});\\nLongTitle.args = {\\n  title: 'This is a long message. Text will remain on a single line and does not have a maximum width'\\n};\\nLongTitle.parameters = {\\n  ...sharedArgActions\\n};\\nexport const WithButton = args => class WithButton extends lng.Component {\\n  static _template() {\\n    return {\\n      Button: {\\n        type: class extends Button {\\n          _getFocused() {\\n            return this.childList.getByRef('Tooltip');\\n          }\\n        },\\n        x: 200,\\n        y: 100,\\n        title: 'Button',\\n        backgroundType: 'stroke',\\n        Tooltip: {\\n          type: TooltipComponent,\\n          title: args.title,\\n          delayVisible: args.delayVisible,\\n          timeVisible: args.timeVisible\\n        }\\n      }\\n    };\\n  }\\n};\\nWithButton.args = {};\\nWithButton.parameters = {\\n  argActions: {\\n    title: (title, component) => {\\n      component.tag('Button.Tooltip').title = title;\\n    },\\n    delayVisible: (delayVisible, component) => {\\n      component.tag('Button.Tooltip').delayVisible = delayVisible;\\n    },\\n    timeVisible: (timeVisible, component) => {\\n      component.tag('Button.Tooltip').timeVisible = timeVisible;\\n    }\\n  }\\n};\\nBasic.parameters = {\\n  ...Basic.parameters,\\n  docs: {\\n    ...Basic.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class Basic extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Tooltip: {\\\\n        type: TooltipComponent,\\\\n        x: 1280 / 2,\\\\n        delayVisible: args.delayVisible,\\\\n        timeVisible: args.timeVisible\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...Basic.parameters?.docs?.source\\n    }\\n  }\\n};\\nLongTitle.parameters = {\\n  ...LongTitle.parameters,\\n  docs: {\\n    ...LongTitle.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class Basic extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Tooltip: {\\\\n        type: TooltipComponent,\\\\n        x: 1280 / 2,\\\\n        delayVisible: args.delayVisible,\\\\n        timeVisible: args.timeVisible\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...LongTitle.parameters?.docs?.source\\n    }\\n  }\\n};\\nWithButton.parameters = {\\n  ...WithButton.parameters,\\n  docs: {\\n    ...WithButton.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class WithButton extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Button: {\\\\n        type: class extends Button {\\\\n          _getFocused() {\\\\n            return this.childList.getByRef('Tooltip');\\\\n          }\\\\n        },\\\\n        x: 200,\\\\n        y: 100,\\\\n        title: 'Button',\\\\n        backgroundType: 'stroke',\\\\n        Tooltip: {\\\\n          type: TooltipComponent,\\\\n          title: args.title,\\\\n          delayVisible: args.delayVisible,\\\\n          timeVisible: args.timeVisible\\\\n        }\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...WithButton.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"basic\": {\n        \"startLoc\": {\n          \"col\": 21,\n          \"line\": 75\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 86\n        },\n        \"startBody\": {\n          \"col\": 21,\n          \"line\": 75\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 86\n        }\n      },\n      \"long-title\": {\n        \"startLoc\": {\n          \"col\": 21,\n          \"line\": 75\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 86\n        },\n        \"startBody\": {\n          \"col\": 21,\n          \"line\": 75\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 86\n        }\n      },\n      \"with-button\": {\n        \"startLoc\": {\n          \"col\": 26,\n          \"line\": 97\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 119\n        },\n        \"startBody\": {\n          \"col\": 26,\n          \"line\": 97\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 119\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/Tooltip',\n  args: {\n    title: 'Tooltip',\n    delayVisible: 0,\n    timeVisible: 0,\n    mode: 'focused'\n  },\n  argTypes: {\n    ...createModeControl({\n      options: ['focused'],\n      summaryValue: 'focused'\n    }),\n    title: {\n      control: 'text',\n      description: 'Text content of tooltip',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    },\n    delayVisible: {\n      control: 'number',\n      description: 'Start with unfocused mode and set the delay value in milliseconds, now change the mode to focused to see the required changes',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    },\n    timeVisible: {\n      control: 'number',\n      description: 'Start with unfocused mode and set the time value in milliseconds, now change the mode to focused to see the required changes',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    }\n  }\n};\nconst sharedArgActions = {\n  argActions: {\n    delayVisible: (delayVisible, component) => {\n      component.tag('Tooltip').delayVisible = delayVisible;\n    },\n    timeVisible: (timeVisible, component) => {\n      component.tag('Tooltip').timeVisible = timeVisible;\n    }\n  }\n};\nexport const Basic = args => class Basic extends lng.Component {\n  static _template() {\n    return {\n      Tooltip: {\n        type: TooltipComponent,\n        x: 1280 / 2,\n        delayVisible: args.delayVisible,\n        timeVisible: args.timeVisible\n      }\n    };\n  }\n};;\nBasic.parameters = {\n  ...sharedArgActions\n};\nexport const LongTitle = Basic.bind({});;\nLongTitle.args = {\n  title: 'This is a long message. Text will remain on a single line and does not have a maximum width'\n};\nLongTitle.parameters = {\n  ...sharedArgActions\n};\nexport const WithButton = args => class WithButton extends lng.Component {\n  static _template() {\n    return {\n      Button: {\n        type: class extends Button {\n          _getFocused() {\n            return this.childList.getByRef('Tooltip');\n          }\n        },\n        x: 200,\n        y: 100,\n        title: 'Button',\n        backgroundType: 'stroke',\n        Tooltip: {\n          type: TooltipComponent,\n          title: args.title,\n          delayVisible: args.delayVisible,\n          timeVisible: args.timeVisible\n        }\n      }\n    };\n  }\n};\nWithButton.args = {};\nWithButton.parameters = {\n  argActions: {\n    title: (title, component) => {\n      component.tag('Button.Tooltip').title = title;\n    },\n    delayVisible: (delayVisible, component) => {\n      component.tag('Button.Tooltip').delayVisible = delayVisible;\n    },\n    timeVisible: (timeVisible, component) => {\n      component.tag('Button.Tooltip').timeVisible = timeVisible;\n    }\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"args => class Basic extends lng.Component {\\n  static _template() {\\n    return {\\n      Tooltip: {\\n        type: TooltipComponent,\\n        x: 1280 / 2,\\n        delayVisible: args.delayVisible,\\n        timeVisible: args.timeVisible\\n      }\\n    };\\n  }\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nLongTitle.parameters = {\n  ...LongTitle.parameters,\n  docs: {\n    ...LongTitle.parameters?.docs,\n    source: {\n      originalSource: \"args => class Basic extends lng.Component {\\n  static _template() {\\n    return {\\n      Tooltip: {\\n        type: TooltipComponent,\\n        x: 1280 / 2,\\n        delayVisible: args.delayVisible,\\n        timeVisible: args.timeVisible\\n      }\\n    };\\n  }\\n}\",\n      ...LongTitle.parameters?.docs?.source\n    }\n  }\n};\nWithButton.parameters = {\n  ...WithButton.parameters,\n  docs: {\n    ...WithButton.parameters?.docs,\n    source: {\n      originalSource: \"args => class WithButton extends lng.Component {\\n  static _template() {\\n    return {\\n      Button: {\\n        type: class extends Button {\\n          _getFocused() {\\n            return this.childList.getByRef('Tooltip');\\n          }\\n        },\\n        x: 200,\\n        y: 100,\\n        title: 'Button',\\n        backgroundType: 'stroke',\\n        Tooltip: {\\n          type: TooltipComponent,\\n          title: args.title,\\n          delayVisible: args.delayVisible,\\n          timeVisible: args.timeVisible\\n        }\\n      }\\n    };\\n  }\\n}\",\n      ...WithButton.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport utils from '../utils';\n\n// creates Mode control on stories\nexport const createModeControl = ({ options, summaryValue } = {}) => {\n  return {\n    mode: {\n      control: 'radio',\n      options:\n        options && Array.isArray(options)\n          ? ['unfocused', ...options]\n          : ['unfocused', 'focused', 'disabled'],\n      description: 'Sets the visual mode for the component',\n      table: {\n        defaultValue: { summary: summaryValue }\n      },\n      type: { name: 'string', required: true }\n    }\n  };\n};\n\n/**\n * @param {object} config Parameters for generating nested args: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgs(config) {\n  const { argsObj, targetProp, include, overrides } = config;\n  return Object.keys(argsObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]:\n        (overrides.args && overrides.args[curr]) || argsObj[curr]\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating nested arg types: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgTypes(config) {\n  const { argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: {\n        // Namespaced to avoid conflicts\n        name: curr,\n        ...argTypesObj[curr],\n        ...overrides[curr],\n        table: {\n          ...(argTypesObj[curr].table || {}),\n          ...(overrides[curr] && overrides[curr].table),\n          category: targetProp\n        }\n      }\n    };\n  }, {});\n}\n\nexport const prevValues = {};\n\n/**\n * @param {object} config Parameters for generating nested arg actions: { componentName, argsTypeObj, targetProp, include, overrides }\n */\nexport function nestedArgActions(config) {\n  const { componentName, argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: (value, component) => {\n        component.tag(componentName).patch({\n          [targetProp]: {\n            ...prevValues[targetProp],\n            [curr.replace(targetProp + '_', '')]:\n              value === 'none'\n                ? undefined\n                : (overrides && overrides[curr]) || value // There are issues with merging objects here\n          }\n        });\n        // Allow patching to work with nested objects\n        if (!prevValues[targetProp]) {\n          prevValues[targetProp] = {};\n        }\n        prevValues[targetProp][curr.replace(targetProp + '_', '')] =\n          value === 'none'\n            ? undefined\n            : (overrides && overrides[curr]) || value;\n      }\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating story: { componentName, baseStory, subStory, targetProperty, include, options }\n */\nexport function generateSubStory(config) {\n  config.baseStory.args = {\n    ...config.baseStory.args,\n    ...nestedArgs({\n      argsObj: config.subStory.args || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.args) || {}\n    })\n  };\n\n  config.baseStory.argTypes = {\n    ...config.baseStory.argTypes,\n    ...nestedArgTypes({\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argTypes) || {}\n    })\n  };\n\n  if (\n    !(\n      config.baseStory &&\n      config.baseStory.parameters &&\n      config.baseStory.parameters.argActions\n    )\n  ) {\n    config.baseStory.parameters = {\n      argActions: {}\n    };\n  }\n\n  config.baseStory.parameters.argActions = {\n    ...config.baseStory.parameters.argActions,\n    ...nestedArgActions({\n      componentName: config.componentName,\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argActions) || {}\n    })\n  };\n}\n\n// used to create links to Lightning docs given an id\nexport const DocsLink = ({ children, id }) => {\n  const docsmap = {\n    lng: {\n      _base: 'https://rdkcentral.github.io/Lightning/docs',\n      Component: '/components/overview',\n      Text: '/textures/text',\n      Transition: '/transitions/attributes'\n    }\n  };\n  const [source, path] = id.split('.');\n  const href = docsmap[source]._base + docsmap[source][path];\n  return (\n    <a href={href} target=\"_blank\">\n      {children || id}\n    </a>\n  );\n};\n\nexport const Item = ({ children }) => children;\n\n/**\n * Creates formatted object for markdown prop tables\n * see Column and Row stories\n * @param {object} props\n * @param {object} props.type - TS-style generic/utility type\n */\nexport const ObjectFormat = ({ object }) => {\n  return [\n    '{',\n    <br />,\n    '  ',\n    ...utils.flatten(\n      Object.entries(object).map(([k, v]) => [\n        <span>&nbsp;&nbsp;</span>,\n        `${k}: `,\n        v,\n        ',',\n        <br />\n      ])\n    ),\n    '}'\n  ].map((x, i) => <Item key={i}>{x}</Item>);\n};\n\n/**\n * Formats TS-style generic types\n * See Columns and Row stories\n * @param {object} props\n * @param {object} props.children - component children\n * @param {string} props.type - Name of generic type\n */\nexport const GenericType = ({ children, type }) => {\n  return [type, '<', children, '>'].map((x, i) => <Item key={i}>{x}</Item>);\n};\n"],"names":[],"sourceRoot":""}