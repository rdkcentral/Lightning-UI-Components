{"version":3,"file":"5798.38024ae8.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;AAIA;AACA;AAKA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AASA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AA1HA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as RadioComponent } from '.';\\nimport { createModeControl } from '../../docs/utils';\\n\\nexport default {\\n  title: 'Components/Radio/Radio'\\n};\\n\\nexport const Radio = () =>\\n  class Radio extends lng.Component {\\n    static _template() {\\n      return {\\n        Radio: {\\n          type: RadioComponent\\n        }\\n      };\\n    }\\n  };\\nRadio.args = { checked: false, mode: 'unfocused' };\\nRadio.argTypes = {\\n  ...createModeControl({ summaryValue: 'unfocused' }),\\n  checked: {\\n    control: 'boolean',\\n    description: 'Toggles checked between on and off',\\n    table: { defaultValue: { summary: false } }\\n  }\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Radio\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 25\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 33\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 25\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 33\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { default as RadioComponent } from '.';\nimport { createModeControl } from '../../docs/utils';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as RadioComponent } from '.';\\nimport { createModeControl } from '../../docs/utils';\\nexport default {\\n  title: 'Components/Radio/Radio'\\n};\\nexport const Radio = () => class Radio extends lng.Component {\\n  static _template() {\\n    return {\\n      Radio: {\\n        type: RadioComponent\\n      }\\n    };\\n  }\\n};\\nRadio.args = {\\n  checked: false,\\n  mode: 'unfocused'\\n};\\nRadio.argTypes = {\\n  ...createModeControl({\\n    summaryValue: 'unfocused'\\n  }),\\n  checked: {\\n    control: 'boolean',\\n    description: 'Toggles checked between on and off',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  }\\n};\\nRadio.parameters = {\\n  ...Radio.parameters,\\n  docs: {\\n    ...Radio.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class Radio extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Radio: {\\\\n        type: RadioComponent\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...Radio.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"radio\": {\n        \"startLoc\": {\n          \"col\": 21,\n          \"line\": 25\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 33\n        },\n        \"startBody\": {\n          \"col\": 21,\n          \"line\": 25\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 33\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/Radio/Radio'\n};\nexport const Radio = () => class Radio extends lng.Component {\n  static _template() {\n    return {\n      Radio: {\n        type: RadioComponent\n      }\n    };\n  }\n};\nRadio.args = {\n  checked: false,\n  mode: 'unfocused'\n};\nRadio.argTypes = {\n  ...createModeControl({\n    summaryValue: 'unfocused'\n  }),\n  checked: {\n    control: 'boolean',\n    description: 'Toggles checked between on and off',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  }\n};\nRadio.parameters = {\n  ...Radio.parameters,\n  docs: {\n    ...Radio.parameters?.docs,\n    source: {\n      originalSource: \"() => class Radio extends lng.Component {\\n  static _template() {\\n    return {\\n      Radio: {\\n        type: RadioComponent\\n      }\\n    };\\n  }\\n}\",\n      ...Radio.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const size = theme.spacer.xxl;\n  return {\n    alpha: theme.alpha.primary,\n    width: size,\n    height: size,\n    knobHeight: size / 2,\n    knobWidth: size / 2,\n    radius: size / 2,\n    strokeWidth: theme.stroke.sm\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    backgroundColor: theme.color.fillNeutralDisabled,\n    backgroundColorChecked: theme.color.fillNeutral,\n    knobColor: theme.color.fillInverse,\n    strokeColor: theme.color.strokeInverse\n  },\n  inverse: {\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillInverse,\n    knobColor: theme.color.fillNeutral,\n    strokeColor: theme.color.strokeNeutral\n  },\n  brand: {\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillBrand,\n    knobColor: theme.color.fillNeutral,\n    strokeColor: theme.color.strokeNeutral\n  }\n});\n\nexport const mode = theme => ({\n  disabled: { alpha: theme.alpha.inactive }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Base from '../Base';\nimport lng from '@lightningjs/core';\nimport * as styles from './Radio.styles.js';\n\nexport default class Radio extends Base {\n  static get __componentName() {\n    return 'Radio';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    const center = { mount: 0.5, x: w => w / 2, y: h => h / 2 };\n    return {\n      Body: {\n        rtt: true, // ensures the background color doesn't bleed into the knob when disabled\n        ...center,\n        Knob: {\n          ...center,\n          alpha: 0\n        }\n      },\n      Stroke: center\n    };\n  }\n\n  static get tags() {\n    return ['Knob', 'Body', 'Stroke'];\n  }\n  static get properties() {\n    return ['checked'];\n  }\n\n  _update() {\n    this._updateBody();\n    this._updateStroke();\n    this._updateKnob();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n    this._updateOpacity();\n  }\n\n  _updateBody() {\n    const bodyColor = this.checked\n      ? this.style.backgroundColorChecked\n      : this.style.backgroundColor;\n\n    // if the inner body should be square, a rounded corner radius can still be applied to the stroke\n    const radius =\n      this.style.radius >= this.w / 2\n        ? (this.w - this.style.strokeWidth) / 2\n        : 0;\n\n    this._Body.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w - this.style.strokeWidth,\n        this.h - this.style.strokeWidth,\n        radius,\n        null,\n        null,\n        true,\n        bodyColor\n      )\n    });\n  }\n\n  _updateStroke() {\n    this._Stroke.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w,\n        this.h,\n        this.style.radius,\n        this.style.strokeWidth,\n        this.style.strokeColor,\n        false\n      )\n    });\n  }\n\n  _updateKnob() {\n    this._Knob.patch({\n      texture: lng.Tools.getRoundRect(\n        this.style.knobWidth,\n        this.style.knobHeight,\n        this.style.knobWidth / 2,\n        null,\n        null,\n        true,\n        this.style.knobColor\n      )\n    });\n\n    this.applySmooth(this._Knob, {\n      alpha: this.checked ? 1 : 0\n    });\n  }\n\n  _updateOpacity() {\n    this.applySmooth(this, { alpha: this.style.alpha });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n"],"names":[],"sourceRoot":""}