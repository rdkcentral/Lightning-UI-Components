{"version":3,"file":"3775.28934a82.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AA3EA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AATA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AAGA;AAAA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AASA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAMA;AAGA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Shadow/Shadow.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Shadow/Shadow.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Shadow/Shadow.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/utils.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  alpha: theme.alpha.none,\n  animation: theme.animation.standardEntrance,\n  blur: theme.spacer.xxl,\n  color: theme.color.shadowNeutralFocus,\n  offsetX: 0,\n  offsetY: theme.spacer.lg,\n  radius: theme.radius.md,\n  spread: theme.spacer.md * -1,\n\n  // TODO: Need to know which offsets between the base and focus style is largest. Could refactor.\n  maxOffsetY: theme.spacer.xxl,\n  maxOffsetX: 0\n});\n\nexport const mode = theme => ({\n  // Note: styleguide implies also reducing the size of the shadow here,\n  // however we currently can't gracefully animate that size change.\n  // Just animating the offset and alpha gives a pretty decent effect\n  focused: {\n    alpha: theme.alpha.secondary,\n    offsetY: theme.spacer.xxl\n  }\n});\n\nexport const tone = theme => ({\n  neutral: {\n    color: theme.color.shadowNeutralFocus\n  },\n  inverse: {\n    color: theme.color.shadowInverseFocus\n  },\n  brand: {\n    color: theme.color.shadowBrandFocus\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport * as styles from './Shadow.styles.js';\n\nexport default class Shadow extends Base {\n  static get __componentName() {\n    return 'Shadow';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n  static get properties() {\n    return ['maskShadow'];\n  }\n  static get tags() {\n    return ['Frame', { name: 'Shadow', path: 'Frame.Shadow' }];\n  }\n\n  _updateFocusStyle() {\n    if (!this._Shadow) return;\n    // TODO: think about how does the user know which styles are handled in the focus transition.\n    this.applySmooth(\n      this._Shadow,\n      { alpha: this.style.alpha, y: this.style.offsetY, x: this.style.offsetX },\n      {\n        alpha: [this.style.alpha, this.style.animation],\n        y: [this.style.offsetY, this.style.animation],\n        x: [this.style.offsetX, this.style.animation]\n      }\n    );\n  }\n\n  _update() {\n    // To behave like Figma's shadow settings, blur value is added to width and height to expand shadow size\n    const shadowSize = this.style.spread + this.style.blur * 2; // size increase based on shadow params\n    const holepunchError = 4; // extra value to tighten holepunch area so you don't see sliver of extra space\n\n    // TODO: Need to know which mode style has the largest offset values, could refactor\n    const extraBoundsY = this.style.maxOffsetY;\n    const extraBoundsX = this.style.maxOffsetX;\n\n    this.patch({\n      Frame: {\n        w: this.w + shadowSize * 2 + extraBoundsX,\n        h: this.h + shadowSize * 2 + extraBoundsY,\n        x: (this.w + extraBoundsX) / 2,\n        y: (this.h + extraBoundsY) / 2,\n        mount: 0.5,\n\n        // maskShadow prop enables a holepunch shader to mask out the parent component shape\n        rtt: this.maskShadow,\n        shader: this.maskShadow\n          ? {\n              type: lng.shaders.Hole,\n              w: this.w - holepunchError,\n              h: this.h - holepunchError,\n              x: shadowSize + holepunchError / 2,\n              y: shadowSize + holepunchError / 2,\n              radius: this.style.radius\n            }\n          : undefined,\n        Shadow: {\n          color: this.style.color,\n          texture: lng.Tools.getShadowRect(\n            // Underlying getShadowRect function adds blur to the canvas size, so we don't need to add it like above\n            this.w + this.style.spread * 2,\n            this.h + this.style.spread * 2,\n            this.style.radius,\n            this.style.blur\n          )\n        }\n      }\n    });\n\n    // Set to should smooth after initial shadow patch has been created\n    if (this.shouldSmooth === undefined) {\n      this.shouldSmooth = true;\n    }\n\n    this._updateFocusStyle();\n  }\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as ShadowComponent } from '.';\\nimport { createModeControl } from '../../docs/utils';\\n\\nexport default {\\n  title: 'Components/Shadow'\\n};\\n\\nexport const Shadow = () =>\\n  class Shadow extends lng.Component {\\n    static _template() {\\n      return {\\n        Shadow: {\\n          type: ShadowComponent,\\n          w: 200,\\n          h: 200\\n        }\\n      };\\n    }\\n  };\\nShadow.args = {\\n  maskShadow: false,\\n  mode: 'focused'\\n};\\nShadow.argTypes = {\\n  ...createModeControl({ summaryValue: 'focused' }),\\n  maskShadow: {\\n    control: 'boolean',\\n    description:\\n      'Enables a holepunch shader to mask out the component shape. Useful for transparent button states that should not show the shadow behind the element. However, requires an additional draw call for rtt.',\\n    table: {\\n      defaultValue: { summary: false }\\n    }\\n  }\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Shadow\": {\n    \"startLoc\": {\n      \"col\": 22,\n      \"line\": 25\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 35\n    },\n    \"startBody\": {\n      \"col\": 22,\n      \"line\": 25\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 35\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { default as ShadowComponent } from '.';\nimport { createModeControl } from '../../docs/utils';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as ShadowComponent } from '.';\\nimport { createModeControl } from '../../docs/utils';\\nexport default {\\n  title: 'Components/Shadow'\\n};\\nexport const Shadow = () => class Shadow extends lng.Component {\\n  static _template() {\\n    return {\\n      Shadow: {\\n        type: ShadowComponent,\\n        w: 200,\\n        h: 200\\n      }\\n    };\\n  }\\n};\\nShadow.args = {\\n  maskShadow: false,\\n  mode: 'focused'\\n};\\nShadow.argTypes = {\\n  ...createModeControl({\\n    summaryValue: 'focused'\\n  }),\\n  maskShadow: {\\n    control: 'boolean',\\n    description: 'Enables a holepunch shader to mask out the component shape. Useful for transparent button states that should not show the shadow behind the element. However, requires an additional draw call for rtt.',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  }\\n};\\nShadow.parameters = {\\n  ...Shadow.parameters,\\n  docs: {\\n    ...Shadow.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class Shadow extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Shadow: {\\\\n        type: ShadowComponent,\\\\n        w: 200,\\\\n        h: 200\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...Shadow.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"shadow\": {\n        \"startLoc\": {\n          \"col\": 22,\n          \"line\": 25\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 35\n        },\n        \"startBody\": {\n          \"col\": 22,\n          \"line\": 25\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 35\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/Shadow'\n};\nexport const Shadow = () => class Shadow extends lng.Component {\n  static _template() {\n    return {\n      Shadow: {\n        type: ShadowComponent,\n        w: 200,\n        h: 200\n      }\n    };\n  }\n};\nShadow.args = {\n  maskShadow: false,\n  mode: 'focused'\n};\nShadow.argTypes = {\n  ...createModeControl({\n    summaryValue: 'focused'\n  }),\n  maskShadow: {\n    control: 'boolean',\n    description: 'Enables a holepunch shader to mask out the component shape. Useful for transparent button states that should not show the shadow behind the element. However, requires an additional draw call for rtt.',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  }\n};\nShadow.parameters = {\n  ...Shadow.parameters,\n  docs: {\n    ...Shadow.parameters?.docs,\n    source: {\n      originalSource: \"() => class Shadow extends lng.Component {\\n  static _template() {\\n    return {\\n      Shadow: {\\n        type: ShadowComponent,\\n        w: 200,\\n        h: 200\\n      }\\n    };\\n  }\\n}\",\n      ...Shadow.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport utils from '../utils';\n\n// creates Mode control on stories\nexport const createModeControl = ({ options, summaryValue } = {}) => {\n  return {\n    mode: {\n      control: 'radio',\n      options:\n        options && Array.isArray(options)\n          ? ['unfocused', ...options]\n          : ['unfocused', 'focused', 'disabled'],\n      description: 'Sets the visual mode for the component',\n      table: {\n        defaultValue: { summary: summaryValue }\n      },\n      type: { name: 'string', required: true }\n    }\n  };\n};\n\n/**\n * @param {object} config Parameters for generating nested args: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgs(config) {\n  const { argsObj, targetProp, include, overrides } = config;\n  return Object.keys(argsObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]:\n        (overrides.args && overrides.args[curr]) || argsObj[curr]\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating nested arg types: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgTypes(config) {\n  const { argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: {\n        // Namespaced to avoid conflicts\n        name: curr,\n        ...argTypesObj[curr],\n        ...overrides[curr],\n        table: {\n          ...(argTypesObj[curr].table || {}),\n          ...(overrides[curr] && overrides[curr].table),\n          category: targetProp\n        }\n      }\n    };\n  }, {});\n}\n\nexport const prevValues = {};\n\n/**\n * @param {object} config Parameters for generating nested arg actions: { componentName, argsTypeObj, targetProp, include, overrides }\n */\nexport function nestedArgActions(config) {\n  const { componentName, argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: (value, component) => {\n        component.tag(componentName).patch({\n          [targetProp]: {\n            ...prevValues[targetProp],\n            [curr.replace(targetProp + '_', '')]:\n              value === 'none'\n                ? undefined\n                : (overrides && overrides[curr]) || value // There are issues with merging objects here\n          }\n        });\n        // Allow patching to work with nested objects\n        if (!prevValues[targetProp]) {\n          prevValues[targetProp] = {};\n        }\n        prevValues[targetProp][curr.replace(targetProp + '_', '')] =\n          value === 'none'\n            ? undefined\n            : (overrides && overrides[curr]) || value;\n      }\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating story: { componentName, baseStory, subStory, targetProperty, include, options }\n */\nexport function generateSubStory(config) {\n  config.baseStory.args = {\n    ...config.baseStory.args,\n    ...nestedArgs({\n      argsObj: config.subStory.args || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.args) || {}\n    })\n  };\n\n  config.baseStory.argTypes = {\n    ...config.baseStory.argTypes,\n    ...nestedArgTypes({\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argTypes) || {}\n    })\n  };\n\n  if (\n    !(\n      config.baseStory &&\n      config.baseStory.parameters &&\n      config.baseStory.parameters.argActions\n    )\n  ) {\n    config.baseStory.parameters = {\n      argActions: {}\n    };\n  }\n\n  config.baseStory.parameters.argActions = {\n    ...config.baseStory.parameters.argActions,\n    ...nestedArgActions({\n      componentName: config.componentName,\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argActions) || {}\n    })\n  };\n}\n\n// used to create links to Lightning docs given an id\nexport const DocsLink = ({ children, id }) => {\n  const docsmap = {\n    lng: {\n      _base: 'https://rdkcentral.github.io/Lightning/docs',\n      Component: '/components/overview',\n      Text: '/textures/text',\n      Transition: '/transitions/attributes'\n    }\n  };\n  const [source, path] = id.split('.');\n  const href = docsmap[source]._base + docsmap[source][path];\n  return (\n    <a href={href} target=\"_blank\">\n      {children || id}\n    </a>\n  );\n};\n\nexport const Item = ({ children }) => children;\n\n/**\n * Creates formatted object for markdown prop tables\n * see Column and Row stories\n * @param {object} props\n * @param {object} props.type - TS-style generic/utility type\n */\nexport const ObjectFormat = ({ object }) => {\n  return [\n    '{',\n    <br />,\n    '  ',\n    ...utils.flatten(\n      Object.entries(object).map(([k, v]) => [\n        <span>&nbsp;&nbsp;</span>,\n        `${k}: `,\n        v,\n        ',',\n        <br />\n      ])\n    ),\n    '}'\n  ].map((x, i) => <Item key={i}>{x}</Item>);\n};\n\n/**\n * Formats TS-style generic types\n * See Columns and Row stories\n * @param {object} props\n * @param {object} props.children - component children\n * @param {string} props.type - Name of generic type\n */\nexport const GenericType = ({ children, type }) => {\n  return [type, '<', children, '>'].map((x, i) => <Item key={i}>{x}</Item>);\n};\n"],"names":[],"sourceRoot":""}