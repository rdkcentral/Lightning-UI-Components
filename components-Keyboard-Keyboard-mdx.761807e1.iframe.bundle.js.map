{"version":3,"file":"components-Keyboard-Keyboard-mdx.761807e1.iframe.bundle.js","mappingssources":["webpack://lightning-ui-docs/../../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Keyboard/Keyboard.mdx","webpack://lightning-ui-docs/../../../node_modules/memoizerific/ sync","webpack://lightning-ui-docs/../../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://lightning-ui-docs/../../../node_modules/react/jsx-runtime.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n/*prettier-ignore*/\n/*\nCopyright 2023 Comcast Cable Communications Management, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nSPDX-License-Identifier: Apache-2.0\n\\*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/Lightning-UI-Components/Lightning-UI-Components/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim\";\nimport {Meta, Title} from '@storybook/blocks';\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [\"\\n\", \"\\n\", \"\\n\", _jsx(Meta, {\n      title: \"Components/Keyboard\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"keyboard\",\n      children: \"Keyboard\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pattern created out of multiple elements to represent a keyboard.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"source\",\n      children: \"Source\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/rdkcentral/Lightning-UI-Components/blob/develop/packages/@lightningjs/ui-components/src/components/Keyboard/Keyboard.js\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"https://github.com/rdkcentral/Lightning-UI-Components/blob/develop/packages/@lightningjs/ui-components/src/components/Keyboard/Keyboard.js\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import and use the Keyboard format components (eg \", _jsx(_components.code, {\n        children: \"KeyboardFullscreen\"\n      }), \", \", _jsx(_components.code, {\n        children: \"KeyboardNumbers\"\n      }), \") to get pre-formatted and sized keyboards out of the box, or you can pass a custom \", _jsx(_components.code, {\n        children: \"formats\"\n      }), \" object.\\nThe keyboard is made up of \", _jsx(_components.code, {\n        children: \"Column\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"Row\"\n      }), \" layouts, \", _jsx(_components.code, {\n        children: \"Key\"\n      }), \" component, and in some cases \", _jsx(_components.code, {\n        children: \"Input\"\n      }), \" pattern.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { Keyboard } from '@lightningjs/ui-components';\\n\\nclass Example extends lng.Component {\\n  static _template() {\\n    return {\\n      Keyboard: {\\n        type: KeyboardQwerty\\n      }\\n    };\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To create your own formats, you can pass an object of arrays to represent each format.\\nThe array can be flat or two dimensional. If the keyboard is passed other params like \", _jsx(_components.code, {\n        children: \"columnCount\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"rowCount\"\n      }), \", both will auto layout the keyboard.\\nThe variables in the array can be a single string or an object that defines the same properties as a \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \".\\nAll of the following examples will yield the same result.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"      Keyboard: {\\n        ...\\n        formats: {\\n          qwerty: [\\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'],\\n            ['z', 'x', 'c', 'v', 'b', 'n', 'm'],\\n          ]\\n        }\\n      }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"      Keyboard: {\\n        ...\\n        columnCount: 10,\\n        formats: {\\n          qwerty: ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p' 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';','z', 'x', 'c', 'v', 'b', 'n', 'm'],\\n        }\\n      }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"      Keyboard: {\\n        ...\\n        rowCount: 3,\\n        formats: {\\n          qwerty: ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p' 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';','z', 'x', 'c', 'v', 'b', 'n', 'm'],\\n        }\\n      }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"api\",\n      children: \"API\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"properties\",\n      children: \"Properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"name\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"required\"\n          }), _jsx(_components.th, {\n            children: \"default\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"columnCount\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"11\"\n          }), _jsx(_components.td, {\n            children: \"number of columns across the keyboard if passing a flat array\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"centeKeyboard\"\n          }), _jsx(_components.td, {\n            children: \"bool\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"center the keyboard within it's set width (must set the w property of Keyboard)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"centerKeys\"\n          }), _jsx(_components.td, {\n            children: \"bool\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"center the keys within it's set width (must set the w property of Keyboard)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"defaultFormat\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"true\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsxs(_components.td, {\n            children: [\"default format of the keyboard to be shown. should be a key of \", _jsx(_components.code, {\n              children: \"formats\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"formats\"\n          }), _jsx(_components.td, {\n            children: \"object\"\n          }), _jsx(_components.td, {\n            children: \"true\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsx(_components.td, {\n            children: \"object containing arrays that represent different formats that the keyboard can be presented in. These arrays can contain strings or objects.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"inline\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"if the keyboard is an inline keyboard and can ignore row/column count requirements\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"input\"\n          }), _jsx(_components.td, {\n            children: \"object\"\n          }), _jsx(_components.td, {\n            children: \"true\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsxs(_components.td, {\n            children: [\"object with all of the properties for \", _jsx(_components.a, {\n              href: \"?path=/docs/components-input--docs\",\n              children: \"Input\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"keyComponent\"\n          }), _jsx(_components.td, {\n            children: \"lng.Component\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"Key\"\n          }), _jsx(_components.td, {\n            children: \"component to display for each key\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"rowCount\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsx(_components.td, {\n            children: \"number of rows down the keyboard if passing a flat array\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"rowWrap\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"true\"\n          }), _jsx(_components.td, {\n            children: \"wrap keyboard rows when navigating left and right\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"title\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsx(_components.td, {\n            children: \"title announcement text for screen readers\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"style-properties\",\n      children: \"Style Properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"name\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"inputStyle\"\n          }), _jsx(_components.td, {\n            children: \"object\"\n          }), _jsx(_components.td, {\n            children: \"styles of input\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"inputSpacing\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsxs(_components.td, {\n            children: [\"space in px between \", _jsx(_components.code, {\n              children: \"Input\"\n            }), \" component and \", _jsx(_components.code, {\n              children: \"Keyboard\"\n            }), \" component in \", _jsx(_components.code, {\n              children: \"KeyboardInput\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"marginX\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsxs(_components.td, {\n            children: [\"space to the left and right of keyboard content; used for centering \", _jsx(_components.code, {\n              children: \"Keyboard\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"screenW\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"width of display screen\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"keySpacing\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"space in px between each key\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"methods\",\n      children: \"Methods\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"getselectedkey--rownumber-columnnumber-\",\n      children: _jsx(_components.code, {\n        children: \"getSelectedKey(): { row:number, column:number }\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Returns an object containing the currently selected row and column of the currently focused keyboard.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"selectkeyonkeyboard--rownumber-columnnumber-\",\n      children: _jsx(_components.code, {\n        children: \"selectKeyOn(keyboard, { row:number, column:number })\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Takes in a keyboard format and a specified row and column and changes focus on the keyboard to that key.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"events\",\n      children: \"Events\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"onsoftkey--keystring-toggleboolean-\",\n      children: _jsx(_components.code, {\n        children: \"$onSoftKey: { key:string, toggle:boolean }\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fired when a key is Entered\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"keyboardfocused-bool\",\n      children: _jsx(_components.code, {\n        children: \"$keyboardFocused: bool\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fired when keyboard is focused or unfocused. Can be listened to by an input to know if the input should be listening for softkey events\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"togglekeyboard--keystring-\",\n      children: _jsx(_components.code, {\n        children: \"$toggleKeyboard: { key:string }\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fired when defaultFormat is toggled between Dialpad and Dialpad extended\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../node_modules/memoizerific sync recursive\";\nmodule.exports = webpackEmptyContext;","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":[],"sourceRoot":""}