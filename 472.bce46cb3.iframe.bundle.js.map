{"version":3,"file":"472.bce46cb3.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAQA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;AAAA;AAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AApBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AASA;AASA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAfA;AACA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAjGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Slider/Slider.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ProgressBar/ProgressBar.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ProgressBar/ProgressBar.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { createModeControl } from '../../docs/utils';\\nimport TextBox from '../TextBox';\\nimport Slider from '.';\\nimport { useArgs } from '@storybook/client-api';\\n\\nexport default {\\n  title: 'Components/Slider/Slider'\\n};\\n\\nexport const Basic = () => {\\n  const [{ value }, updateArgs] = useArgs();\\n  return class Basic extends lng.Component {\\n    static _template() {\\n      return {\\n        Slider: {\\n          type: Slider,\\n          value: value,\\n          signals: {\\n            onChange: true\\n          }\\n        }\\n      };\\n    }\\n    // update arg control when value changes\\n    onChange(value) {\\n      updateArgs({ value });\\n    }\\n  };\\n};\\n\\nBasic.args = {\\n  min: 0,\\n  max: 100,\\n  value: 50,\\n  step: 1,\\n  vertical: false,\\n  mode: 'focused'\\n};\\n\\nBasic.argTypes = {\\n  ...createModeControl({ summaryValue: 'focused' }),\\n  min: {\\n    control: 'number',\\n    description: 'Lower bound of value',\\n    table: { defaultValue: { summary: 0 }, type: { summary: 'number' } }\\n  },\\n  max: {\\n    control: 'number',\\n    description: 'Upper bound of value',\\n    table: { defaultValue: { summary: 100 }, type: { summary: 'number' } }\\n  },\\n  value: {\\n    control: 'number',\\n    description: 'Current value',\\n    table: {\\n      defaultValue: { summary: '0 or min' },\\n      type: { summary: 'number' }\\n    }\\n  },\\n  step: {\\n    control: 'number',\\n    description: '+/- value on change',\\n    table: { defaultValue: { summary: 1 }, type: { summary: 'number' } }\\n  },\\n  vertical: {\\n    control: 'boolean',\\n    description: 'If true, the slider is displayed vertically',\\n    table: { defaultValue: { summary: false }, type: { summary: 'boolean' } }\\n  }\\n};\\n\\nexport const SignalHandling = () =>\\n  class SignalHandling extends lng.Component {\\n    static _template() {\\n      return {\\n        flex: { direction: 'column' },\\n        Slider: {\\n          type: Slider,\\n          step: 10,\\n          y: 15,\\n          w: 328,\\n          signals: {\\n            onChange: true\\n          }\\n        },\\n        Text: {\\n          y: 60,\\n          type: TextBox\\n        }\\n      };\\n    }\\n\\n    onChange(value) {\\n      this.tag('Text').content = `Value: ${value}`;\\n    }\\n  };\\nSignalHandling.args = {\\n  mode: 'focused'\\n};\\n\\nSignalHandling.argTypes = createModeControl({ summaryValue: 'focused' });\\n\\nSignalHandling.parameters = {\\n  storyDetails:\\n    'When the onChange signal is emitted from the Slider the number in the TextBox is updated with the Slider value.'\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Basic\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 27\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 50\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 27\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 50\n    }\n  },\n  \"SignalHandling\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 124\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 148\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 124\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 148\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { createModeControl } from '../../docs/utils';\nimport TextBox from '../TextBox';\nimport Slider from '.';\nimport { useArgs } from '@storybook/client-api';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { createModeControl } from '../../docs/utils';\\nimport TextBox from '../TextBox';\\nimport Slider from '.';\\nimport { useArgs } from '@storybook/client-api';\\nexport default {\\n  title: 'Components/Slider/Slider'\\n};\\nexport const Basic = () => {\\n  const [{\\n    value\\n  }, updateArgs] = useArgs();\\n  return class Basic extends lng.Component {\\n    static _template() {\\n      return {\\n        Slider: {\\n          type: Slider,\\n          value: value,\\n          signals: {\\n            onChange: true\\n          }\\n        }\\n      };\\n    }\\n    // update arg control when value changes\\n    onChange(value) {\\n      updateArgs({\\n        value\\n      });\\n    }\\n  };\\n};\\nBasic.args = {\\n  min: 0,\\n  max: 100,\\n  value: 50,\\n  step: 1,\\n  vertical: false,\\n  mode: 'focused'\\n};\\nBasic.argTypes = {\\n  ...createModeControl({\\n    summaryValue: 'focused'\\n  }),\\n  min: {\\n    control: 'number',\\n    description: 'Lower bound of value',\\n    table: {\\n      defaultValue: {\\n        summary: 0\\n      },\\n      type: {\\n        summary: 'number'\\n      }\\n    }\\n  },\\n  max: {\\n    control: 'number',\\n    description: 'Upper bound of value',\\n    table: {\\n      defaultValue: {\\n        summary: 100\\n      },\\n      type: {\\n        summary: 'number'\\n      }\\n    }\\n  },\\n  value: {\\n    control: 'number',\\n    description: 'Current value',\\n    table: {\\n      defaultValue: {\\n        summary: '0 or min'\\n      },\\n      type: {\\n        summary: 'number'\\n      }\\n    }\\n  },\\n  step: {\\n    control: 'number',\\n    description: '+/- value on change',\\n    table: {\\n      defaultValue: {\\n        summary: 1\\n      },\\n      type: {\\n        summary: 'number'\\n      }\\n    }\\n  },\\n  vertical: {\\n    control: 'boolean',\\n    description: 'If true, the slider is displayed vertically',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      },\\n      type: {\\n        summary: 'boolean'\\n      }\\n    }\\n  }\\n};\\nexport const SignalHandling = () => class SignalHandling extends lng.Component {\\n  static _template() {\\n    return {\\n      flex: {\\n        direction: 'column'\\n      },\\n      Slider: {\\n        type: Slider,\\n        step: 10,\\n        y: 15,\\n        w: 328,\\n        signals: {\\n          onChange: true\\n        }\\n      },\\n      Text: {\\n        y: 60,\\n        type: TextBox\\n      }\\n    };\\n  }\\n  onChange(value) {\\n    this.tag('Text').content = `Value: ${value}`;\\n  }\\n};\\nSignalHandling.args = {\\n  mode: 'focused'\\n};\\nSignalHandling.argTypes = createModeControl({\\n  summaryValue: 'focused'\\n});\\nSignalHandling.parameters = {\\n  storyDetails: 'When the onChange signal is emitted from the Slider the number in the TextBox is updated with the Slider value.'\\n};\\nBasic.parameters = {\\n  ...Basic.parameters,\\n  docs: {\\n    ...Basic.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => {\\\\n  const [{\\\\n    value\\\\n  }, updateArgs] = useArgs();\\\\n  return class Basic extends lng.Component {\\\\n    static _template() {\\\\n      return {\\\\n        Slider: {\\\\n          type: Slider,\\\\n          value: value,\\\\n          signals: {\\\\n            onChange: true\\\\n          }\\\\n        }\\\\n      };\\\\n    }\\\\n    // update arg control when value changes\\\\n    onChange(value) {\\\\n      updateArgs({\\\\n        value\\\\n      });\\\\n    }\\\\n  };\\\\n}\\\",\\n      ...Basic.parameters?.docs?.source\\n    }\\n  }\\n};\\nSignalHandling.parameters = {\\n  ...SignalHandling.parameters,\\n  docs: {\\n    ...SignalHandling.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class SignalHandling extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      flex: {\\\\n        direction: 'column'\\\\n      },\\\\n      Slider: {\\\\n        type: Slider,\\\\n        step: 10,\\\\n        y: 15,\\\\n        w: 328,\\\\n        signals: {\\\\n          onChange: true\\\\n        }\\\\n      },\\\\n      Text: {\\\\n        y: 60,\\\\n        type: TextBox\\\\n      }\\\\n    };\\\\n  }\\\\n  onChange(value) {\\\\n    this.tag('Text').content = `Value: ${value}`;\\\\n  }\\\\n}\\\",\\n      ...SignalHandling.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"basic\": {\n        \"startLoc\": {\n          \"col\": 21,\n          \"line\": 27\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 50\n        },\n        \"startBody\": {\n          \"col\": 21,\n          \"line\": 27\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 50\n        }\n      },\n      \"signal-handling\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 124\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 148\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 124\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 148\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/Slider/Slider'\n};\nexport const Basic = () => {\n  const [{\n    value\n  }, updateArgs] = useArgs();\n  return class Basic extends lng.Component {\n    static _template() {\n      return {\n        Slider: {\n          type: Slider,\n          value: value,\n          signals: {\n            onChange: true\n          }\n        }\n      };\n    }\n    // update arg control when value changes\n    onChange(value) {\n      updateArgs({\n        value\n      });\n    }\n  };\n};;\nBasic.args = {\n  min: 0,\n  max: 100,\n  value: 50,\n  step: 1,\n  vertical: false,\n  mode: 'focused'\n};\nBasic.argTypes = {\n  ...createModeControl({\n    summaryValue: 'focused'\n  }),\n  min: {\n    control: 'number',\n    description: 'Lower bound of value',\n    table: {\n      defaultValue: {\n        summary: 0\n      },\n      type: {\n        summary: 'number'\n      }\n    }\n  },\n  max: {\n    control: 'number',\n    description: 'Upper bound of value',\n    table: {\n      defaultValue: {\n        summary: 100\n      },\n      type: {\n        summary: 'number'\n      }\n    }\n  },\n  value: {\n    control: 'number',\n    description: 'Current value',\n    table: {\n      defaultValue: {\n        summary: '0 or min'\n      },\n      type: {\n        summary: 'number'\n      }\n    }\n  },\n  step: {\n    control: 'number',\n    description: '+/- value on change',\n    table: {\n      defaultValue: {\n        summary: 1\n      },\n      type: {\n        summary: 'number'\n      }\n    }\n  },\n  vertical: {\n    control: 'boolean',\n    description: 'If true, the slider is displayed vertically',\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      type: {\n        summary: 'boolean'\n      }\n    }\n  }\n};\nexport const SignalHandling = () => class SignalHandling extends lng.Component {\n  static _template() {\n    return {\n      flex: {\n        direction: 'column'\n      },\n      Slider: {\n        type: Slider,\n        step: 10,\n        y: 15,\n        w: 328,\n        signals: {\n          onChange: true\n        }\n      },\n      Text: {\n        y: 60,\n        type: TextBox\n      }\n    };\n  }\n  onChange(value) {\n    this.tag('Text').content = `Value: ${value}`;\n  }\n};\nSignalHandling.args = {\n  mode: 'focused'\n};\nSignalHandling.argTypes = createModeControl({\n  summaryValue: 'focused'\n});\nSignalHandling.parameters = {\n  storyDetails: 'When the onChange signal is emitted from the Slider the number in the TextBox is updated with the Slider value.'\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const [{\\n    value\\n  }, updateArgs] = useArgs();\\n  return class Basic extends lng.Component {\\n    static _template() {\\n      return {\\n        Slider: {\\n          type: Slider,\\n          value: value,\\n          signals: {\\n            onChange: true\\n          }\\n        }\\n      };\\n    }\\n    // update arg control when value changes\\n    onChange(value) {\\n      updateArgs({\\n        value\\n      });\\n    }\\n  };\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nSignalHandling.parameters = {\n  ...SignalHandling.parameters,\n  docs: {\n    ...SignalHandling.parameters?.docs,\n    source: {\n      originalSource: \"() => class SignalHandling extends lng.Component {\\n  static _template() {\\n    return {\\n      flex: {\\n        direction: 'column'\\n      },\\n      Slider: {\\n        type: Slider,\\n        step: 10,\\n        y: 15,\\n        w: 328,\\n        signals: {\\n          onChange: true\\n        }\\n      },\\n      Text: {\\n        y: 60,\\n        type: TextBox\\n      }\\n    };\\n  }\\n  onChange(value) {\\n    this.tag('Text').content = `Value: ${value}`;\\n  }\\n}\",\n      ...SignalHandling.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  height: theme.spacer.md,\n  animation: theme.animation.utility,\n  radius: theme.radius.xs\n});\n\nexport const tone = theme => ({\n  neutral: {\n    barColor: theme.color.fillNeutralTertiary,\n    progressColor: theme.color.fillNeutral\n  },\n  inverse: {\n    barColor: theme.color.fillInverseTertiary,\n    progressColor: theme.color.fillInverse\n  },\n  brand: {\n    barColor: theme.color.fillNeutralTertiary,\n    progressColor: theme.color.fillBrand\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport * as styles from './ProgressBar.styles.js';\n\nexport default class ProgressBar extends Base {\n  static _template() {\n    return {\n      Bar: { zIndex: 1 },\n      Progress: { alpha: 0, zIndex: 2 }\n    };\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static get __componentName() {\n    return 'ProgressBar';\n  }\n\n  static get properties() {\n    return ['progress'];\n  }\n\n  static get tags() {\n    return ['Bar', 'Progress'];\n  }\n\n  _construct() {\n    super._construct && super._construct();\n    this._progress = 0;\n  }\n\n  _update() {\n    this._updateTextures();\n    this._updateProgress();\n    if (this._progressChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._progressChanged = false;\n    }\n  }\n\n  _updateTextures() {\n    const w = this._getProgressWidth();\n\n    this._Bar.texture = lng.Tools.getRoundRect(\n      // getRoundRect adds 2 to the width\n      this.w - 2,\n      this.h,\n      this.style.radius,\n      0,\n      0,\n      true,\n      this.style.barColor\n    );\n\n    this._Progress.texture = lng.Tools.getRoundRect(\n      w + 1,\n      this.h,\n      this.style.radius,\n      0,\n      0,\n      true,\n      this.style.progressColor\n    );\n  }\n\n  _updateProgress() {\n    const w = this._getProgressWidth();\n\n    this._Progress.smooth = {\n      w: [w, this.style.animation],\n      alpha: Number(w > 0)\n    };\n  }\n\n  _setProgress(progress) {\n    this._progressChanged = progress !== this._progress;\n    return progress;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    if (this._announce !== undefined && this._announce !== null) {\n      return this._announce;\n    }\n\n    let progress = this.progress;\n    if (progress > 1) {\n      progress = 1;\n    } else if (progress < 0) {\n      progress = 0;\n    }\n    return `${Math.round(progress * 100)}%`;\n  }\n\n  _getProgressWidth() {\n    const p = this.w * this._progress;\n    const w = p <= 0 ? 0 : Math.min(p, this.w);\n    return w;\n  }\n}\n"],"names":[],"sourceRoot":""}