{"version":3,"file":"4705.4c490523.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAIA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;;;;AClsources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withEditItems/index.js","webpack://lightning-ui-docs/"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport default function (Base) {\n  return class extends Base {\n    _init() {\n      super._init();\n      this.isEditing = false;\n    }\n\n    toggleEdit() {\n      this.isEditing = !this.isEditing;\n    }\n\n    _swapItemArrayPos(array, current, previous) {\n      [array[current], array[previous]] = [array[previous], array[current]];\n      super.selectedIndex = current;\n    }\n\n    _unfocus() {\n      this.isEditing = false;\n      super._unfocus();\n    }\n\n    get selectedIndex() {\n      return this._selectedIndex;\n    }\n    set selectedIndex(index) {\n      if (!this.isEditing) {\n        super.selectedIndex = index;\n        return;\n      }\n      if (\n        this.selectedIndex >= this.items.length - 1 &&\n        index > this.selectedIndex\n      ) {\n        return;\n      }\n      const currentItem = this.selected;\n      this.prevSelected = currentItem;\n      const nextItem = this.items[index];\n      const previousIndex = this.selectedIndex;\n      const oldPosX = currentItem.transition('x')\n        ? currentItem.transition('x').targetValue\n        : currentItem.x;\n      const oldPosY = currentItem.transition('y')\n        ? currentItem.transition('y').targetValue\n        : currentItem.y;\n      const newPosX = nextItem.transition('x')\n        ? nextItem.transition('x').targetValue\n        : nextItem.x;\n      const newPosY = nextItem.transition('y')\n        ? nextItem.transition('y').targetValue\n        : nextItem.y;\n\n      this._swapItemArrayPos(this.items, index, previousIndex);\n\n      // self invoking async function that waits for setSmooth calls to complete before triggering\n      // render and signaling selected changed event.\n      // This allows time for items to be in their final position before the row component check world context\n      // to identify items off screen to trigger scrolling\n      (async () => {\n        await currentItem.setSmooth('x', newPosX);\n        await currentItem.setSmooth('y', newPosY);\n        await nextItem.setSmooth('x', oldPosX);\n        await nextItem.setSmooth('y', oldPosY);\n        if (\n          !this.Items.children.length ||\n          !this.Items.children[index] ||\n          !this.Items.children[index].skipFocus\n        ) {\n          if (this.selected) {\n            this._selectedIndex = index;\n            this._render(this.selected, this.prevSelected);\n            this.signal('selectedChange', this.selected, this.prevSelected);\n          }\n          // Don't call refocus until after a new render in case of a situation like Plinko nav\n          // where we don't want to focus the previously selected item and need to get the new one first\n          this._refocus();\n        }\n      })();\n    }\n  };\n}\n"],"names":[],"sourceRoot":""}