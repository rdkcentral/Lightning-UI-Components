{"version":3,"file":"7117.9ac559a9.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAMA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AApBA;AACA;AAAA;AAAA;AAAA;AAxWA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAYA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACheA;AACA;AAAA;AAAA;AAAA;AAdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAbA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AACA;AAAA;AAAA;AAAA;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AA1BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoDA;AACA;AAAA;AAAA;AAAA;AAnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAlDA;AAuDA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAtDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ScrollWrapper/ScrollWrapper.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ScrollWrapper/ScrollSlider.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ScrollWrapper/ScrollSlider.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ScrollWrapper/ScrollWrapper.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ScrollWrapper/ScrollWrapper.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Surface/Surface.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Surface/Surface.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  textStyle: theme.typography.body2,\n  fadeHeight: 100,\n  scroll: {\n    timingFunction: 'linear',\n    duration: theme.animation.duration.xfast\n  },\n  contentMarginTop: theme.spacer.md,\n  contentMarginLeft: theme.spacer.xl,\n  sliderMarginLeft: theme.spacer.lg + theme.spacer.xxs\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { base as scrollWrapperBase } from './ScrollWrapper.styles.js';\n\nexport const base = theme => {\n  const { scroll } = scrollWrapperBase(theme);\n  return {\n    progressBar: { animation: scroll },\n    circleAnimation: scroll\n  };\n};\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Slider from '../Slider';\nimport * as styles from './ScrollSlider.styles.js';\n\nexport default class ScrollSlider extends Slider {\n  static get __componentName() {\n    return 'ScrollSlider';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport * as styles from './ScrollWrapper.styles.js';\nimport TextBox from '../TextBox';\nimport ScrollSlider from './ScrollSlider';\n\nexport default class ScrollWrapper extends Base {\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      clipping: true,\n      FadeContainer: {\n        ScrollContainer: {\n          w: w => w,\n          wordWrap: true\n        }\n      },\n      Slider: {\n        type: ScrollSlider,\n        vertical: true,\n        signals: {\n          onChange: '_updateScrollContainerSize'\n        },\n        announce: ' '\n      }\n    };\n  }\n\n  static get __componentName() {\n    return 'ScrollWrapper';\n  }\n\n  static get properties() {\n    return [\n      'autoScroll',\n      'autoScrollDelay',\n      'autoScrollSpeed',\n      'content',\n      'fadeContent',\n      'scrollDuration',\n      'scrollStep',\n      'showScrollBar',\n      'shouldWrap',\n      'flexDirection'\n    ];\n  }\n\n  static get tags() {\n    return [\n      'FadeContainer',\n      'Slider',\n      {\n        name: 'ScrollContainer',\n        path: 'FadeContainer.ScrollContainer'\n      },\n      {\n        name: 'ScrollableText',\n        path: 'ScrollContainer.ScrollableText'\n      }\n    ];\n  }\n\n  _construct() {\n    super._construct();\n    this._scrollStep = 10;\n    this._shouldWrap = false;\n    this._flexDirection = 'column';\n    this._fadeContent = true;\n    this._sliderWidth = 0;\n  }\n\n  _afterTextBoxUpdate(textBox) {\n    // NOTE: this does get called every time ScrollWrapper updates (ex. on each scroll change)\n    if (this._prevW !== textBox.finalW || this._prevH !== textBox.finalH) {\n      this._prevW = textBox.finalW;\n      this._prevH = textBox.finalH;\n      this._updateScrollWrapperLayout();\n      this._updateAlpha();\n    }\n  }\n\n  _resetFlexContainer() {\n    this._FadeContainer.patch({ ScrollContainer: undefined });\n    this._FadeContainer.patch({\n      ScrollContainer: { w: w => w, wordWrap: true }\n    });\n  }\n\n  _update() {\n    if (this._contentChanged) {\n      this._resetFlexContainer();\n      this._updateAutoScroll();\n    }\n    this._updateScrollContainer();\n    this._updateScrollWrapperLayout();\n    this._updateAlpha();\n  }\n\n  _updateAutoScroll() {\n    this.resetScroll();\n    this._setupAutoScroll();\n    this._contentChanged = false;\n  }\n\n  _updateScrollWrapperLayout() {\n    this._ScrollContainer.patch({\n      w: this._contentWidth\n    });\n    this._updateFadeContainer();\n    this._updateSlider();\n  }\n\n  _updateAlpha() {\n    this._Slider.smooth = {\n      alpha: this.showScrollBar && this._isFocusedMode ? 1 : 0\n    };\n  }\n\n  _updateFadeContainer() {\n    const isScrollable = this._ScrollContainer.finalH > this.h;\n    const shouldFade =\n      this.fadeContent && isScrollable && !this._isEndContentVisible;\n\n    this._FadeContainer.patch({\n      h: this.h,\n      w: this._contentWidth,\n      y: this.style.contentMarginTop,\n      x: this.style.contentMarginLeft,\n      rtt: true,\n      shader: shouldFade\n        ? {\n            type: lng.shaders.FadeOut,\n            bottom: this.style.fadeHeight\n          }\n        : undefined\n    });\n  }\n\n  _scrollContainerLoaded({ h }) {\n    this._ScrollContainer.h = h;\n    this._updateScrollWrapperLayout();\n  }\n\n  _updateScrollContainer() {\n    if (!this.content) return;\n\n    if (typeof this.content === 'string') {\n      this._ScrollContainer.patch({\n        flex: { direction: 'column' },\n        ScrollableText: {\n          h: 0,\n          w: this._contentWidth,\n          type: TextBox,\n          content: this.content,\n          style: {\n            textStyle: {\n              ...this.style.textStyle,\n              wordWrap: true,\n              wordWrapWidth: this._contentWidth\n            }\n          },\n          signals: {\n            textBoxChanged: '_scrollContainerLoaded'\n          },\n          onAfterUpdate: this._afterTextBoxUpdate.bind(this)\n        }\n      });\n    } else if (Array.isArray(this.content)) {\n      const content = {};\n      this.content.forEach((item, index) => {\n        const id = `ScrollText${index}`;\n        content[id] = {\n          w: this._contentWidth,\n          ...item\n        };\n        if (item.text) {\n          content[id] = {\n            type: TextBox,\n            content: item.text,\n            style: {\n              textStyle: {\n                ...this.style.textStyle,\n                ...item.style,\n                wordWrap: true,\n                wordWrapWidth: this._contentWidth\n              }\n            },\n            onAfterUpdate: this._afterTextBoxUpdate.bind(this)\n          };\n        }\n      });\n      this._ScrollContainer.patch({\n        flex: { direction: this.flexDirection, wrap: this.shouldWrap },\n        ...content\n      });\n    }\n  }\n\n  _scrollDown() {\n    const hasContentToScrollTo =\n      this._scrollContainerY + this._ScrollContainer.finalH > this.renderHeight;\n    if (hasContentToScrollTo) {\n      const targetY = this._scrollContainerY - this.scrollStep;\n      const canScrollByStepLength =\n        targetY + this._ScrollContainer.finalH > this.renderHeight;\n      const scrollEndY =\n        this.renderHeight -\n        this._ScrollContainer.finalH -\n        this.style.contentMarginTop;\n\n      this._ScrollContainer.patch({\n        smooth: {\n          y: [\n            canScrollByStepLength ? targetY : scrollEndY,\n            this._scrollAnimation\n          ]\n        }\n      });\n\n      const hasScrolledToEnd =\n        this._scrollContainerY + this._ScrollContainer.finalH <= this.h;\n\n      if (hasScrolledToEnd) {\n        this._isEndContentVisible = true;\n        this._autoScrollComplete = true;\n        this.fireAncestors('$scrollChanged', 'endDown', this);\n        this._updateFadeContainer();\n      }\n    }\n  }\n\n  _scrollUp() {\n    const canScrollUp = this._scrollContainerY < 0;\n\n    if (canScrollUp) {\n      const targetY = this._scrollContainerY + this.scrollStep;\n      const canScrollByStepLength = targetY < 0;\n\n      this._ScrollContainer.patch({\n        smooth: {\n          y: [canScrollByStepLength ? targetY : 0, this._scrollAnimation]\n        }\n      });\n\n      const isScrollable =\n        this._scrollContainerY + this._ScrollContainer.finalH >\n        this.renderHeight;\n      if (isScrollable) {\n        this._autoScrollComplete = false;\n      }\n\n      if (this._scrollContainerY >= 0) {\n        this.fireAncestors('$scrollChanged', 'endUp', this);\n      }\n\n      if (this._isEndContentVisible) {\n        this._isEndContentVisible = false;\n        this._updateFadeContainer();\n      }\n    }\n  }\n\n  resetScroll() {\n    this._ScrollContainer.y = 0;\n    this._Slider.value = 0;\n    this._ScrollContainer.transition('y').finish();\n    delete this._ScrollContainer._transitions;\n    this._autoScrollComplete = false;\n  }\n\n  _setAutoScroll(val) {\n    if (this._autoScroll !== val) {\n      this._autoScroll = val;\n    }\n    this._setupAutoScroll();\n    return val;\n  }\n\n  _setupAutoScroll() {\n    clearTimeout(this._startAutoScroll);\n    clearTimeout(this._performAutoScrollTimer);\n\n    if (this.autoScroll) {\n      this._startAutoScroll = setTimeout(\n        () => this._performAutoScroll(),\n        isNaN(this.autoScrollDelay) ? 2000 : this.autoScrollDelay\n      );\n    }\n  }\n\n  _performAutoScroll() {\n    if (this.autoScroll && !this._autoScrollComplete) {\n      this._Slider._handleDown();\n      this._performAutoScrollTimer = setTimeout(\n        () => this._performAutoScroll(),\n        isNaN(this.autoScrollSpeed) ? 200 : this.autoScrollSpeed\n      );\n    }\n  }\n\n  _setContent(content) {\n    if (content !== this._content && this.enabled) {\n      this._contentChanged = true;\n    }\n    return content;\n  }\n\n  _updateScrollContainerSize(sliderValue, slider) {\n    if (this._sliderWidth !== slider._Container.h) {\n      this._sliderWidth = slider._Container.h;\n      this._updateScrollContainer();\n    }\n  }\n\n  _updateSlider() {\n    // height of off screen items that can be scrolled to\n    const scrollHeight = this._ScrollContainer.finalH - this.renderHeight;\n    // number of steps to scroll to bottom of ScrollContainer\n    const contentScrollSteps = Math.ceil(scrollHeight / this.scrollStep);\n    // max value of slider\n    const sliderMax = this.renderHeight;\n    // distance slider should move on each key press\n    const sliderStep = sliderMax / contentScrollSteps;\n\n    // This is a vertical slider, so w is actually controlling the height\n    this._Slider.patch({\n      x: this.w - this._sliderWidth,\n      w: sliderMax,\n      min: 0,\n      max: sliderMax,\n      step: sliderStep,\n      onUp: this._scrollUp.bind(this),\n      onDown: this._scrollDown.bind(this)\n    });\n  }\n\n  get _contentWidth() {\n    return (\n      this.w -\n      this.style.contentMarginLeft -\n      this.style.sliderMarginLeft -\n      this._sliderWidth\n    );\n  }\n\n  get _scrollContainerY() {\n    return this._ScrollContainer.transition('y').targetValue;\n  }\n\n  get _scrollAnimation() {\n    const duration = isNaN(this.scrollDuration)\n      ? this.style.scroll.duration\n      : this.scrollDuration;\n    return {\n      ...this.style.scroll,\n      duration\n    };\n  }\n\n  _getFocused() {\n    return this._Slider;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    if (this._announce) {\n      return this._announce;\n    }\n\n    if (Array.isArray(this.content)) {\n      if (\n        this._ScrollContainer &&\n        this._ScrollContainer.children &&\n        this._ScrollContainer.children.length\n      ) {\n        return this._ScrollContainer.children.map(item => item.announce);\n      } else {\n        return this.content.map(item => item.announce || item.text);\n      }\n    }\n    return this.content;\n  }\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"﻿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as ScrollWrapperComponent } from '.';\\nimport Tile from '../Tile';\\nimport { createModeControl } from '../../docs/utils';\\nimport TextBox from '../TextBox/TextBox.js';\\n\\nconst terms = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna. Nunc sed velit dignissim sodales. Feugiat scelerisque varius morbi enim nunc faucibus a pellentesque sit. Facilisis gravida neque convallis a cras semper auctor. Pellentesque pulvinar pellentesque habitant morbi tristique. Non tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus. Amet risus nullam eget felis eget nunc. Auctor urna nunc id cursus metus aliquam eleifend mi in. Integer malesuada nunc vel risus commodo viverra maecenas accumsan lacus. Hac habitasse platea dictumst vestibulum rhoncus est pellentesque elit ullamcorper. Ac felis donec et odio pellentesque. Semper auctor neque vitae tempus quam pellentesque nec nam aliquam. Sit amet risus nullam eget felis eget.\\n\\nMi proin sed libero enim sed faucibus. Arcu vitae elementum curabitur vitae nunc sed velit. Volutpat blandit aliquam etiam erat velit. In nulla posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Tristique risus nec feugiat in. Urna nec tincidunt praesent semper feugiat nibh sed pulvinar proin. Dolor magna eget est lorem ipsum dolor sit amet consectetur. Eget est lorem ipsum dolor sit amet consectetur. At tellus at urna condimentum mattis pellentesque id. Maecenas accumsan lacus vel facilisis. Metus dictum at tempor commodo ullamcorper a lacus. Pellentesque pulvinar pellentesque habitant morbi tristique senectus. Tempor nec feugiat nisl pretium fusce id velit ut.`;\\n\\nexport default {\\n  title: 'Components/ScrollWrapper'\\n};\\n\\nconst sharedArgs = {\\n  autoScroll: false,\\n  autoScrollDelay: 2000,\\n  autoScrollSpeed: 200,\\n  fadeContent: true,\\n  scrollDuration: 0.2,\\n  scrollStep: 10,\\n  showScrollBar: true,\\n  mode: 'focused'\\n};\\n\\nconst sharedArgTypes = {\\n  ...createModeControl({\\n    options: ['unfocused', 'focused'],\\n    summaryValue: false\\n  }),\\n  autoScroll: {\\n    control: 'boolean',\\n    description: 'Whether or not to auto scroll the content',\\n    type: 'boolean',\\n    table: {\\n      defaultValue: { summary: false }\\n    }\\n  },\\n  autoScrollDelay: {\\n    control: 'number',\\n    description: 'Delay, in ms, before auto scroll starts',\\n    type: 'number',\\n    table: {\\n      defaultValue: { summary: 2000 }\\n    }\\n  },\\n  autoScrollSpeed: {\\n    control: 'number',\\n    description: 'Time delay, in ms, before each scroll step',\\n    type: 'number',\\n    table: {\\n      defaultValue: { summary: 2000 }\\n    }\\n  },\\n  fadeContent: {\\n    control: 'boolean',\\n    description: 'Fade out content at the bottom of the ScrollWrapper',\\n    type: 'boolean',\\n    table: {\\n      defaultValue: { summary: true }\\n    }\\n  },\\n  scrollDuration: {\\n    control: 'number',\\n    description: 'Animation duration for the scroll',\\n    type: 'number',\\n    table: {\\n      defaultValue: { summary: 0.2 }\\n    }\\n  },\\n  scrollStep: {\\n    control: 'number',\\n    description: 'How many pixels to scroll by on every up/down keypress',\\n    type: 'number',\\n    table: {\\n      defaultValue: { summary: 10 }\\n    }\\n  },\\n  showScrollBar: {\\n    control: 'boolean',\\n    description: 'Show the scroll bar when focused ',\\n    type: 'boolean',\\n    table: {\\n      defaultValue: { summary: true }\\n    }\\n  }\\n};\\n\\nexport const Basic = args =>\\n  class Basic extends lng.Component {\\n    static _template() {\\n      return {\\n        ScrollWrapper: {\\n          type: ScrollWrapperComponent,\\n          h: 448,\\n          w: 796,\\n          content: terms,\\n          signals: {\\n            scrollChanged: true\\n          }\\n        }\\n      };\\n    }\\n\\n    $scrollChanged(type) {\\n      args.scrollChanged(type);\\n    }\\n  };\\n\\nBasic.args = sharedArgs;\\nBasic.argTypes = sharedArgTypes;\\nBasic.parameters = {\\n  storyDetails: 'The ScrollWrapper content property is set as a string.'\\n};\\n\\nexport const TextArray = args =>\\n  class TextArray extends lng.Component {\\n    static _template() {\\n      return {\\n        ScrollWrapper: {\\n          type: ScrollWrapperComponent,\\n          h: 450,\\n          w: 600,\\n          wordWrap: true,\\n          content: [\\n            {\\n              text: 'Text Heading',\\n              style: {\\n                fontFace: 'XfinityBrownBold',\\n                alignContent: 'center'\\n              }\\n            },\\n            {\\n              text: terms,\\n              style: {\\n                alignContent: 'left',\\n                fontSize: '30'\\n              }\\n            }\\n          ],\\n          signals: {\\n            scrollChanged: true\\n          }\\n        }\\n      };\\n    }\\n\\n    $scrollChanged(type) {\\n      args.scrollChanged(type);\\n    }\\n  };\\n\\nTextArray.args = sharedArgs;\\nTextArray.argTypes = sharedArgTypes;\\nTextArray.parameters = {\\n  storyDetails:\\n    'The ScrollWrapper content property is set as an array of text objects. See the InlineContent documentation for more details on these types of objects.'\\n};\\n\\nexport const ObjectArray = args =>\\n  class ObjectArray extends lng.Component {\\n    static _template() {\\n      return {\\n        ScrollWrapper: {\\n          type: ScrollWrapperComponent,\\n          h: 764,\\n          w: 1200,\\n          shouldWrap: true, // determines if items should wrap around ScrollContainer\\n          flexDirection: 'row', //determines the direction items are placed in flexContainer\\n          content: Array.from(Array(6)).map(() => ({\\n            shader: {\\n              type: lng.shaders.RoundedRectangle,\\n              radius: 16\\n            },\\n            type: Tile,\\n            rect: true,\\n            w: 308,\\n            h: 400,\\n            color: 0xf53e3e45,\\n            flexItem: {\\n              margin: 24\\n            },\\n            Text: {\\n              type: TextBox,\\n              x: 20,\\n              y: 10,\\n              content:\\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna.',\\n              style: {\\n                textStyle: {\\n                  fontSize: 27,\\n                  lineHeight: null,\\n                  maxLines: 0,\\n                  textAlign: 'left',\\n                  verticalAlign: 'middle',\\n                  wordWrapWidth: 270\\n                }\\n              },\\n              shader: {\\n                type: lng.shaders.RoundedRectangle,\\n                radius: 0\\n              }\\n            }\\n          })),\\n          signals: {\\n            scrollChanged: true\\n          }\\n        }\\n      };\\n    }\\n\\n    $scrollChanged(type) {\\n      args.scrollChanged(type);\\n    }\\n  };\\n\\nObjectArray.args = sharedArgs;\\nObjectArray.argTypes = sharedArgTypes;\\nObjectArray.parameters = {\\n  storyDetails:\\n    'The ScrollWrapper content property is set as an array of Lightning elements.'\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Basic\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 116\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 133\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 116\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 133\n    }\n  },\n  \"TextArray\": {\n    \"startLoc\": {\n      \"col\": 25,\n      \"line\": 139\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 169\n    },\n    \"startBody\": {\n      \"col\": 25,\n      \"line\": 139\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 169\n    }\n  },\n  \"ObjectArray\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 175\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 229\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 175\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 229\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { default as ScrollWrapperComponent } from '.';\nimport Tile from '../Tile';\nimport { createModeControl } from '../../docs/utils';\nimport TextBox from '../TextBox/TextBox.js';\nconst terms = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna. Nunc sed velit dignissim sodales. Feugiat scelerisque varius morbi enim nunc faucibus a pellentesque sit. Facilisis gravida neque convallis a cras semper auctor. Pellentesque pulvinar pellentesque habitant morbi tristique. Non tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus. Amet risus nullam eget felis eget nunc. Auctor urna nunc id cursus metus aliquam eleifend mi in. Integer malesuada nunc vel risus commodo viverra maecenas accumsan lacus. Hac habitasse platea dictumst vestibulum rhoncus est pellentesque elit ullamcorper. Ac felis donec et odio pellentesque. Semper auctor neque vitae tempus quam pellentesque nec nam aliquam. Sit amet risus nullam eget felis eget.\n\nMi proin sed libero enim sed faucibus. Arcu vitae elementum curabitur vitae nunc sed velit. Volutpat blandit aliquam etiam erat velit. In nulla posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Tristique risus nec feugiat in. Urna nec tincidunt praesent semper feugiat nibh sed pulvinar proin. Dolor magna eget est lorem ipsum dolor sit amet consectetur. Eget est lorem ipsum dolor sit amet consectetur. At tellus at urna condimentum mattis pellentesque id. Maecenas accumsan lacus vel facilisis. Metus dictum at tempor commodo ullamcorper a lacus. Pellentesque pulvinar pellentesque habitant morbi tristique senectus. Tempor nec feugiat nisl pretium fusce id velit ut.`;\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as ScrollWrapperComponent } from '.';\\nimport Tile from '../Tile';\\nimport { createModeControl } from '../../docs/utils';\\nimport TextBox from '../TextBox/TextBox.js';\\nconst terms = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna. Nunc sed velit dignissim sodales. Feugiat scelerisque varius morbi enim nunc faucibus a pellentesque sit. Facilisis gravida neque convallis a cras semper auctor. Pellentesque pulvinar pellentesque habitant morbi tristique. Non tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus. Amet risus nullam eget felis eget nunc. Auctor urna nunc id cursus metus aliquam eleifend mi in. Integer malesuada nunc vel risus commodo viverra maecenas accumsan lacus. Hac habitasse platea dictumst vestibulum rhoncus est pellentesque elit ullamcorper. Ac felis donec et odio pellentesque. Semper auctor neque vitae tempus quam pellentesque nec nam aliquam. Sit amet risus nullam eget felis eget.\\n\\nMi proin sed libero enim sed faucibus. Arcu vitae elementum curabitur vitae nunc sed velit. Volutpat blandit aliquam etiam erat velit. In nulla posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Tristique risus nec feugiat in. Urna nec tincidunt praesent semper feugiat nibh sed pulvinar proin. Dolor magna eget est lorem ipsum dolor sit amet consectetur. Eget est lorem ipsum dolor sit amet consectetur. At tellus at urna condimentum mattis pellentesque id. Maecenas accumsan lacus vel facilisis. Metus dictum at tempor commodo ullamcorper a lacus. Pellentesque pulvinar pellentesque habitant morbi tristique senectus. Tempor nec feugiat nisl pretium fusce id velit ut.`;\\nexport default {\\n  title: 'Components/ScrollWrapper'\\n};\\nconst sharedArgs = {\\n  autoScroll: false,\\n  autoScrollDelay: 2000,\\n  autoScrollSpeed: 200,\\n  fadeContent: true,\\n  scrollDuration: 0.2,\\n  scrollStep: 10,\\n  showScrollBar: true,\\n  mode: 'focused'\\n};\\nconst sharedArgTypes = {\\n  ...createModeControl({\\n    options: ['unfocused', 'focused'],\\n    summaryValue: false\\n  }),\\n  autoScroll: {\\n    control: 'boolean',\\n    description: 'Whether or not to auto scroll the content',\\n    type: 'boolean',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  },\\n  autoScrollDelay: {\\n    control: 'number',\\n    description: 'Delay, in ms, before auto scroll starts',\\n    type: 'number',\\n    table: {\\n      defaultValue: {\\n        summary: 2000\\n      }\\n    }\\n  },\\n  autoScrollSpeed: {\\n    control: 'number',\\n    description: 'Time delay, in ms, before each scroll step',\\n    type: 'number',\\n    table: {\\n      defaultValue: {\\n        summary: 2000\\n      }\\n    }\\n  },\\n  fadeContent: {\\n    control: 'boolean',\\n    description: 'Fade out content at the bottom of the ScrollWrapper',\\n    type: 'boolean',\\n    table: {\\n      defaultValue: {\\n        summary: true\\n      }\\n    }\\n  },\\n  scrollDuration: {\\n    control: 'number',\\n    description: 'Animation duration for the scroll',\\n    type: 'number',\\n    table: {\\n      defaultValue: {\\n        summary: 0.2\\n      }\\n    }\\n  },\\n  scrollStep: {\\n    control: 'number',\\n    description: 'How many pixels to scroll by on every up/down keypress',\\n    type: 'number',\\n    table: {\\n      defaultValue: {\\n        summary: 10\\n      }\\n    }\\n  },\\n  showScrollBar: {\\n    control: 'boolean',\\n    description: 'Show the scroll bar when focused ',\\n    type: 'boolean',\\n    table: {\\n      defaultValue: {\\n        summary: true\\n      }\\n    }\\n  }\\n};\\nexport const Basic = args => class Basic extends lng.Component {\\n  static _template() {\\n    return {\\n      ScrollWrapper: {\\n        type: ScrollWrapperComponent,\\n        h: 448,\\n        w: 796,\\n        content: terms,\\n        signals: {\\n          scrollChanged: true\\n        }\\n      }\\n    };\\n  }\\n  $scrollChanged(type) {\\n    args.scrollChanged(type);\\n  }\\n};\\nBasic.args = sharedArgs;\\nBasic.argTypes = sharedArgTypes;\\nBasic.parameters = {\\n  storyDetails: 'The ScrollWrapper content property is set as a string.'\\n};\\nexport const TextArray = args => class TextArray extends lng.Component {\\n  static _template() {\\n    return {\\n      ScrollWrapper: {\\n        type: ScrollWrapperComponent,\\n        h: 450,\\n        w: 600,\\n        wordWrap: true,\\n        content: [{\\n          text: 'Text Heading',\\n          style: {\\n            fontFace: 'XfinityBrownBold',\\n            alignContent: 'center'\\n          }\\n        }, {\\n          text: terms,\\n          style: {\\n            alignContent: 'left',\\n            fontSize: '30'\\n          }\\n        }],\\n        signals: {\\n          scrollChanged: true\\n        }\\n      }\\n    };\\n  }\\n  $scrollChanged(type) {\\n    args.scrollChanged(type);\\n  }\\n};\\nTextArray.args = sharedArgs;\\nTextArray.argTypes = sharedArgTypes;\\nTextArray.parameters = {\\n  storyDetails: 'The ScrollWrapper content property is set as an array of text objects. See the InlineContent documentation for more details on these types of objects.'\\n};\\nexport const ObjectArray = args => class ObjectArray extends lng.Component {\\n  static _template() {\\n    return {\\n      ScrollWrapper: {\\n        type: ScrollWrapperComponent,\\n        h: 764,\\n        w: 1200,\\n        shouldWrap: true,\\n        // determines if items should wrap around ScrollContainer\\n        flexDirection: 'row',\\n        //determines the direction items are placed in flexContainer\\n        content: Array.from(Array(6)).map(() => ({\\n          shader: {\\n            type: lng.shaders.RoundedRectangle,\\n            radius: 16\\n          },\\n          type: Tile,\\n          rect: true,\\n          w: 308,\\n          h: 400,\\n          color: 0xf53e3e45,\\n          flexItem: {\\n            margin: 24\\n          },\\n          Text: {\\n            type: TextBox,\\n            x: 20,\\n            y: 10,\\n            content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna.',\\n            style: {\\n              textStyle: {\\n                fontSize: 27,\\n                lineHeight: null,\\n                maxLines: 0,\\n                textAlign: 'left',\\n                verticalAlign: 'middle',\\n                wordWrapWidth: 270\\n              }\\n            },\\n            shader: {\\n              type: lng.shaders.RoundedRectangle,\\n              radius: 0\\n            }\\n          }\\n        })),\\n        signals: {\\n          scrollChanged: true\\n        }\\n      }\\n    };\\n  }\\n  $scrollChanged(type) {\\n    args.scrollChanged(type);\\n  }\\n};\\nObjectArray.args = sharedArgs;\\nObjectArray.argTypes = sharedArgTypes;\\nObjectArray.parameters = {\\n  storyDetails: 'The ScrollWrapper content property is set as an array of Lightning elements.'\\n};\\nBasic.parameters = {\\n  ...Basic.parameters,\\n  docs: {\\n    ...Basic.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class Basic extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      ScrollWrapper: {\\\\n        type: ScrollWrapperComponent,\\\\n        h: 448,\\\\n        w: 796,\\\\n        content: terms,\\\\n        signals: {\\\\n          scrollChanged: true\\\\n        }\\\\n      }\\\\n    };\\\\n  }\\\\n  $scrollChanged(type) {\\\\n    args.scrollChanged(type);\\\\n  }\\\\n}\\\",\\n      ...Basic.parameters?.docs?.source\\n    }\\n  }\\n};\\nTextArray.parameters = {\\n  ...TextArray.parameters,\\n  docs: {\\n    ...TextArray.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class TextArray extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      ScrollWrapper: {\\\\n        type: ScrollWrapperComponent,\\\\n        h: 450,\\\\n        w: 600,\\\\n        wordWrap: true,\\\\n        content: [{\\\\n          text: 'Text Heading',\\\\n          style: {\\\\n            fontFace: 'XfinityBrownBold',\\\\n            alignContent: 'center'\\\\n          }\\\\n        }, {\\\\n          text: terms,\\\\n          style: {\\\\n            alignContent: 'left',\\\\n            fontSize: '30'\\\\n          }\\\\n        }],\\\\n        signals: {\\\\n          scrollChanged: true\\\\n        }\\\\n      }\\\\n    };\\\\n  }\\\\n  $scrollChanged(type) {\\\\n    args.scrollChanged(type);\\\\n  }\\\\n}\\\",\\n      ...TextArray.parameters?.docs?.source\\n    }\\n  }\\n};\\nObjectArray.parameters = {\\n  ...ObjectArray.parameters,\\n  docs: {\\n    ...ObjectArray.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class ObjectArray extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      ScrollWrapper: {\\\\n        type: ScrollWrapperComponent,\\\\n        h: 764,\\\\n        w: 1200,\\\\n        shouldWrap: true,\\\\n        // determines if items should wrap around ScrollContainer\\\\n        flexDirection: 'row',\\\\n        //determines the direction items are placed in flexContainer\\\\n        content: Array.from(Array(6)).map(() => ({\\\\n          shader: {\\\\n            type: lng.shaders.RoundedRectangle,\\\\n            radius: 16\\\\n          },\\\\n          type: Tile,\\\\n          rect: true,\\\\n          w: 308,\\\\n          h: 400,\\\\n          color: 0xf53e3e45,\\\\n          flexItem: {\\\\n            margin: 24\\\\n          },\\\\n          Text: {\\\\n            type: TextBox,\\\\n            x: 20,\\\\n            y: 10,\\\\n            content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna.',\\\\n            style: {\\\\n              textStyle: {\\\\n                fontSize: 27,\\\\n                lineHeight: null,\\\\n                maxLines: 0,\\\\n                textAlign: 'left',\\\\n                verticalAlign: 'middle',\\\\n                wordWrapWidth: 270\\\\n              }\\\\n            },\\\\n            shader: {\\\\n              type: lng.shaders.RoundedRectangle,\\\\n              radius: 0\\\\n            }\\\\n          }\\\\n        })),\\\\n        signals: {\\\\n          scrollChanged: true\\\\n        }\\\\n      }\\\\n    };\\\\n  }\\\\n  $scrollChanged(type) {\\\\n    args.scrollChanged(type);\\\\n  }\\\\n}\\\",\\n      ...ObjectArray.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"basic\": {\n        \"startLoc\": {\n          \"col\": 21,\n          \"line\": 116\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 133\n        },\n        \"startBody\": {\n          \"col\": 21,\n          \"line\": 116\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 133\n        }\n      },\n      \"text-array\": {\n        \"startLoc\": {\n          \"col\": 25,\n          \"line\": 139\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 169\n        },\n        \"startBody\": {\n          \"col\": 25,\n          \"line\": 139\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 169\n        }\n      },\n      \"object-array\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 175\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 229\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 175\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 229\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/ScrollWrapper'\n};\nconst sharedArgs = {\n  autoScroll: false,\n  autoScrollDelay: 2000,\n  autoScrollSpeed: 200,\n  fadeContent: true,\n  scrollDuration: 0.2,\n  scrollStep: 10,\n  showScrollBar: true,\n  mode: 'focused'\n};\nconst sharedArgTypes = {\n  ...createModeControl({\n    options: ['unfocused', 'focused'],\n    summaryValue: false\n  }),\n  autoScroll: {\n    control: 'boolean',\n    description: 'Whether or not to auto scroll the content',\n    type: 'boolean',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  },\n  autoScrollDelay: {\n    control: 'number',\n    description: 'Delay, in ms, before auto scroll starts',\n    type: 'number',\n    table: {\n      defaultValue: {\n        summary: 2000\n      }\n    }\n  },\n  autoScrollSpeed: {\n    control: 'number',\n    description: 'Time delay, in ms, before each scroll step',\n    type: 'number',\n    table: {\n      defaultValue: {\n        summary: 2000\n      }\n    }\n  },\n  fadeContent: {\n    control: 'boolean',\n    description: 'Fade out content at the bottom of the ScrollWrapper',\n    type: 'boolean',\n    table: {\n      defaultValue: {\n        summary: true\n      }\n    }\n  },\n  scrollDuration: {\n    control: 'number',\n    description: 'Animation duration for the scroll',\n    type: 'number',\n    table: {\n      defaultValue: {\n        summary: 0.2\n      }\n    }\n  },\n  scrollStep: {\n    control: 'number',\n    description: 'How many pixels to scroll by on every up/down keypress',\n    type: 'number',\n    table: {\n      defaultValue: {\n        summary: 10\n      }\n    }\n  },\n  showScrollBar: {\n    control: 'boolean',\n    description: 'Show the scroll bar when focused ',\n    type: 'boolean',\n    table: {\n      defaultValue: {\n        summary: true\n      }\n    }\n  }\n};\nexport const Basic = args => class Basic extends lng.Component {\n  static _template() {\n    return {\n      ScrollWrapper: {\n        type: ScrollWrapperComponent,\n        h: 448,\n        w: 796,\n        content: terms,\n        signals: {\n          scrollChanged: true\n        }\n      }\n    };\n  }\n  $scrollChanged(type) {\n    args.scrollChanged(type);\n  }\n};;\nBasic.args = sharedArgs;\nBasic.argTypes = sharedArgTypes;\nBasic.parameters = {\n  storyDetails: 'The ScrollWrapper content property is set as a string.'\n};\nexport const TextArray = args => class TextArray extends lng.Component {\n  static _template() {\n    return {\n      ScrollWrapper: {\n        type: ScrollWrapperComponent,\n        h: 450,\n        w: 600,\n        wordWrap: true,\n        content: [{\n          text: 'Text Heading',\n          style: {\n            fontFace: 'XfinityBrownBold',\n            alignContent: 'center'\n          }\n        }, {\n          text: terms,\n          style: {\n            alignContent: 'left',\n            fontSize: '30'\n          }\n        }],\n        signals: {\n          scrollChanged: true\n        }\n      }\n    };\n  }\n  $scrollChanged(type) {\n    args.scrollChanged(type);\n  }\n};;\nTextArray.args = sharedArgs;\nTextArray.argTypes = sharedArgTypes;\nTextArray.parameters = {\n  storyDetails: 'The ScrollWrapper content property is set as an array of text objects. See the InlineContent documentation for more details on these types of objects.'\n};\nexport const ObjectArray = args => class ObjectArray extends lng.Component {\n  static _template() {\n    return {\n      ScrollWrapper: {\n        type: ScrollWrapperComponent,\n        h: 764,\n        w: 1200,\n        shouldWrap: true,\n        // determines if items should wrap around ScrollContainer\n        flexDirection: 'row',\n        //determines the direction items are placed in flexContainer\n        content: Array.from(Array(6)).map(() => ({\n          shader: {\n            type: lng.shaders.RoundedRectangle,\n            radius: 16\n          },\n          type: Tile,\n          rect: true,\n          w: 308,\n          h: 400,\n          color: 0xf53e3e45,\n          flexItem: {\n            margin: 24\n          },\n          Text: {\n            type: TextBox,\n            x: 20,\n            y: 10,\n            content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna.',\n            style: {\n              textStyle: {\n                fontSize: 27,\n                lineHeight: null,\n                maxLines: 0,\n                textAlign: 'left',\n                verticalAlign: 'middle',\n                wordWrapWidth: 270\n              }\n            },\n            shader: {\n              type: lng.shaders.RoundedRectangle,\n              radius: 0\n            }\n          }\n        })),\n        signals: {\n          scrollChanged: true\n        }\n      }\n    };\n  }\n  $scrollChanged(type) {\n    args.scrollChanged(type);\n  }\n};\nObjectArray.args = sharedArgs;\nObjectArray.argTypes = sharedArgTypes;\nObjectArray.parameters = {\n  storyDetails: 'The ScrollWrapper content property is set as an array of Lightning elements.'\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"args => class Basic extends lng.Component {\\n  static _template() {\\n    return {\\n      ScrollWrapper: {\\n        type: ScrollWrapperComponent,\\n        h: 448,\\n        w: 796,\\n        content: terms,\\n        signals: {\\n          scrollChanged: true\\n        }\\n      }\\n    };\\n  }\\n  $scrollChanged(type) {\\n    args.scrollChanged(type);\\n  }\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nTextArray.parameters = {\n  ...TextArray.parameters,\n  docs: {\n    ...TextArray.parameters?.docs,\n    source: {\n      originalSource: \"args => class TextArray extends lng.Component {\\n  static _template() {\\n    return {\\n      ScrollWrapper: {\\n        type: ScrollWrapperComponent,\\n        h: 450,\\n        w: 600,\\n        wordWrap: true,\\n        content: [{\\n          text: 'Text Heading',\\n          style: {\\n            fontFace: 'XfinityBrownBold',\\n            alignContent: 'center'\\n          }\\n        }, {\\n          text: terms,\\n          style: {\\n            alignContent: 'left',\\n            fontSize: '30'\\n          }\\n        }],\\n        signals: {\\n          scrollChanged: true\\n        }\\n      }\\n    };\\n  }\\n  $scrollChanged(type) {\\n    args.scrollChanged(type);\\n  }\\n}\",\n      ...TextArray.parameters?.docs?.source\n    }\n  }\n};\nObjectArray.parameters = {\n  ...ObjectArray.parameters,\n  docs: {\n    ...ObjectArray.parameters?.docs,\n    source: {\n      originalSource: \"args => class ObjectArray extends lng.Component {\\n  static _template() {\\n    return {\\n      ScrollWrapper: {\\n        type: ScrollWrapperComponent,\\n        h: 764,\\n        w: 1200,\\n        shouldWrap: true,\\n        // determines if items should wrap around ScrollContainer\\n        flexDirection: 'row',\\n        //determines the direction items are placed in flexContainer\\n        content: Array.from(Array(6)).map(() => ({\\n          shader: {\\n            type: lng.shaders.RoundedRectangle,\\n            radius: 16\\n          },\\n          type: Tile,\\n          rect: true,\\n          w: 308,\\n          h: 400,\\n          color: 0xf53e3e45,\\n          flexItem: {\\n            margin: 24\\n          },\\n          Text: {\\n            type: TextBox,\\n            x: 20,\\n            y: 10,\\n            content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id aliquet risus feugiat in ante metus dictum. Pretium fusce id velit ut tortor pretium viverra suspendisse. Pharetra convallis posuere morbi leo urna.',\\n            style: {\\n              textStyle: {\\n                fontSize: 27,\\n                lineHeight: null,\\n                maxLines: 0,\\n                textAlign: 'left',\\n                verticalAlign: 'middle',\\n                wordWrapWidth: 270\\n              }\\n            },\\n            shader: {\\n              type: lng.shaders.RoundedRectangle,\\n              radius: 0\\n            }\\n          }\\n        })),\\n        signals: {\\n          scrollChanged: true\\n        }\\n      }\\n    };\\n  }\\n  $scrollChanged(type) {\\n    args.scrollChanged(type);\\n  }\\n}\",\n      ...ObjectArray.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  backgroundColor: theme.color.interactiveNeutral,\n  radius: theme.radius.md,\n  animation: {}\n});\n\nexport const tone = theme => ({\n  inverse: {\n    backgroundColor: theme.color.interactiveInverse\n  }\n});\n\nexport const mode = theme => ({\n  focused: {\n    backgroundColor: theme.color.interactiveNeutralFocus,\n    tone: {\n      inverse: {\n        backgroundColor: theme.color.interactiveInverseFocus\n      }\n    }\n  },\n  disabled: {\n    backgroundColor: theme.color.fillNeutralDisabled\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Base from '../Base';\nimport * as styles from './Surface.styles.js';\nimport lng from '@lightningjs/core';\n\nexport default class Surface extends Base {\n  static _template() {\n    return {\n      Background: {}\n    };\n  }\n\n  static get __componentName() {\n    return 'Surface';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static get properties() {\n    return [];\n  }\n\n  static get tags() {\n    return ['Background'];\n  }\n\n  get innerH() {\n    return this.h;\n  }\n\n  get innerW() {\n    return this.w;\n  }\n\n  _update() {\n    this._updateLayout();\n    this._updateScale();\n  }\n\n  _updateLayout() {\n    this._Background.patch({\n      texture: lng.Tools.getRoundRect(\n        this.innerW - 2, // Reference the underscored values here in cause the h or w getters need to be overwritten for alignment - see Tile\n        this.innerH - 2,\n        this.style.radius,\n        0,\n        null,\n        true,\n        this.style.backgroundColor\n      )\n    });\n  }\n\n  _updateScale() {\n    const scale = this._isFocusedMode\n      ? this.getFocusScale(this.w, this.h)\n      : this.getUnfocusScale(this.w, this.h);\n\n    this.applySmooth(this, { scale }, { scale: [scale, this.style.animation] });\n  }\n}\n"],"names":[],"sourceRoot":""}