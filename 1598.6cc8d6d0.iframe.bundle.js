(self["webpackChunklightning_ui_docs"] = self["webpackChunklightning_ui_docs"] || []).push([[1598],{

/***/ "../../../node_modules/@lightningjs/core/devtools/lightning-inspect.js":
/***/ (() => {

/*
 * If not stated otherwise in this file or this component's LICENSE file the
 * following copyright and licenses apply:
 *
 * Copyright 2020 Metrological
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

window.attachInspector = function({Application, Element, ElementCore, Stage, Component, ElementTexturizer, Texture}) {

    const isAlreadyAttached = window.hasOwnProperty('mutationCounter');
    if (isAlreadyAttached) {
        return;
    }

    window.mutationCounter = 0;
    window.mutatingChildren = false;
    var observer = new MutationObserver(function(mutations) {
        var fa = ["x", "y", "w", "h", "alpha", "mountX", "mountY", "pivotX", "pivotY", "scaleX", "scaleY", "rotation", "visible", "clipping", "rect", "colorUl", "colorUr", "colorBl", "colorBr", "color", "borderWidthLeft", "borderWidthRight", "borderWidthTop", "borderWidthBottom", "borderWidth", "borderColorLeft", "borderColorRight", "borderColorTop", "borderColorBottom", "borderColor", "zIndex", "forceZIndexContext", "renderToTexture", "renderToTextureLazy", "renderOffscreen", "colorizeResultTexture", "texture"];
        var fac = fa.map(function(v) {return v.toLowerCase()});

        mutations.forEach(function(mutation) {
            if (mutation.type == 'childList') {

                var node = mutation.target;
                var c = mutation.target.element;
            }

            if (mutation.type == 'attributes' && mutation.attributeName !== 'style' && mutation.attributeName !== 'class') {
                var n = mutation.attributeName.toLowerCase();
                var c = mutation.target.element;

                if (c.__ignore_attrib_changes === window.mutationCounter) {
                    // Ignore attribute changes that were caused by actual value modifications by js.
                    return;
                }

                var v = mutation.target.getAttribute(mutation.attributeName);

                if (n.startsWith("texture-")) {
                    if (c.displayedTexture) {
                        const att = n.substr(8).split("_")
                        const camelCaseAtt = att[0] + att.slice(1).map(a => {
                            return a.substr(0,1).toUpperCase() + a.substr(1).toLowerCase()
                        }).join()

                        c.displayedTexture[camelCaseAtt] = v
                    }
                    return
                }

                var index = fac.indexOf(n);
                if (index !== -1) {
                    var rn = fa[index];
                    var pv;
                    try {
                        if (v === null) {
                            switch(rn) {
                                case "pivotX":
                                case "pivotY":
                                    pv = 0.5;
                                    break;
                                case "alpha":
                                case "scaleX":
                                case "scaleY":
                                    pv = 1;
                                    break;
                                case "visible":
                                    pv = true;
                                    break;
                                case "clipping":
                                    pv = false;
                                    break;
                                case "rect":
                                    pv = false;
                                    break;
                                case "zIndex":
                                    pv = 0;
                                    break;
                                case "forceZIndexContext":
                                    pv = false;
                                    break;
                                case "color":
                                    pv = 0xffffffff;
                                    break;
                                case "colorUl":
                                case "colorUr":
                                case "colorBl":
                                case "colorBr":
                                    if (mutation.target.hasAttribute("color")) {
                                        // This may happen when the separate values are combined.
                                        return;
                                    }
                                    pv = 0xffffffff;
                                    break;
                                case "renderToTexture":
                                    pv = false
                                    break;
                                case "renderToTextureLazy":
                                    pv = false
                                    break;
                                case "renderOffscreen":
                                    pv = false
                                    break;
                                case "colorizeResultTexture":
                                    pv = false
                                    break;
                                default:
                                    pv = 0;
                            }
                        } else {
                            switch(rn) {
                                case "color":
                                case "colorUl":
                                case "colorUr":
                                case "colorBl":
                                case "colorBr":
                                    pv = parseInt(v, 16);
                                    break;
                                case "visible":
                                case "clipping":
                                case "rect":
                                case "forceZIndexContext":
                                case "renderToTexture":
                                case "renderToTextureLazy":
                                case "renderOffscreen":
                                case "colorizeResultTexture":
                                    pv = (v === "true");
                                    break;
                                case "texture":
                                    pv = JSON.parse(v)
                                    break
                                default:
                                    pv = parseFloat(v);
                                    if (isNaN(pv)) throw "e";
                            }
                        }

                        var fv;
                        switch(rn) {
                            case "color":
                                var f = ['colorUl','colorUr','colorBl','colorBr'].map(function(q) {
                                    return mutation.target.hasAttribute(q);
                                });

                                if (!f[0]) c["colorUl"] = pv;
                                if (!f[1]) c["colorUr"] = pv;
                                if (!f[2]) c["colorBl"] = pv;
                                if (!f[3]) c["colorBr"] = pv;
                                break;
                            default:
                                c[rn] = pv;
                        }

                        // Set final value, not the transitioned value.
                    } catch(e) {
                        console.error('Bad (ignored) attribute value', rn);
                    }
                }
            }
        });

        window.mutationCounter++;
    });

    ElementCore.prototype.dhtml = function() {
        return this._element.dhtml();
    }

    Element.prototype.dhtml = function() {
        if (!this.debugElement) {
            this.debugElement = document.createElement('DIV');
            this.debugElement.setAttribute('type', this.constructor.name);
            this.debugElement.element = this;
            this.debugElement.style.position = 'absolute';

            this.debugElement.id = "" + this.id;
            observer.observe(this.debugElement, {attributes: true});
        }
        if (this.stage.root === this && !this.dhtml_root) {
            // Root element.
            var root = document.createElement('DIV');
            document.body.appendChild(root);
            var self = this;
            let updateRootStyleFromCanvas = function (bcr) {
                const p = self.stage.getRenderPrecision() / self.stage.getOption('devicePixelRatio');
                root.style.left = bcr.left + 'px';
                root.style.top = bcr.top + 'px';
                root.style.width = Math.ceil(bcr.width / p) + 'px';
                root.style.height = Math.ceil(bcr.height / p) + 'px';
                root.style.transformOrigin = '0 0 0';
                root.style.transform = 'scale(' + p + ',' + p + ')';
            }

            if (window.ResizeObserver != null) {
                const resize_ob = new ResizeObserver(function (entries) {
                    updateRootStyleFromCanvas(entries[0].target.getBoundingClientRect());
                });
                // start observing for resize
                resize_ob.observe(this.stage.getCanvas());
            } else {
                setTimeout(function () {
                    updateRootStyleFromCanvas(self.stage.getCanvas().getBoundingClientRect());
                }, 1000);
            }

            root.style.position = 'absolute';
            root.style.overflow = 'hidden';
            root.style.zIndex = '65535';
            root.appendChild(this.debugElement);

            this.dhtml_root = root;
        }
        return this.debugElement;
    };

    var oElement = Element;

    var oSetParent = oElement.prototype._setParent;
    Element.prototype._setParent = function(parent) {
        var prevParent = this.parent;
        oSetParent.apply(this, arguments);

        if (!window.mutatingChildren) {
            if (parent && parent.dhtml) {
                var index = parent._children.getIndex(this);
                if (index == parent._children.get().length - 1) {
                    parent.dhtml().appendChild(this.dhtml());
                } else {
                    parent.dhtml().insertBefore(this.dhtml(), parent.dhtml().children[index]);
                }
            } else {
                if (prevParent && prevParent.dhtml) {
                    prevParent.dhtml().removeChild(this.dhtml());
                }
            }
        }
    };

    var oInit = Stage.prototype.init;
    Stage.prototype.init = function() {
        oInit.apply(this, arguments);

        // Apply stage scaling.
        this.root.core.updateDebugTransforms();
    };

    var oAddTag = oElement.prototype.addTag;
    Element.prototype.addTag = function(tag) {
        oAddTag.apply(this, arguments);

        if (tag) {
            this.dhtml().classList.add(tag);
        }
    };

    var oRemoveTag = oElement.prototype.removeTag;
    Element.prototype.removeTag = function(tag) {
        oRemoveTag.apply(this, arguments);

        if (tag) {
            this.dhtml().classList.remove(tag);
        }
    };

// Change an attribute due to new value inputs.
    var val = function(c, n, v, dv) {
        if (c._element) {
            c = c._element;
        }
        if (v == dv) {
            if (c.dhtmlRemoveAttribute) {
                c.dhtmlRemoveAttribute(n);
            }
        } else {
            if (c.dhtmlSetAttribute) {
                c.dhtmlSetAttribute(n, v);
            }
        }
    };

    var valStrict = function(c, n, v, dv) {
        if (c._element) {
            c = c._element;
        }
        if (v === dv) {
            if (c.dhtmlRemoveAttribute) {
                c.dhtmlRemoveAttribute(n);
            }
        } else {
            if (c.dhtmlSetAttribute) {
                c.dhtmlSetAttribute(n, v);
            }
        }
    };

    Element.prototype.dhtmlRemoveAttribute = function() {
        // We don't want the attribute listeners to be called during the next observer cycle.
        this.__ignore_attrib_changes = window.mutationCounter;
        this.dhtml().removeAttribute.apply(this.dhtml(), arguments);
    };

    Element.prototype.dhtmlSetAttribute = function() {
        this.__ignore_attrib_changes = window.mutationCounter;
        this.dhtml().setAttribute.apply(this.dhtml(), arguments);
    };

    if (typeof Component !== "undefined") {
        Object.defineProperty(Component.prototype, '_state', {
            get: function() {
                return this.__state;
            },
            set: function(v) {
                if (this.__state !== v) {
                    if (this.__state !== null) { // Ignore initial.
                        val(this, 'state', v ? v.__path : "", "");
                    }
                    this.__state = v;
                }
            }
        });
    }

    Element.prototype.$ref = Element.prototype.__ref;
    Object.defineProperty(Element.prototype, '__ref', {
        get: function() {
            return this.$ref;
        },
        set: function(v) {
            if (this.$ref !== v) {
                val(this, 'ref', v, null);
                this.$ref = v;
            }
        }
    });

    ElementCore.prototype.$x = ElementCore.prototype._x;
    Object.defineProperty(ElementCore.prototype, '_x', {
        get: function() {
            return this.$x;
        },
        set: function(v) {
            if (this.$x !== v) {
                val(this, 'x', v, 0);
                this.$x = v;
                this.updateLeft();
            }
        }
    });

    ElementCore.prototype.$y = ElementCore.prototype._y;
    Object.defineProperty(ElementCore.prototype, '_y', {
        get: function() {
            return this.$y;
        },
        set: function(v) {
            if (this.$y !== v) {
                val(this, 'y', v, 0);
                this.$y = v;
                this.updateTop();
            }
        }
    });

    Element.prototype.$w = Element.prototype._w;
    Object.defineProperty(Element.prototype, '_w', {
        get: function() {
            return this.$w;
        },
        set: function(v) {
            if (this.$w !== v) {
                val(this, 'w', v, 0);
                this.$w = v;
            }
        }
    });

    Element.prototype.$h = Element.prototype._h;
    Object.defineProperty(Element.prototype, '_h', {
        get: function() {
            return this.$h;
        },
        set: function(v) {
            if (this.$h !== v) {
                val(this, 'h', v, 0);
                this.$h = v;
            }
        }
    });

    ElementCore.prototype.updateLeft = function() {
        var mx = this._mountX * this._w;
        var x = this._x - mx;
        this.dhtml().style.left = x + 'px';
    };

    ElementCore.prototype.updateTop = function() {
        var my = this._mountY * this._h;
        var y = this._y - my;
        this.dhtml().style.top = y + 'px';
    };

    ElementCore.prototype.__w = 0;
    Object.defineProperty(ElementCore.prototype, '_w', {
        get: function() {
            return this.__w;
        },
        set: function(v) {
            this.__w = v;
            this.dhtml().style.width = v + 'px';
            this.updateLeft();
        }
    });

    ElementCore.prototype.__h = 0;
    Object.defineProperty(ElementCore.prototype, '_h', {
        get: function() {
            return this.__h;
        },
        set: function(v) {
            this.__h = v;
            this.dhtml().style.height = v + 'px';
            this.updateTop();
        }
    });

    ElementCore.prototype.$alpha = 1;
    Object.defineProperty(ElementCore.prototype, '_alpha', {
        get: function() {
            return this.$alpha;
        },
        set: function(v) {
            if (this.$alpha !== v) {
                val(this, 'alpha', v, 1);
                this.$alpha = v;
                this.dhtml().style.opacity = v;
                this.dhtml().style.display = this.$visible && this.$alpha ? 'block' : 'none';
            }
        }
    });

    ElementCore.prototype.$visible = true;
    Object.defineProperty(ElementCore.prototype, '_visible', {
        get: function() {
            return this.$visible;
        },
        set: function(v) {
            if (this.$visible !== v) {
                val(this, 'visible', v, true);
                this.$visible = v;
                this.dhtml().style.visibility = v ? 'visible' : 'hidden';
                this.dhtml().style.display = this.$visible && this.$alpha ? 'block' : 'none';
            }
        }
    });

    ElementCore.prototype.$rotation = 0;
    Object.defineProperty(ElementCore.prototype, '_rotation', {
        get: function() {
            return this.$rotation;
        },
        set: function(v) {
            if (this.$rotation !== v) {
                val(this, 'rotation', v, 0);
                this.$rotation = v;
                this.updateDebugTransforms();
            }
        }
    });


    ElementCore.prototype.$scaleX = 1;
    Object.defineProperty(ElementCore.prototype, '_scaleX', {
        get: function() {
            return this.$scaleX;
        },
        set: function(v) {
            if (this.$scaleX !== v) {
                val(this, 'scaleX', v, 1);
                this.$scaleX = v;
                this.updateDebugTransforms();
            }
        }
    });

    ElementCore.prototype.$scaleY = 1;
    Object.defineProperty(ElementCore.prototype, '_scaleY', {
        get: function() {
            return this.$scaleY;
        },
        set: function(v) {
            if (this.$scaleY !== v) {
                val(this, 'scaleY', v, 1);
                this.$scaleY = v;
                this.updateDebugTransforms();
            }
        }
    });

    ElementCore.prototype.$pivotX = 0.5;
    Object.defineProperty(ElementCore.prototype, '_pivotX', {
        get: function() {
            return this.$pivotX;
        },
        set: function(v) {
            if (this.$pivotX !== v) {
                val(this, 'pivotX', v, 0.5);
                this.$pivotX = v;
                this.updateDebugTransforms();
            }
        }
    });

    ElementCore.prototype.$pivotY = 0.5;
    Object.defineProperty(ElementCore.prototype, '_pivotY', {
        get: function() {
            return this.$pivotY;
        },
        set: function(v) {
            if (this.$pivotY !== v) {
                val(this, 'pivotY', v, 0.5);
                this.$pivotY = v;
                this.updateDebugTransforms();
            }
        }
    });

    ElementCore.prototype.$mountX = 0;
    Object.defineProperty(ElementCore.prototype, '_mountX', {
        get: function() {
            return this.$mountX;
        },
        set: function(v) {
            if (this.$mountX !== v) {
                val(this, 'mountX', v, 0);
                this.$mountX = v;
                this.updateLeft();
            }
        }
    });

    ElementCore.prototype.$mountY = 0;
    Object.defineProperty(ElementCore.prototype, '_mountY', {
        get: function() {
            return this.$mountY;
        },
        set: function(v) {
            if (this.$mountY !== v) {
                val(this, 'mountY', v, 0);
                this.$mountY = v;
                this.updateTop();
            }
        }
    });

    ElementCore.prototype.__zIndex = 0;
    Object.defineProperty(ElementCore.prototype, '_zIndex', {
        get: function() {
            return this.__zIndex;
        },
        set: function(v) {
            if (this.__zIndex !== v) {
                val(this, 'zIndex', v, 0);
                this.__zIndex = v;
                if (this.__zIndex || v) {
                    this.dhtml().style.zIndex = v;
                }
            }
        }
    });

    ElementCore.prototype.__forceZIndexContext = false;
    Object.defineProperty(ElementCore.prototype, '_forceZIndexContext', {
        get: function() {
            return this.__forceZIndexContext;
        },
        set: function(v) {
            if (this.__forceZIndexContext !== v) {
                val(this, 'forceZIndexContext', v, false);
                this.__forceZIndexContext = v;
            }
        }
    });

    ElementCore.prototype.__clipping = false;
    Object.defineProperty(ElementCore.prototype, '_clipping', {
        get: function() {
            return this.__clipping;
        },
        set: function(v) {
            if (this.__clipping !== v) {
                val(this, 'clipping', v, false);
                this.__clipping = v;
                var nv = v ? 'hidden' : 'visible';
                if (v || !v && (this.dhtml().style.overflow == 'hidden')) {
                    this.dhtml().style.overflow = nv;
                }
            }
        }
    });

    ElementCore.prototype.__withinBoundsMargin = false;
    Object.defineProperty(ElementCore.prototype, '_withinBoundsMargin', {
        get: function() {
            return this.__withinBoundsMargin;
        },
        set: function(v) {
            if (this.__withinBoundsMargin !== v) {
                val(this, 'withinBoundsMargin', v, false);
                this.__withinBoundsMargin = v;
            }
        }
    });

    ElementCore.prototype.__colorUl = 0xFFFFFFFF;
    Object.defineProperty(ElementCore.prototype, '_colorUl', {
        get: function() {
            return this.__colorUl;
        },
        set: function(v) {
            if (this.__colorUl !== v) {
                val(this, 'colorUl', v.toString(16), "ffffffff");
                this.__colorUl = v;
                checkColors(this);
            }
        }
    });

    ElementCore.prototype.__colorUr = 0xFFFFFFFF;
    Object.defineProperty(ElementCore.prototype, '_colorUr', {
        get: function() {
            return this.__colorUr;
        },
        set: function(v) {
            if (this.__colorUr !== v) {
                val(this, 'colorUr', v.toString(16), "ffffffff");
                this.__colorUr = v;
                checkColors(this);
            }
        }
    });

    ElementCore.prototype.__colorBl = 0xFFFFFFFF;
    Object.defineProperty(ElementCore.prototype, '_colorBl', {
        get: function() {
            return this.__colorBl;
        },
        set: function(v) {
            if (this.__colorBl !== v) {
                val(this, 'colorBl', v.toString(16), "ffffffff");
                this.__colorBl = v;
                checkColors(this);
            }
        }
    });

    ElementCore.prototype.__colorBr = 0xFFFFFFFF;
    Object.defineProperty(ElementCore.prototype, '_colorBr', {
        get: function() {
            return this.__colorBr;
        },
        set: function(v) {
            if (this.__colorBr !== v) {
                val(this, 'colorBr', v.toString(16), "ffffffff");
                this.__colorBr = v;
                checkColors(this);
            }
        }
    });

    Element.prototype.$texture = null;
    Object.defineProperty(Element.prototype, '__texture', {
        get: function() {
            return this.$texture;
        },
        set: function(v) {
            this.$texture = v;

            val(this, 'rect', this.rect, false);
            val(this, 'src', this.src, null);
        }
    });

    Element.prototype.$testId = null;
    Object.defineProperty(Element.prototype, 'testId', {
        get: function() {
            return this.$testId;
        },
        set: function(v) {
            if (this.$testId !== v) {
                this.$testId = v;
                val(this, 'data-testid', v, null);
            }
        }
    });

    var checkColors = function(elementRenderer) {
        let element = elementRenderer._element;
        if (elementRenderer._colorBr === undefined) {
            // Element initialization.
            return;
        }

        if (elementRenderer._colorUl === elementRenderer._colorUr && elementRenderer._colorUl === elementRenderer._colorBl && elementRenderer._colorUl === elementRenderer._colorBr) {
            if (elementRenderer._colorUl !== 0xffffffff) {
                element.dhtmlSetAttribute('color', elementRenderer._colorUl.toString(16));
            } else {
                element.dhtmlRemoveAttribute('color');
            }
            element.dhtmlRemoveAttribute('colorul');
            element.dhtmlRemoveAttribute('colorur');
            element.dhtmlRemoveAttribute('colorbl');
            element.dhtmlRemoveAttribute('colorbr');
        } else {
            val(element, 'colorUr', elementRenderer.colorUr.toString(16), "ffffffff");
            val(element, 'colorUl', elementRenderer.colorUl.toString(16), "ffffffff");
            val(element, 'colorBr', elementRenderer.colorBr.toString(16), "ffffffff");
            val(element, 'colorBl', elementRenderer.colorBl.toString(16), "ffffffff");
            element.dhtmlRemoveAttribute('color');
        }
    };

    ElementTexturizer.prototype.__enabled = false;
    Object.defineProperty(ElementTexturizer.prototype, '_enabled', {
        get: function() {
            return this.__enabled;
        },
        set: function(v) {
            if (this.__enabled !== v) {
                val(this, 'renderToTexture', v, false);
                this.__enabled = v;
            }
        }
    });

    ElementTexturizer.prototype.__lazy = false;
    Object.defineProperty(ElementTexturizer.prototype, '_lazy', {
        get: function() {
            return this.__lazy;
        },
        set: function(v) {
            if (this.__lazy !== v) {
                val(this, 'renderToTextureLazy', v, false);
                this.__lazy = v;
            }
        }
    });

    ElementTexturizer.prototype.__colorize = false;
    Object.defineProperty(ElementTexturizer.prototype, '_colorize', {
        get: function() {
            return this.__colorize;
        },
        set: function(v) {
            if (this.__colorize !== v) {
                val(this, 'colorizeResultTexture', v, false);
                this.__colorize = v;
            }
        }
    });

    ElementTexturizer.prototype.__renderOffscreen = false;
    Object.defineProperty(ElementTexturizer.prototype, '_renderOffscreen', {
        get: function() {
            return this.__renderOffscreen;
        },
        set: function(v) {
            if (this.__renderOffscreen !== v) {
                val(this, 'renderOffscreen', v, false);
                this.__renderOffscreen = v;
            }
        }
    });

    ElementCore.prototype.updateDebugTransforms = function() {
        const stage = this._element.stage

        if (this._pivotX !== 0.5 || this._pivotY !== 0.5) {
            this.dhtml().style.transformOrigin = (this._pivotX * 100) + '% '  + (this._pivotY * 100) + '%';
        } else if (this.dhtml().style.transformOrigin) {
            this.dhtml().style.transformOrigin = '50% 50%';
        }

        var r = this._rotation;
        var sx = this._scaleX;
        var sy = this._scaleY;

        if ((sx !== undefined && sy !== undefined) && (this._element.id === 0)) {
            // Root element: must be scaled.
            if (stage.options.w !== stage.options.renderWidth || stage.options.h !== stage.options.renderHeight) {
                sx *= (stage.options.w / stage.options.renderWidth);
                sy *= (stage.options.h / stage.options.renderHeight);
            }
        }
        var parts = [];
        if (r) parts.push('rotate(' + r + 'rad)');
        if ((sx !== undefined && sy !== undefined) && (sx !== 1 || sy !== 1)) parts.push('scale(' + sx + ', ' + sy + ')');

        this.dhtml().style.transform = parts.join(' ');
    };

    var updateTextureAttribs = function(element) {
        if (element.texture) {
            const nonDefaults = element.texture.getNonDefaults()
            const keys = Object.keys(nonDefaults)
            keys.forEach(key => {
                let f = ""
                for (let i = 0, n = key.length; i < n; i++) {
                    const c = key.charAt(i)
                    if (c !== c.toLowerCase()) {
                        f += "_" + c.toLowerCase()
                    } else {
                        f += c
                    }
                }
                valStrict(element, `texture-${f}`, nonDefaults[key], false);
            })
        }
    }

    const _performUpdateSource = Texture.prototype._performUpdateSource
    Texture.prototype._performUpdateSource = function() {
        _performUpdateSource.apply(this, arguments)
        this.elements.forEach(v => {
            updateTextureAttribs(v)
        })
    }

    const _setDisplayedTexture = Element.prototype._setDisplayedTexture
    Element.prototype._setDisplayedTexture = function() {
        _setDisplayedTexture.apply(this, arguments)
        updateTextureAttribs(this)
    }

    const _updateFocus = Application.prototype.__updateFocus
    Application.prototype.__updateFocus = function() {
        const prev = this._focusPath && this._focusPath.length ? this._focusPath[this._focusPath.length - 1] : null;
        _updateFocus.apply(this, arguments)
        const focused = this._focusPath && this._focusPath.length ? this._focusPath[this._focusPath.length - 1] : null;

        if (prev != focused) {
            if (prev) {
                val(prev, 'focused', false, false);
            }
            if (focused) {
                val(focused, 'focused', true, false);
            }
        }
    }
};

if (window.lng) {
    // Automatically attach inspector if lng was already loaded.
    attachInspector(lng);
}


/***/ }),

/***/ "../../../node_modules/@lightningjs/core/dist/lightning.esm.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ lightning)
/* harmony export */ });
/*
 * Lightning v2.11.0
 *
 * https://github.com/rdkcentral/Lightning
 */
class StageUtils {
  static mergeNumbers(v1, v2, p) {
    return v1 * p + v2 * (1 - p);
  }
  static rgb(r, g, b) {
    return (r << 16) + (g << 8) + b + 255 * 16777216;
  }
  static rgba(r, g, b, a) {
    return (r << 16) + (g << 8) + b + (a * 255 | 0) * 16777216;
  }
  static getRgbString(color) {
    let r = (color / 65536 | 0) % 256;
    let g = (color / 256 | 0) % 256;
    let b = color % 256;
    return "rgb(" + r + "," + g + "," + b + ")";
  }
  static getRgbaString(color) {
    let r = (color / 65536 | 0) % 256;
    let g = (color / 256 | 0) % 256;
    let b = color % 256;
    let a = (color / 16777216 | 0) / 255;
    return "rgba(" + r + "," + g + "," + b + "," + a.toFixed(4) + ")";
  }
  static getRgbaStringFromArray(color) {
    let r = Math.floor(color[0] * 255);
    let g = Math.floor(color[1] * 255);
    let b = Math.floor(color[2] * 255);
    let a = Math.floor(color[3] * 255) / 255;
    return "rgba(" + r + "," + g + "," + b + "," + a.toFixed(4) + ")";
  }
  static getRgbaComponentsNormalized(argb) {
    let r = (argb / 65536 | 0) % 256;
    let g = (argb / 256 | 0) % 256;
    let b = argb % 256;
    let a = argb / 16777216 | 0;
    return [r / 255, g / 255, b / 255, a / 255];
  }
  static getRgbComponentsNormalized(argb) {
    let r = (argb / 65536 | 0) % 256;
    let g = (argb / 256 | 0) % 256;
    let b = argb % 256;
    return [r / 255, g / 255, b / 255];
  }
  static getRgbaComponents(argb) {
    let r = (argb / 65536 | 0) % 256;
    let g = (argb / 256 | 0) % 256;
    let b = argb % 256;
    let a = argb / 16777216 | 0;
    return [r, g, b, a];
  }
  static getArgbNumber(rgba) {
    rgba[0] = Math.max(0, Math.min(255, rgba[0]));
    rgba[1] = Math.max(0, Math.min(255, rgba[1]));
    rgba[2] = Math.max(0, Math.min(255, rgba[2]));
    rgba[3] = Math.max(0, Math.min(255, rgba[3]));
    let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);
    if (v < 0) {
      v = 4294967295 + v + 1;
    }
    return v;
  }
  static mergeColors(c1, c2, p) {
    let r1 = (c1 / 65536 | 0) % 256;
    let g1 = (c1 / 256 | 0) % 256;
    let b1 = c1 % 256;
    let a1 = c1 / 16777216 | 0;
    let r2 = (c2 / 65536 | 0) % 256;
    let g2 = (c2 / 256 | 0) % 256;
    let b2 = c2 % 256;
    let a2 = c2 / 16777216 | 0;
    let r = r1 * p + r2 * (1 - p);
    let g = g1 * p + g2 * (1 - p);
    let b = b1 * p + b2 * (1 - p);
    let a = a1 * p + a2 * (1 - p);
    return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);
  }
  static mergeMultiColors(c, p) {
    let r = 0, g = 0, b = 0, a = 0, t = 0;
    let n = c.length;
    for (let i = 0; i < n; i++) {
      let r1 = (c[i] / 65536 | 0) % 256;
      let g1 = (c[i] / 256 | 0) % 256;
      let b1 = c[i] % 256;
      let a1 = c[i] / 16777216 | 0;
      r += r1 * p[i];
      g += g1 * p[i];
      b += b1 * p[i];
      a += a1 * p[i];
      t += p[i];
    }
    t = 1 / t;
    return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);
  }
  static mergeMultiColorsEqual(c) {
    let r = 0, g = 0, b = 0, a = 0, t = 0;
    let n = c.length;
    for (let i = 0; i < n; i++) {
      let r1 = (c[i] / 65536 | 0) % 256;
      let g1 = (c[i] / 256 | 0) % 256;
      let b1 = c[i] % 256;
      let a1 = c[i] / 16777216 | 0;
      r += r1;
      g += g1;
      b += b1;
      a += a1;
      t += 1;
    }
    t = 1 / t;
    return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);
  }
  static mergeColorAlpha(c, alpha) {
    let a = (c / 16777216 | 0) * alpha | 0;
    return ((c >> 16 & 255) * a / 255 & 255) + ((c & 65280) * a / 255 & 65280) + (((c & 255) << 16) * a / 255 & 16711680) + (a << 24);
  }
  static rad(deg) {
    return deg * (Math.PI / 180);
  }
  static getTimingBezier(a, b, c, d) {
    let xc = 3 * a;
    let xb = 3 * (c - a) - xc;
    let xa = 1 - xc - xb;
    let yc = 3 * b;
    let yb = 3 * (d - b) - yc;
    let ya = 1 - yc - yb;
    return function(time) {
      if (time >= 1) {
        return 1;
      }
      if (time <= 0) {
        return 0;
      }
      let t = 0.5, cbx, cbxd, dx;
      for (let it = 0; it < 20; it++) {
        cbx = t * (t * (t * xa + xb) + xc);
        dx = time - cbx;
        if (dx > -1e-8 && dx < 1e-8) {
          return t * (t * (t * ya + yb) + yc);
        }
        cbxd = t * (t * (3 * xa) + 2 * xb) + xc;
        if (cbxd > 1e-10 && cbxd < 1e-10) {
          break;
        }
        t += dx / cbxd;
      }
      let minT = 0;
      let maxT = 1;
      for (let it = 0; it < 20; it++) {
        t = 0.5 * (minT + maxT);
        cbx = t * (t * (t * xa + xb) + xc);
        dx = time - cbx;
        if (dx > -1e-8 && dx < 1e-8) {
          return t * (t * (t * ya + yb) + yc);
        }
        if (dx < 0) {
          maxT = t;
        } else {
          minT = t;
        }
      }
    };
  }
  static getTimingFunction(str) {
    switch (str) {
      case "linear":
        return function(time) {
          return time;
        };
      case "ease":
        return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1);
      case "ease-in":
        return StageUtils.getTimingBezier(0.42, 0, 1, 1);
      case "ease-out":
        return StageUtils.getTimingBezier(0, 0, 0.58, 1);
      case "ease-in-out":
        return StageUtils.getTimingBezier(0.42, 0, 0.58, 1);
      case "step-start":
        return function() {
          return 1;
        };
      case "step-end":
        return function(time) {
          return time === 1 ? 1 : 0;
        };
      default:
        let s = "cubic-bezier(";
        if (str && str.indexOf(s) === 0) {
          let parts = str.substr(s.length, str.length - s.length - 1).split(",");
          if (parts.length !== 4) {
            console.warn("[Lightning] Unknown timing function: " + str);
            return function(time) {
              return time;
            };
          }
          let a = parseFloat(parts[0]);
          let b = parseFloat(parts[1]);
          let c = parseFloat(parts[2]);
          let d = parseFloat(parts[3]);
          if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {
            console.warn("[Lightning] Unknown timing function: " + str);
            return function(time) {
              return time;
            };
          }
          return StageUtils.getTimingBezier(a, b, c, d);
        } else {
          console.warn("[Lightning] Unknown timing function: " + str);
          return function(time) {
            return time;
          };
        }
    }
  }
}
let Utils$1 = class Utils {
  static isFunction(value) {
    return typeof value === "function";
  }
  static isNumber(value) {
    return typeof value === "number";
  }
  static isInteger(value) {
    return typeof value === "number" && value % 1 === 0;
  }
  static isBoolean(value) {
    return value === true || value === false;
  }
  static isString(value) {
    return typeof value === "string";
  }
  static clone(v) {
    if (Utils$1.isObjectLiteral(v) || Array.isArray(v)) {
      return Utils$1.getDeepClone(v);
    } else {
      return v;
    }
  }
  static cloneObjShallow(obj) {
    let keys = Object.keys(obj);
    let clone = {};
    for (let i = 0; i < keys.length; i++) {
      clone[keys[i]] = obj[keys[i]];
    }
    return clone;
  }
  static merge(obj1, obj2) {
    let keys = Object.keys(obj2);
    for (let i = 0; i < keys.length; i++) {
      obj1[keys[i]] = obj2[keys[i]];
    }
    return obj1;
  }
  static isObject(value) {
    let type = typeof value;
    return !!value && (type === "object" || type === "function");
  }
  static isPlainObject(value) {
    let type = typeof value;
    return !!value && type === "object";
  }
  static isObjectLiteral(value) {
    return typeof value === "object" && value && value.constructor === Object;
  }
  static getArrayIndex(index, arr) {
    return Utils$1.getModuloIndex(index, arr.length);
  }
  static getModuloIndex(index, len) {
    if (len === 0)
      return index;
    while (index < 0) {
      index += Math.ceil(-index / len) * len;
    }
    index = index % len;
    return index;
  }
  static getDeepClone(obj) {
    let i, c;
    if (Utils$1.isFunction(obj)) {
      return obj;
    }
    if (Array.isArray(obj)) {
      c = [];
      let keys = Object.keys(obj);
      for (i = 0; i < keys.length; i++) {
        c[keys[i]] = Utils$1.getDeepClone(obj[keys[i]]);
      }
      return c;
    } else if (Utils$1.isObject(obj)) {
      c = {};
      let keys = Object.keys(obj);
      for (i = 0; i < keys.length; i++) {
        c[keys[i]] = Utils$1.getDeepClone(obj[keys[i]]);
      }
      return c;
    } else {
      return obj;
    }
  }
  static equalValues(v1, v2) {
    if (typeof v1 !== typeof v2)
      return false;
    if (Utils$1.isObjectLiteral(v1)) {
      return Utils$1.isObjectLiteral(v2) && Utils$1.equalObjectLiterals(v1, v2);
    } else if (Array.isArray(v1)) {
      return Array.isArray(v2) && Utils$1.equalArrays(v1, v2);
    } else {
      return v1 === v2;
    }
  }
  static equalObjectLiterals(obj1, obj2) {
    let keys1 = Object.keys(obj1);
    let keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (let i = 0, n = keys1.length; i < n; i++) {
      const k1 = keys1[i];
      const k2 = keys2[i];
      if (k1 !== k2) {
        return false;
      }
      const v1 = obj1[k1];
      const v2 = obj2[k2];
      if (!Utils$1.equalValues(v1, v2)) {
        return false;
      }
    }
    return true;
  }
  static equalArrays(v1, v2) {
    if (v1.length !== v2.length) {
      return false;
    }
    for (let i = 0, n = v1.length; i < n; i++) {
      if (!this.equalValues(v1[i], v2[i])) {
        return false;
      }
    }
    return true;
  }
  static setToArray(s) {
    let result = [];
    s.forEach(function(value) {
      result.push(value);
    });
    return result;
  }
  static iteratorToArray(iterator) {
    let result = [];
    let iteratorResult = iterator.next();
    while (!iteratorResult.done) {
      result.push(iteratorResult.value);
      iteratorResult = iterator.next();
    }
    return result;
  }
  static isUcChar(charcode) {
    return charcode >= 65 && charcode <= 90;
  }
};
Utils$1.isWeb = typeof window !== "undefined" && typeof sparkscene === "undefined";
Utils$1.isWPE = Utils$1.isWeb && navigator.userAgent.indexOf("WPE") !== -1;
Utils$1.isSpark = typeof sparkscene !== "undefined";
Utils$1.isNode = typeof window === "undefined" || Utils$1.isSpark;
Utils$1.isPS4 = Utils$1.isWeb && navigator.userAgent.indexOf("PlayStation 4") !== -1;
Utils$1.isZiggo = Utils$1.isWeb && (navigator.userAgent.indexOf("EOSSTB") !== -1 || navigator.userAgent.indexOf("HZNSTB") !== -1);
class Base {
  static defaultSetter(obj, name, value) {
    obj[name] = value;
  }
  static patchObject(obj, settings) {
    if (!Utils$1.isObjectLiteral(settings)) {
      console.error("[Lightning] Settings must be object literal");
    } else {
      let names = Object.keys(settings);
      for (let i = 0, n = names.length; i < n; i++) {
        let name = names[i];
        this.patchObjectProperty(obj, name, settings[name]);
      }
    }
  }
  static patchObjectProperty(obj, name, value) {
    let setter = obj.setSetting || Base.defaultSetter;
    if (name.charAt(0) === "_") {
      if (name !== "__create") {
        console.error("[Lightning] Patch of private property '" + name + "' is not allowed");
      }
    } else if (name !== "type") {
      if (Utils$1.isFunction(value) && value.__local) {
        value = value.__local(obj);
      }
      setter(obj, name, value);
    }
  }
  static local(func) {
    func.__local = true;
  }
}
class SpacingCalculator {
  static getSpacing(mode, numberOfItems, remainingSpace) {
    const itemGaps = numberOfItems - 1;
    let spacePerGap;
    let spacingBefore, spacingBetween;
    switch (mode) {
      case "flex-start":
        spacingBefore = 0;
        spacingBetween = 0;
        break;
      case "flex-end":
        spacingBefore = remainingSpace;
        spacingBetween = 0;
        break;
      case "center":
        spacingBefore = remainingSpace / 2;
        spacingBetween = 0;
        break;
      case "space-between":
        spacingBefore = 0;
        spacingBetween = Math.max(0, remainingSpace) / itemGaps;
        break;
      case "space-around":
        if (remainingSpace < 0) {
          return this.getSpacing("center", numberOfItems, remainingSpace);
        } else {
          spacePerGap = remainingSpace / (itemGaps + 1);
          spacingBefore = 0.5 * spacePerGap;
          spacingBetween = spacePerGap;
        }
        break;
      case "space-evenly":
        if (remainingSpace < 0) {
          return this.getSpacing("center", numberOfItems, remainingSpace);
        } else {
          spacePerGap = remainingSpace / (itemGaps + 2);
          spacingBefore = spacePerGap;
          spacingBetween = spacePerGap;
        }
        break;
      case "stretch":
        spacingBefore = 0;
        spacingBetween = 0;
        break;
      default:
        throw new Error("Unknown mode: " + mode);
    }
    return { spacingBefore, spacingBetween };
  }
}
class ContentAligner {
  constructor(layout) {
    this._layout = layout;
    this._totalCrossAxisSize = 0;
  }
  get _lines() {
    return this._layout._lines;
  }
  init() {
    this._totalCrossAxisSize = this._getTotalCrossAxisSize();
  }
  align() {
    const crossAxisSize = this._layout.crossAxisSize;
    const remainingSpace = crossAxisSize - this._totalCrossAxisSize;
    const { spacingBefore, spacingBetween } = this._getSpacing(remainingSpace);
    const lines = this._lines;
    const mode = this._layout._flexContainer.alignContent;
    let growSize = 0;
    if (mode === "stretch" && lines.length && remainingSpace > 0) {
      growSize = remainingSpace / lines.length;
    }
    let currentPos = spacingBefore;
    for (let i = 0, n = lines.length; i < n; i++) {
      const crossAxisLayoutOffset = currentPos;
      const aligner = lines[i].createItemAligner();
      let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;
      aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);
      aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);
      aligner.align();
      if (aligner.recursiveResizeOccured) {
        lines[i].setItemPositions();
      }
      currentPos += finalCrossAxisLayoutSize;
      currentPos += spacingBetween;
    }
  }
  get totalCrossAxisSize() {
    return this._totalCrossAxisSize;
  }
  _getTotalCrossAxisSize() {
    const lines = this._lines;
    let total = 0;
    for (let i = 0, n = lines.length; i < n; i++) {
      const line = lines[i];
      total += line.crossAxisLayoutSize;
    }
    return total;
  }
  _getSpacing(remainingSpace) {
    const mode = this._layout._flexContainer.alignContent;
    const numberOfItems = this._lines.length;
    return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);
  }
}
class FlexUtils {
  static getParentAxisSizeWithPadding(item, horizontal) {
    const target = item.target;
    const parent = target.getParent();
    if (!parent) {
      return 0;
    } else {
      const flexParent = item.flexParent;
      if (flexParent) {
        return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);
      } else {
        return horizontal ? parent.w : parent.h;
      }
    }
  }
  static getRelAxisSize(item, horizontal) {
    if (horizontal) {
      if (item.funcW) {
        if (this._allowRelAxisSizeFunction(item, true)) {
          return item.funcW(this.getParentAxisSizeWithPadding(item, true));
        } else {
          return 0;
        }
      } else {
        return item.originalWidth;
      }
    } else {
      if (item.funcH) {
        if (this._allowRelAxisSizeFunction(item, false)) {
          return item.funcH(this.getParentAxisSizeWithPadding(item, false));
        } else {
          return 0;
        }
      } else {
        return item.originalHeight;
      }
    }
  }
  static _allowRelAxisSizeFunction(item, horizontal) {
    const flexParent = item.flexParent;
    if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {
      return false;
    }
    return true;
  }
  static isZeroAxisSize(item, horizontal) {
    if (horizontal) {
      return !item.originalWidth && !item.funcW;
    } else {
      return !item.originalHeight && !item.funcH;
    }
  }
  static getAxisLayoutPos(item, horizontal) {
    return horizontal ? item.x : item.y;
  }
  static getAxisLayoutSize(item, horizontal) {
    return horizontal ? item.w : item.h;
  }
  static setAxisLayoutPos(item, horizontal, pos) {
    if (horizontal) {
      item.x = pos;
    } else {
      item.y = pos;
    }
  }
  static setAxisLayoutSize(item, horizontal, size) {
    if (horizontal) {
      item.w = size;
    } else {
      item.h = size;
    }
  }
  static getAxisMinSize(item, horizontal) {
    let minSize = this.getPlainAxisMinSize(item, horizontal);
    let flexItemMinSize = 0;
    if (item.isFlexItemEnabled()) {
      flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);
    }
    const hasLimitedMinSize = flexItemMinSize > 0;
    if (hasLimitedMinSize) {
      minSize = Math.max(minSize, flexItemMinSize);
    }
    return minSize;
  }
  static getPlainAxisMinSize(item, horizontal) {
    if (item.isFlexEnabled()) {
      return item._flex._layout.getAxisMinSize(horizontal);
    } else {
      const isShrinkable = item.flexItem.shrink !== 0;
      if (isShrinkable) {
        return 0;
      } else {
        return this.getRelAxisSize(item, horizontal);
      }
    }
  }
  static resizeAxis(item, horizontal, size) {
    if (item.isFlexEnabled()) {
      const isMainAxis = item._flex._horizontal === horizontal;
      if (isMainAxis) {
        item._flex._layout.resizeMainAxis(size);
      } else {
        item._flex._layout.resizeCrossAxis(size);
      }
    } else {
      this.setAxisLayoutSize(item, horizontal, size);
    }
  }
  static getPaddingOffset(item, horizontal) {
    if (item.isFlexEnabled()) {
      const flex = item._flex;
      if (horizontal) {
        return flex.paddingLeft;
      } else {
        return flex.paddingTop;
      }
    } else {
      return 0;
    }
  }
  static getTotalPadding(item, horizontal) {
    if (item.isFlexEnabled()) {
      const flex = item._flex;
      if (horizontal) {
        return flex.paddingRight + flex.paddingLeft;
      } else {
        return flex.paddingTop + flex.paddingBottom;
      }
    } else {
      return 0;
    }
  }
  static getMarginOffset(item, horizontal) {
    const flexItem = item.flexItem;
    if (flexItem) {
      if (horizontal) {
        return flexItem.marginLeft;
      } else {
        return flexItem.marginTop;
      }
    } else {
      return 0;
    }
  }
  static getTotalMargin(item, horizontal) {
    const flexItem = item.flexItem;
    if (flexItem) {
      if (horizontal) {
        return flexItem.marginRight + flexItem.marginLeft;
      } else {
        return flexItem.marginTop + flexItem.marginBottom;
      }
    } else {
      return 0;
    }
  }
}
class SizeShrinker {
  constructor(line) {
    this._line = line;
    this._amountRemaining = 0;
    this._shrunkSize = 0;
  }
  shrink(amount) {
    this._shrunkSize = 0;
    this._amountRemaining = amount;
    let totalShrinkAmount = this._getTotalShrinkAmount();
    if (totalShrinkAmount) {
      const items = this._line.items;
      do {
        let amountPerShrink = this._amountRemaining / totalShrinkAmount;
        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {
          const item = items[i];
          const flexItem = item.flexItem;
          const shrinkAmount = flexItem.shrink;
          const isShrinkableItem = shrinkAmount > 0;
          if (isShrinkableItem) {
            let shrink = shrinkAmount * amountPerShrink;
            const minSize = flexItem._getMainAxisMinSize();
            const size = flexItem._getMainAxisLayoutSize();
            if (size > minSize) {
              const maxShrink = size - minSize;
              const isFullyShrunk = shrink >= maxShrink;
              if (isFullyShrunk) {
                shrink = maxShrink;
                totalShrinkAmount -= shrinkAmount;
              }
              const finalSize = size - shrink;
              flexItem._resizeMainAxis(finalSize);
              this._shrunkSize += shrink;
              this._amountRemaining -= shrink;
              if (Math.abs(this._amountRemaining) < 1e-5) {
                return;
              }
            }
          }
        }
      } while (totalShrinkAmount && Math.abs(this._amountRemaining) > 1e-5);
    }
  }
  _getTotalShrinkAmount() {
    let total = 0;
    const items = this._line.items;
    for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {
      const item = items[i];
      const flexItem = item.flexItem;
      if (flexItem.shrink) {
        const minSize = flexItem._getMainAxisMinSize();
        const size = flexItem._getMainAxisLayoutSize();
        if (size > minSize) {
          total += flexItem.shrink;
        }
      }
    }
    return total;
  }
  getShrunkSize() {
    return this._shrunkSize;
  }
}
class SizeGrower {
  constructor(line) {
    this._line = line;
    this._amountRemaining = 0;
    this._grownSize = 0;
  }
  grow(amount) {
    this._grownSize = 0;
    this._amountRemaining = amount;
    let totalGrowAmount = this._getTotalGrowAmount();
    if (totalGrowAmount) {
      const items = this._line.items;
      do {
        let amountPerGrow = this._amountRemaining / totalGrowAmount;
        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {
          const item = items[i];
          const flexItem = item.flexItem;
          const growAmount = flexItem.grow;
          const isGrowableItem = growAmount > 0;
          if (isGrowableItem) {
            let grow = growAmount * amountPerGrow;
            const maxSize = flexItem._getMainAxisMaxSizeSetting();
            const size = flexItem._getMainAxisLayoutSize();
            if (maxSize > 0) {
              if (size >= maxSize) {
                grow = 0;
              } else {
                const maxGrow = maxSize - size;
                const isFullyGrown = grow >= maxGrow;
                if (isFullyGrown) {
                  grow = maxGrow;
                  totalGrowAmount -= growAmount;
                }
              }
            }
            if (grow > 0) {
              const finalSize = size + grow;
              flexItem._resizeMainAxis(finalSize);
              this._grownSize += grow;
              this._amountRemaining -= grow;
              if (Math.abs(this._amountRemaining) < 1e-5) {
                return;
              }
            }
          }
        }
      } while (totalGrowAmount && Math.abs(this._amountRemaining) > 1e-5);
    }
  }
  _getTotalGrowAmount() {
    let total = 0;
    const items = this._line.items;
    for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {
      const item = items[i];
      const flexItem = item.flexItem;
      if (flexItem.grow) {
        const maxSize = flexItem._getMainAxisMaxSizeSetting();
        const size = flexItem._getMainAxisLayoutSize();
        if (maxSize === 0 || size < maxSize) {
          total += flexItem.grow;
        }
      }
    }
    return total;
  }
  getGrownSize() {
    return this._grownSize;
  }
}
class ItemPositioner {
  constructor(lineLayout) {
    this._line = lineLayout;
  }
  get _layout() {
    return this._line._layout;
  }
  position() {
    const { spacingBefore, spacingBetween } = this._getSpacing();
    let currentPos = spacingBefore;
    const items = this._line.items;
    for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {
      const item = items[i];
      item.flexItem._setMainAxisLayoutPos(currentPos);
      currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();
      currentPos += spacingBetween;
    }
  }
  _getSpacing() {
    const remainingSpace = this._line._availableSpace;
    let mode = this._layout._flexContainer.justifyContent;
    const numberOfItems = this._line.numberOfItems;
    return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);
  }
}
class ItemAligner {
  constructor(line) {
    this._line = line;
    this._crossAxisLayoutSize = 0;
    this._crossAxisLayoutOffset = 0;
    this._alignItemsSetting = null;
    this._recursiveResizeOccured = false;
    this._isCrossAxisFitToContents = false;
  }
  get _layout() {
    return this._line._layout;
  }
  get _flexContainer() {
    return this._layout._flexContainer;
  }
  setCrossAxisLayoutSize(size) {
    this._crossAxisLayoutSize = size;
  }
  setCrossAxisLayoutOffset(offset) {
    this._crossAxisLayoutOffset = offset;
  }
  align() {
    this._alignItemsSetting = this._flexContainer.alignItems;
    this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);
    this._recursiveResizeOccured = false;
    const items = this._line.items;
    for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {
      const item = items[i];
      this._alignItem(item);
    }
  }
  get recursiveResizeOccured() {
    return this._recursiveResizeOccured;
  }
  _alignItem(item) {
    const flexItem = item.flexItem;
    let align = flexItem.alignSelf || this._alignItemsSetting;
    if (align === "stretch" && this._preventStretch(flexItem)) {
      align = "flex-start";
    }
    if (align !== "stretch" && !this._isCrossAxisFitToContents) {
      if (flexItem._hasRelCrossAxisSize()) {
        flexItem._resetCrossAxisLayoutSize();
      }
    }
    switch (align) {
      case "flex-start":
        this._alignItemFlexStart(flexItem);
        break;
      case "flex-end":
        this._alignItemFlexEnd(flexItem);
        break;
      case "center":
        this._alignItemFlexCenter(flexItem);
        break;
      case "stretch":
        this._alignItemStretch(flexItem);
        break;
    }
  }
  _alignItemFlexStart(flexItem) {
    flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);
  }
  _alignItemFlexEnd(flexItem) {
    const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();
    flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));
  }
  _alignItemFlexCenter(flexItem) {
    const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();
    const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;
    flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);
  }
  _alignItemStretch(flexItem) {
    flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);
    const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();
    let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();
    const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();
    if (crossAxisMinSizeSetting > 0) {
      size = Math.max(size, crossAxisMinSizeSetting);
    }
    const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();
    const crossAxisMaxSizeSettingEnabled = crossAxisMaxSizeSetting > 0;
    if (crossAxisMaxSizeSettingEnabled) {
      size = Math.min(size, crossAxisMaxSizeSetting);
    }
    flexItem._resizeCrossAxis(size);
    const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();
    const recursiveResize = mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize;
    if (recursiveResize) {
      this._recursiveResizeOccured = true;
    }
  }
  _preventStretch(flexItem) {
    const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();
    const forceStretch = flexItem.alignSelf === "stretch";
    return hasFixedCrossAxisSize && !forceStretch;
  }
}
class LineLayout {
  constructor(layout, startIndex, endIndex, availableSpace) {
    this._layout = layout;
    this.items = layout.items;
    this.startIndex = startIndex;
    this.endIndex = endIndex;
    this._availableSpace = availableSpace;
  }
  performLayout() {
    this._setItemSizes();
    this.setItemPositions();
    this._calcLayoutInfo();
  }
  _setItemSizes() {
    if (this._availableSpace > 0) {
      this._growItemSizes(this._availableSpace);
    } else if (this._availableSpace < 0) {
      this._shrinkItemSizes(-this._availableSpace);
    }
  }
  _growItemSizes(amount) {
    const grower = new SizeGrower(this);
    grower.grow(amount);
    this._availableSpace -= grower.getGrownSize();
  }
  _shrinkItemSizes(amount) {
    const shrinker = new SizeShrinker(this);
    shrinker.shrink(amount);
    this._availableSpace += shrinker.getShrunkSize();
  }
  setItemPositions() {
    const positioner = new ItemPositioner(this);
    positioner.position();
  }
  createItemAligner() {
    return new ItemAligner(this);
  }
  _calcLayoutInfo() {
    this._calcCrossAxisMaxLayoutSize();
  }
  getMainAxisMinSize() {
    let mainAxisMinSize = 0;
    for (let i = this.startIndex; i <= this.endIndex; i++) {
      const item = this.items[i];
      mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();
    }
    return mainAxisMinSize;
  }
  get numberOfItems() {
    return this.endIndex - this.startIndex + 1;
  }
  get crossAxisLayoutSize() {
    const noSpecifiedCrossAxisSize = this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis;
    const shouldFitToContents = this._layout.isWrapping() || noSpecifiedCrossAxisSize;
    if (shouldFitToContents) {
      return this._crossAxisMaxLayoutSize;
    } else {
      return this._layout.crossAxisSize;
    }
  }
  _calcCrossAxisMaxLayoutSize() {
    this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();
  }
  _getCrossAxisMaxLayoutSize() {
    let crossAxisMaxSize = 0;
    for (let i = this.startIndex; i <= this.endIndex; i++) {
      const item = this.items[i];
      crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());
    }
    return crossAxisMaxSize;
  }
}
class LineLayouter {
  constructor(layout) {
    this._layout = layout;
    this._mainAxisMinSize = -1;
    this._crossAxisMinSize = -1;
    this._mainAxisContentSize = 0;
  }
  get lines() {
    return this._lines;
  }
  get mainAxisMinSize() {
    if (this._mainAxisMinSize === -1) {
      this._mainAxisMinSize = this._getMainAxisMinSize();
    }
    return this._mainAxisMinSize;
  }
  get crossAxisMinSize() {
    if (this._crossAxisMinSize === -1) {
      this._crossAxisMinSize = this._getCrossAxisMinSize();
    }
    return this._crossAxisMinSize;
  }
  get mainAxisContentSize() {
    return this._mainAxisContentSize;
  }
  layoutLines() {
    this._setup();
    const items = this._layout.items;
    const wrap = this._layout.isWrapping();
    let startIndex = 0;
    let i;
    const n = items.length;
    for (i = 0; i < n; i++) {
      const item = items[i];
      this._layoutFlexItem(item);
      const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();
      if (wrap && i > startIndex) {
        const isOverflowing = this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize;
        if (isOverflowing) {
          this._layoutLine(startIndex, i - 1);
          this._curMainAxisPos = 0;
          startIndex = i;
        }
      }
      this._addToMainAxisPos(itemMainAxisSize);
    }
    if (startIndex < i) {
      this._layoutLine(startIndex, i - 1);
    }
  }
  _layoutFlexItem(item) {
    if (item.isFlexEnabled()) {
      item.flexLayout.updateTreeLayout();
    } else {
      item.flexItem._resetLayoutSize();
    }
  }
  _setup() {
    this._mainAxisSize = this._layout.mainAxisSize;
    this._curMainAxisPos = 0;
    this._maxMainAxisPos = 0;
    this._lines = [];
    this._mainAxisMinSize = -1;
    this._crossAxisMinSize = -1;
    this._mainAxisContentSize = 0;
  }
  _addToMainAxisPos(itemMainAxisSize) {
    this._curMainAxisPos += itemMainAxisSize;
    if (this._curMainAxisPos > this._maxMainAxisPos) {
      this._maxMainAxisPos = this._curMainAxisPos;
    }
  }
  _layoutLine(startIndex, endIndex) {
    const availableSpace = this._getAvailableMainAxisLayoutSpace();
    const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);
    line.performLayout();
    this._lines.push(line);
    if (this._mainAxisContentSize === 0 || this._curMainAxisPos > this._mainAxisContentSize) {
      this._mainAxisContentSize = this._curMainAxisPos;
    }
  }
  _getAvailableMainAxisLayoutSpace() {
    if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {
      return 0;
    } else {
      return this._mainAxisSize - this._curMainAxisPos;
    }
  }
  _getCrossAxisMinSize() {
    let crossAxisMinSize = 0;
    const items = this._layout.items;
    for (let i = 0, n = items.length; i < n; i++) {
      const item = items[i];
      const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();
      crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);
    }
    return crossAxisMinSize;
  }
  _getMainAxisMinSize() {
    if (this._lines.length === 1) {
      return this._lines[0].getMainAxisMinSize();
    } else {
      return this._layout.mainAxisSize;
    }
  }
}
class ItemCoordinatesUpdater {
  constructor(layout) {
    this._layout = layout;
    this._isReverse = this._flexContainer._reverse;
    this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();
    this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();
  }
  get _flexContainer() {
    return this._layout._flexContainer;
  }
  finalize() {
    const parentFlex = this._layout.getParentFlexContainer();
    if (parentFlex) {
      const updater = new ItemCoordinatesUpdater(parentFlex._layout);
      updater._finalizeItemAndChildren(this._flexContainer.item);
    } else {
      this._finalizeRoot();
      this._finalizeItems();
    }
  }
  _finalizeRoot() {
    const item = this._flexContainer.item;
    let x = FlexUtils.getAxisLayoutPos(item, true);
    let y = FlexUtils.getAxisLayoutPos(item, false);
    let w = FlexUtils.getAxisLayoutSize(item, true);
    let h = FlexUtils.getAxisLayoutSize(item, false);
    w += this._layout._getHorizontalPadding();
    h += this._layout._getVerticalPadding();
    item.clearRecalcFlag();
    item.setLayout(x, y, w, h);
  }
  _finalizeItems() {
    const items = this._layout.items;
    for (let i = 0, n = items.length; i < n; i++) {
      const item = items[i];
      const validCache = this._validateItemCache(item);
      this._finalizeItem(item);
      if (!validCache) {
        this._finalizeItemChildren(item);
      }
    }
  }
  _validateItemCache(item) {
    if (item.recalc === 0) {
      if (item.isFlexEnabled()) {
        const layout = item._flex._layout;
        const dimensionsMatchPreviousResult = item.w === item.target.w && item.h === item.target.h;
        if (dimensionsMatchPreviousResult) {
          return true;
        } else {
          const crossAxisSize = layout.crossAxisSize;
          layout.performResizeMainAxis(layout.mainAxisSize);
          layout.performResizeCrossAxis(crossAxisSize);
        }
      }
    }
    return false;
  }
  _finalizeItemAndChildren(item) {
    this._finalizeItem(item);
    this._finalizeItemChildren(item);
  }
  _finalizeItem(item) {
    if (this._isReverse) {
      this._reverseMainAxisLayoutPos(item);
    }
    let x = FlexUtils.getAxisLayoutPos(item, true);
    let y = FlexUtils.getAxisLayoutPos(item, false);
    let w = FlexUtils.getAxisLayoutSize(item, true);
    let h = FlexUtils.getAxisLayoutSize(item, false);
    x += this._horizontalPaddingOffset;
    y += this._verticalPaddingOffset;
    const flex = item.flex;
    if (flex) {
      w += item._flex._layout._getHorizontalPadding();
      h += item._flex._layout._getVerticalPadding();
    }
    const flexItem = item.flexItem;
    if (flexItem) {
      x += flexItem._getHorizontalMarginOffset();
      y += flexItem._getVerticalMarginOffset();
    }
    item.clearRecalcFlag();
    item.setLayout(x, y, w, h);
  }
  _finalizeItemChildren(item) {
    const flex = item._flex;
    if (flex) {
      const updater = new ItemCoordinatesUpdater(flex._layout);
      updater._finalizeItems();
    }
  }
  _reverseMainAxisLayoutPos(item) {
    const endPos = item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();
    const reversedPos = this._layout.mainAxisSize - endPos;
    item.flexItem._setMainAxisLayoutPos(reversedPos);
  }
}
class FlexLayout {
  constructor(flexContainer) {
    this._flexContainer = flexContainer;
    this._lineLayouter = new LineLayouter(this);
    this._resizingMainAxis = false;
    this._resizingCrossAxis = false;
    this._cachedMainAxisSizeAfterLayout = 0;
    this._cachedCrossAxisSizeAfterLayout = 0;
    this._shrunk = false;
  }
  get shrunk() {
    return this._shrunk;
  }
  get recalc() {
    return this.item.recalc;
  }
  layoutTree() {
    const isSubTree = this.item.flexParent !== null;
    if (isSubTree) {
      this._updateSubTreeLayout();
    } else {
      this.updateTreeLayout();
    }
    this.updateItemCoords();
  }
  updateTreeLayout() {
    if (this.recalc) {
      this._performUpdateLayoutTree();
    } else {
      this._performUpdateLayoutTreeFromCache();
    }
  }
  _performUpdateLayoutTree() {
    this._setInitialAxisSizes();
    this._layoutAxes();
    this._refreshLayoutCache();
  }
  _refreshLayoutCache() {
    this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;
    this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;
  }
  _performUpdateLayoutTreeFromCache() {
    const sizeMightHaveChanged = this.item.funcW || this.item.funcH;
    if (sizeMightHaveChanged) {
      this.item.enableLocalRecalcFlag();
      this._performUpdateLayoutTree();
    } else {
      this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;
      this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;
    }
  }
  updateItemCoords() {
    const updater = new ItemCoordinatesUpdater(this);
    updater.finalize();
  }
  _updateSubTreeLayout() {
    const crossAxisSize = this.crossAxisSize;
    this._layoutMainAxis();
    this.performResizeCrossAxis(crossAxisSize);
  }
  _setInitialAxisSizes() {
    if (this.item.isFlexItemEnabled()) {
      this.item.flexItem._resetLayoutSize();
    } else {
      this.mainAxisSize = this._getMainAxisBasis();
      this.crossAxisSize = this._getCrossAxisBasis();
    }
    this._resizingMainAxis = false;
    this._resizingCrossAxis = false;
    this._shrunk = false;
  }
  _layoutAxes() {
    this._layoutMainAxis();
    this._layoutCrossAxis();
  }
  _layoutMainAxis() {
    this._layoutLines();
    this._fitMainAxisSizeToContents();
  }
  _layoutLines() {
    this._lineLayouter.layoutLines();
  }
  get _lines() {
    return this._lineLayouter.lines;
  }
  _fitMainAxisSizeToContents() {
    if (!this._resizingMainAxis) {
      if (this.isMainAxisFitToContents()) {
        this.mainAxisSize = this._lineLayouter.mainAxisContentSize;
      }
    }
  }
  _layoutCrossAxis() {
    const aligner = new ContentAligner(this);
    aligner.init();
    this._totalCrossAxisSize = aligner.totalCrossAxisSize;
    this._fitCrossAxisSizeToContents();
    aligner.align();
  }
  _fitCrossAxisSizeToContents() {
    if (!this._resizingCrossAxis) {
      if (this.isCrossAxisFitToContents()) {
        this.crossAxisSize = this._totalCrossAxisSize;
      }
    }
  }
  isWrapping() {
    return this._flexContainer.wrap;
  }
  isAxisFitToContents(horizontal) {
    if (this._horizontal === horizontal) {
      return this.isMainAxisFitToContents();
    } else {
      return this.isCrossAxisFitToContents();
    }
  }
  isMainAxisFitToContents() {
    return !this.isWrapping() && !this._hasFixedMainAxisBasis();
  }
  isCrossAxisFitToContents() {
    return !this._hasFixedCrossAxisBasis();
  }
  _hasFixedMainAxisBasis() {
    return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);
  }
  _hasFixedCrossAxisBasis() {
    return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);
  }
  getAxisMinSize(horizontal) {
    if (this._horizontal === horizontal) {
      return this._getMainAxisMinSize();
    } else {
      return this._getCrossAxisMinSize();
    }
  }
  _getMainAxisMinSize() {
    return this._lineLayouter.mainAxisMinSize;
  }
  _getCrossAxisMinSize() {
    return this._lineLayouter.crossAxisMinSize;
  }
  resizeMainAxis(size) {
    if (this.mainAxisSize !== size) {
      if (this.recalc > 0) {
        this.performResizeMainAxis(size);
      } else {
        if (this._checkValidCacheMainAxisResize()) {
          this.mainAxisSize = size;
          this._fitCrossAxisSizeToContents();
        } else {
          this.item.enableLocalRecalcFlag();
          this.performResizeMainAxis(size);
        }
      }
    }
  }
  _checkValidCacheMainAxisResize(size) {
    const isFinalMainAxisSize = size === this.targetMainAxisSize;
    if (isFinalMainAxisSize) {
      return true;
    }
    const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();
    if (canIgnoreCacheMiss) {
      return true;
    }
    return false;
  }
  performResizeMainAxis(size) {
    const isShrinking = size < this.mainAxisSize;
    this._shrunk = isShrinking;
    this.mainAxisSize = size;
    this._resizingMainAxis = true;
    this._layoutAxes();
    this._resizingMainAxis = false;
  }
  resizeCrossAxis(size) {
    if (this.crossAxisSize !== size) {
      if (this.recalc > 0) {
        this.performResizeCrossAxis(size);
      } else {
        this.crossAxisSize = size;
      }
    }
  }
  performResizeCrossAxis(size) {
    this.crossAxisSize = size;
    this._resizingCrossAxis = true;
    this._layoutCrossAxis();
    this._resizingCrossAxis = false;
  }
  get targetMainAxisSize() {
    return this._horizontal ? this.item.target.w : this.item.target.h;
  }
  get targetCrossAxisSize() {
    return this._horizontal ? this.item.target.h : this.item.target.w;
  }
  getParentFlexContainer() {
    return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;
  }
  _getHorizontalPadding() {
    return FlexUtils.getTotalPadding(this.item, true);
  }
  _getVerticalPadding() {
    return FlexUtils.getTotalPadding(this.item, false);
  }
  _getHorizontalPaddingOffset() {
    return FlexUtils.getPaddingOffset(this.item, true);
  }
  _getVerticalPaddingOffset() {
    return FlexUtils.getPaddingOffset(this.item, false);
  }
  _getMainAxisBasis() {
    return FlexUtils.getRelAxisSize(this.item, this._horizontal);
  }
  _getCrossAxisBasis() {
    return FlexUtils.getRelAxisSize(this.item, !this._horizontal);
  }
  get _horizontal() {
    return this._flexContainer._horizontal;
  }
  get _reverse() {
    return this._flexContainer._reverse;
  }
  get item() {
    return this._flexContainer.item;
  }
  get items() {
    return this.item.items;
  }
  get resizingMainAxis() {
    return this._resizingMainAxis;
  }
  get resizingCrossAxis() {
    return this._resizingCrossAxis;
  }
  get numberOfItems() {
    return this.items.length;
  }
  get mainAxisSize() {
    return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);
  }
  get crossAxisSize() {
    return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);
  }
  set mainAxisSize(v) {
    FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);
  }
  set crossAxisSize(v) {
    FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);
  }
}
class FlexContainer {
  constructor(item) {
    this._item = item;
    this._layout = new FlexLayout(this);
    this._horizontal = true;
    this._reverse = false;
    this._wrap = false;
    this._alignItems = "stretch";
    this._justifyContent = "flex-start";
    this._alignContent = "flex-start";
    this._paddingLeft = 0;
    this._paddingTop = 0;
    this._paddingRight = 0;
    this._paddingBottom = 0;
  }
  get item() {
    return this._item;
  }
  _changedDimensions() {
    this._item.changedDimensions();
  }
  _changedContents() {
    this._item.changedContents();
  }
  get direction() {
    return (this._horizontal ? "row" : "column") + (this._reverse ? "-reverse" : "");
  }
  set direction(f) {
    if (this.direction === f)
      return;
    this._horizontal = f === "row" || f === "row-reverse";
    this._reverse = f === "row-reverse" || f === "column-reverse";
    this._changedContents();
  }
  set wrap(v) {
    this._wrap = v;
    this._changedContents();
  }
  get wrap() {
    return this._wrap;
  }
  get alignItems() {
    return this._alignItems;
  }
  set alignItems(v) {
    if (this._alignItems === v)
      return;
    if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {
      throw new Error("Unknown alignItems, options: " + FlexContainer.ALIGN_ITEMS.join(","));
    }
    this._alignItems = v;
    this._changedContents();
  }
  get alignContent() {
    return this._alignContent;
  }
  set alignContent(v) {
    if (this._alignContent === v)
      return;
    if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {
      throw new Error("Unknown alignContent, options: " + FlexContainer.ALIGN_CONTENT.join(","));
    }
    this._alignContent = v;
    this._changedContents();
  }
  get justifyContent() {
    return this._justifyContent;
  }
  set justifyContent(v) {
    if (this._justifyContent === v)
      return;
    if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {
      throw new Error("Unknown justifyContent, options: " + FlexContainer.JUSTIFY_CONTENT.join(","));
    }
    this._justifyContent = v;
    this._changedContents();
  }
  set padding(v) {
    this.paddingLeft = v;
    this.paddingTop = v;
    this.paddingRight = v;
    this.paddingBottom = v;
  }
  get padding() {
    return this.paddingLeft;
  }
  set paddingLeft(v) {
    this._paddingLeft = v;
    this._changedDimensions();
  }
  get paddingLeft() {
    return this._paddingLeft;
  }
  set paddingTop(v) {
    this._paddingTop = v;
    this._changedDimensions();
  }
  get paddingTop() {
    return this._paddingTop;
  }
  set paddingRight(v) {
    this._paddingRight = v;
    this._changedDimensions();
  }
  get paddingRight() {
    return this._paddingRight;
  }
  set paddingBottom(v) {
    this._paddingBottom = v;
    this._changedDimensions();
  }
  get paddingBottom() {
    return this._paddingBottom;
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
}
FlexContainer.ALIGN_ITEMS = ["flex-start", "flex-end", "center", "stretch"];
FlexContainer.ALIGN_CONTENT = ["flex-start", "flex-end", "center", "space-between", "space-around", "space-evenly", "stretch"];
FlexContainer.JUSTIFY_CONTENT = ["flex-start", "flex-end", "center", "space-between", "space-around", "space-evenly"];
class FlexItem {
  constructor(item) {
    this._ctr = null;
    this._item = item;
    this._grow = 0;
    this._shrink = FlexItem.SHRINK_AUTO;
    this._alignSelf = void 0;
    this._minWidth = 0;
    this._minHeight = 0;
    this._maxWidth = 0;
    this._maxHeight = 0;
    this._marginLeft = 0;
    this._marginTop = 0;
    this._marginRight = 0;
    this._marginBottom = 0;
  }
  get item() {
    return this._item;
  }
  get grow() {
    return this._grow;
  }
  set grow(v) {
    if (this._grow === v)
      return;
    this._grow = parseInt(v) || 0;
    this._changed();
  }
  get shrink() {
    if (this._shrink === FlexItem.SHRINK_AUTO) {
      return this._getDefaultShrink();
    }
    return this._shrink;
  }
  _getDefaultShrink() {
    if (this.item.isFlexEnabled()) {
      return 1;
    } else {
      return 0;
    }
  }
  set shrink(v) {
    if (this._shrink === v)
      return;
    this._shrink = parseInt(v) || 0;
    this._changed();
  }
  get alignSelf() {
    return this._alignSelf;
  }
  set alignSelf(v) {
    if (this._alignSelf === v)
      return;
    if (v === void 0) {
      this._alignSelf = void 0;
    } else {
      if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {
        throw new Error("Unknown alignSelf, options: " + FlexContainer.ALIGN_ITEMS.join(","));
      }
      this._alignSelf = v;
    }
    this._changed();
  }
  get minWidth() {
    return this._minWidth;
  }
  set minWidth(v) {
    this._minWidth = Math.max(0, v);
    this._item.changedDimensions(true, false);
  }
  get minHeight() {
    return this._minHeight;
  }
  set minHeight(v) {
    this._minHeight = Math.max(0, v);
    this._item.changedDimensions(false, true);
  }
  get maxWidth() {
    return this._maxWidth;
  }
  set maxWidth(v) {
    this._maxWidth = Math.max(0, v);
    this._item.changedDimensions(true, false);
  }
  get maxHeight() {
    return this._maxHeight;
  }
  set maxHeight(v) {
    this._maxHeight = Math.max(0, v);
    this._item.changedDimensions(false, true);
  }
  set margin(v) {
    this.marginLeft = v;
    this.marginTop = v;
    this.marginRight = v;
    this.marginBottom = v;
  }
  get margin() {
    return this.marginLeft;
  }
  set marginLeft(v) {
    this._marginLeft = v;
    this._changed();
  }
  get marginLeft() {
    return this._marginLeft;
  }
  set marginTop(v) {
    this._marginTop = v;
    this._changed();
  }
  get marginTop() {
    return this._marginTop;
  }
  set marginRight(v) {
    this._marginRight = v;
    this._changed();
  }
  get marginRight() {
    return this._marginRight;
  }
  set marginBottom(v) {
    this._marginBottom = v;
    this._changed();
  }
  get marginBottom() {
    return this._marginBottom;
  }
  _changed() {
    if (this.ctr)
      this.ctr._changedContents();
  }
  set ctr(v) {
    this._ctr = v;
  }
  get ctr() {
    return this._ctr;
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
  _resetLayoutSize() {
    this._resetHorizontalAxisLayoutSize();
    this._resetVerticalAxisLayoutSize();
  }
  _resetCrossAxisLayoutSize() {
    if (this.ctr._horizontal) {
      this._resetVerticalAxisLayoutSize();
    } else {
      this._resetHorizontalAxisLayoutSize();
    }
  }
  _resetHorizontalAxisLayoutSize() {
    let w = FlexUtils.getRelAxisSize(this.item, true);
    if (this._minWidth) {
      w = Math.max(this._minWidth, w);
    }
    if (this._maxWidth) {
      w = Math.min(this._maxWidth, w);
    }
    FlexUtils.setAxisLayoutSize(this.item, true, w);
  }
  _resetVerticalAxisLayoutSize() {
    let h = FlexUtils.getRelAxisSize(this.item, false);
    if (this._minHeight) {
      h = Math.max(this._minHeight, h);
    }
    if (this._maxHeight) {
      h = Math.min(this._maxHeight, h);
    }
    FlexUtils.setAxisLayoutSize(this.item, false, h);
  }
  _getCrossAxisMinSizeSetting() {
    return this._getMinSizeSetting(!this.ctr._horizontal);
  }
  _getCrossAxisMaxSizeSetting() {
    return this._getMaxSizeSetting(!this.ctr._horizontal);
  }
  _getMainAxisMaxSizeSetting() {
    return this._getMaxSizeSetting(this.ctr._horizontal);
  }
  _getMinSizeSetting(horizontal) {
    if (horizontal) {
      return this._minWidth;
    } else {
      return this._minHeight;
    }
  }
  _getMaxSizeSetting(horizontal) {
    if (horizontal) {
      return this._maxWidth;
    } else {
      return this._maxHeight;
    }
  }
  _getMainAxisMinSize() {
    return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);
  }
  _getCrossAxisMinSize() {
    return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);
  }
  _getMainAxisLayoutSize() {
    return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);
  }
  _getMainAxisLayoutPos() {
    return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);
  }
  _setMainAxisLayoutPos(pos) {
    return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);
  }
  _setCrossAxisLayoutPos(pos) {
    return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);
  }
  _getCrossAxisLayoutSize() {
    return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);
  }
  _resizeCrossAxis(size) {
    return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);
  }
  _resizeMainAxis(size) {
    return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);
  }
  _getMainAxisPadding() {
    return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);
  }
  _getCrossAxisPadding() {
    return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);
  }
  _getMainAxisMargin() {
    return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);
  }
  _getCrossAxisMargin() {
    return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);
  }
  _getHorizontalMarginOffset() {
    return FlexUtils.getMarginOffset(this.item, true);
  }
  _getVerticalMarginOffset() {
    return FlexUtils.getMarginOffset(this.item, false);
  }
  _getMainAxisMinSizeWithPaddingAndMargin() {
    return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();
  }
  _getCrossAxisMinSizeWithPaddingAndMargin() {
    return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();
  }
  _getMainAxisLayoutSizeWithPaddingAndMargin() {
    return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();
  }
  _getCrossAxisLayoutSizeWithPaddingAndMargin() {
    return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();
  }
  _hasFixedCrossAxisSize() {
    return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);
  }
  _hasRelCrossAxisSize() {
    return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);
  }
}
FlexItem.SHRINK_AUTO = -1;
class FlexTarget {
  constructor(target) {
    this._target = target;
    this._recalc = 0;
    this._enabled = false;
    this.x = 0;
    this.y = 0;
    this.w = 0;
    this.h = 0;
    this._originalX = 0;
    this._originalY = 0;
    this._originalWidth = 0;
    this._originalHeight = 0;
    this._flex = null;
    this._flexItem = null;
    this._flexItemDisabled = false;
    this._items = null;
  }
  get flexLayout() {
    return this.flex ? this.flex._layout : null;
  }
  layoutFlexTree() {
    if (this.isFlexEnabled() && this.isChanged()) {
      this.flexLayout.layoutTree();
    }
  }
  get target() {
    return this._target;
  }
  get flex() {
    return this._flex;
  }
  set flex(v) {
    if (!v) {
      if (this.isFlexEnabled()) {
        this._disableFlex();
      }
    } else {
      if (!this.isFlexEnabled()) {
        this._enableFlex();
      }
      this._flex.patch(v);
    }
  }
  get flexItem() {
    if (this._flexItemDisabled) {
      return false;
    }
    this._ensureFlexItem();
    return this._flexItem;
  }
  set flexItem(v) {
    if (v === false) {
      if (!this._flexItemDisabled) {
        const parent = this.flexParent;
        this._flexItemDisabled = true;
        this._checkEnabled();
        if (parent) {
          parent._clearFlexItemsCache();
          parent.changedContents();
        }
      }
    } else {
      this._ensureFlexItem();
      this._flexItem.patch(v);
      if (this._flexItemDisabled) {
        this._flexItemDisabled = false;
        this._checkEnabled();
        const parent = this.flexParent;
        if (parent) {
          parent._clearFlexItemsCache();
          parent.changedContents();
        }
      }
    }
  }
  _enableFlex() {
    this._flex = new FlexContainer(this);
    this._checkEnabled();
    this.changedDimensions();
    this._enableChildrenAsFlexItems();
  }
  _disableFlex() {
    this.changedDimensions();
    this._flex = null;
    this._checkEnabled();
    this._disableChildrenAsFlexItems();
  }
  _enableChildrenAsFlexItems() {
    const children = this._target._children;
    if (children) {
      for (let i = 0, n = children.length; i < n; i++) {
        const child = children[i];
        child.layout._enableFlexItem();
      }
    }
  }
  _disableChildrenAsFlexItems() {
    const children = this._target._children;
    if (children) {
      for (let i = 0, n = children.length; i < n; i++) {
        const child = children[i];
        child.layout._disableFlexItem();
      }
    }
  }
  _enableFlexItem() {
    this._ensureFlexItem();
    const flexParent = this._target._parent._layout;
    this._flexItem.ctr = flexParent._flex;
    flexParent.changedContents();
    this._checkEnabled();
  }
  _disableFlexItem() {
    if (this._flexItem) {
      this._flexItem.ctr = null;
    }
    this._checkEnabled();
    this._resetOffsets();
  }
  _resetOffsets() {
    this.x = 0;
    this.y = 0;
  }
  _ensureFlexItem() {
    if (!this._flexItem) {
      this._flexItem = new FlexItem(this);
    }
  }
  _checkEnabled() {
    const enabled = this.isEnabled();
    if (this._enabled !== enabled) {
      if (enabled) {
        this._enable();
      } else {
        this._disable();
      }
      this._enabled = enabled;
    }
  }
  _enable() {
    this._setupTargetForFlex();
    this._target.enableFlexLayout();
  }
  _disable() {
    this._restoreTargetToNonFlex();
    this._target.disableFlexLayout();
  }
  isEnabled() {
    return this.isFlexEnabled() || this.isFlexItemEnabled();
  }
  isFlexEnabled() {
    return this._flex !== null;
  }
  isFlexItemEnabled() {
    return this.flexParent !== null;
  }
  _restoreTargetToNonFlex() {
    const target = this._target;
    target.x = this._originalX;
    target.y = this._originalY;
    target.setDimensions(this._originalWidth, this._originalHeight);
  }
  _setupTargetForFlex() {
    const target = this._target;
    this._originalX = target._x;
    this._originalY = target._y;
    this._originalWidth = target._w;
    this._originalHeight = target._h;
  }
  setParent(from, to) {
    if (from && from.isFlexContainer()) {
      from._layout._changedChildren();
    }
    if (to && to.isFlexContainer()) {
      this._enableFlexItem();
      to._layout._changedChildren();
    }
    this._checkEnabled();
  }
  get flexParent() {
    if (this._flexItemDisabled) {
      return null;
    }
    const parent = this._target._parent;
    if (parent && parent.isFlexContainer()) {
      return parent._layout;
    }
    return null;
  }
  setVisible(v) {
    const parent = this.flexParent;
    if (parent) {
      parent._changedChildren();
    }
  }
  get items() {
    if (!this._items) {
      this._items = this._getFlexItems();
    }
    return this._items;
  }
  _getFlexItems() {
    const items = [];
    const children = this._target._children;
    if (children) {
      for (let i = 0, n = children.length; i < n; i++) {
        const item = children[i];
        if (item.visible) {
          if (item.isFlexItem()) {
            items.push(item.layout);
          }
        }
      }
    }
    return items;
  }
  _changedChildren() {
    this._clearFlexItemsCache();
    this.changedContents();
  }
  _clearFlexItemsCache() {
    this._items = null;
  }
  setLayout(x, y, w, h) {
    let originalX = this._originalX;
    let originalY = this._originalY;
    if (this.funcX) {
      originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));
    }
    if (this.funcY) {
      originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));
    }
    if (this.isFlexItemEnabled()) {
      this.target.setLayout(x + originalX, y + originalY, w, h);
    } else {
      this.target.setLayout(originalX, originalY, w, h);
    }
  }
  changedDimensions(changeWidth = true, changeHeight = true) {
    this._updateRecalc(changeWidth, changeHeight);
  }
  changedContents() {
    this._updateRecalc();
  }
  forceLayout() {
    this._updateRecalc();
  }
  isChanged() {
    return this._recalc > 0;
  }
  _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {
    if (this.isFlexEnabled()) {
      const layout = this._flex._layout;
      changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);
      changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);
    }
    const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);
    const newRecalcFlags = this.getNewRecalcFlags(recalc);
    this._recalc |= recalc;
    if (newRecalcFlags > 1) {
      if (this.flexParent) {
        this.flexParent._updateRecalcBottomUp(recalc);
      } else {
        this._target.triggerLayout();
      }
    } else {
      this._target.triggerLayout();
    }
  }
  getNewRecalcFlags(flags) {
    return 7 - this._recalc & flags;
  }
  _updateRecalcBottomUp(childRecalc) {
    const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);
    const newRecalcFlags = this.getNewRecalcFlags(newRecalc);
    this._recalc |= newRecalc;
    if (newRecalcFlags > 1) {
      const flexParent = this.flexParent;
      if (flexParent) {
        flexParent._updateRecalcBottomUp(newRecalc);
      } else {
        this._target.triggerLayout();
      }
    } else {
      this._target.triggerLayout();
    }
  }
  _getRecalcFromChangedChildRecalc(childRecalc) {
    const layout = this._flex._layout;
    const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;
    const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;
    const crossAxisDimensionsChangedInChild = childRecalc & crossAxisRecalcFlag;
    if (!crossAxisDimensionsChangedInChild) {
      const mainAxisDimensionsChangedInChild = childRecalc & mainAxisRecalcFlag;
      if (mainAxisDimensionsChangedInChild) {
        const mainAxisIsWrapping = layout.isWrapping();
        if (mainAxisIsWrapping) {
          const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();
          if (crossAxisIsFitToContents) {
            childRecalc += crossAxisRecalcFlag;
          }
        }
      }
    }
    let isWidthDynamic = layout.isAxisFitToContents(true);
    let isHeightDynamic = layout.isAxisFitToContents(false);
    if (layout.shrunk) {
      if (layout._horizontal) {
        isWidthDynamic = true;
      } else {
        isHeightDynamic = true;
      }
    }
    const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);
    const combinedRecalc = childRecalc & localRecalc;
    return combinedRecalc;
  }
  get recalc() {
    return this._recalc;
  }
  clearRecalcFlag() {
    this._recalc = 0;
  }
  enableLocalRecalcFlag() {
    this._recalc = 1;
  }
  get originalX() {
    return this._originalX;
  }
  setOriginalXWithoutUpdatingLayout(v) {
    this._originalX = v;
  }
  get originalY() {
    return this._originalY;
  }
  setOriginalYWithoutUpdatingLayout(v) {
    this._originalY = v;
  }
  get originalWidth() {
    return this._originalWidth;
  }
  set originalWidth(v) {
    if (this._originalWidth !== v) {
      this._originalWidth = v;
      this.changedDimensions(true, false);
    }
  }
  get originalHeight() {
    return this._originalHeight;
  }
  set originalHeight(v) {
    if (this._originalHeight !== v) {
      this._originalHeight = v;
      this.changedDimensions(false, true);
    }
  }
  get funcX() {
    return this._target.funcX;
  }
  get funcY() {
    return this._target.funcY;
  }
  get funcW() {
    return this._target.funcW;
  }
  get funcH() {
    return this._target.funcH;
  }
}
class TextureSource {
  constructor(manager, loader = null) {
    this.id = TextureSource.id++;
    this.manager = manager;
    this.stage = manager.stage;
    this.textures = /* @__PURE__ */ new Set();
    this._activeTextureCount = 0;
    this.loader = loader;
    this.lookupId = null;
    this._cancelCb = null;
    this.loadingSince = 0;
    this.w = 0;
    this.h = 0;
    this._nativeTexture = null;
    this.permanent = false;
    this.renderInfo = null;
    this._isResultTexture = !this.loader;
    this._loadError = null;
    this._imageRef = null;
    this._hasAlpha = false;
  }
  get hasAlpha() {
    return this._hasAlpha;
  }
  get loadError() {
    return this._loadError;
  }
  addTexture(v) {
    if (!this.textures.has(v)) {
      this.textures.add(v);
    }
  }
  removeTexture(v) {
    this.textures.delete(v);
  }
  incActiveTextureCount() {
    this._activeTextureCount++;
    if (this._activeTextureCount === 1) {
      this.becomesUsed();
    }
  }
  decActiveTextureCount() {
    this._activeTextureCount--;
    if (this._activeTextureCount === 0) {
      this.becomesUnused();
    }
  }
  get isResultTexture() {
    return this._isResultTexture;
  }
  set isResultTexture(v) {
    this._isResultTexture = v;
  }
  forEachEnabledElement(cb) {
    this.textures.forEach((texture) => {
      texture.elements.forEach(cb);
    });
  }
  hasEnabledElements() {
    return this.textures.size > 0;
  }
  forEachActiveElement(cb) {
    this.textures.forEach((texture) => {
      texture.elements.forEach((element) => {
        if (element.active) {
          cb(element);
        }
      });
    });
  }
  getRenderWidth() {
    return this.w;
  }
  getRenderHeight() {
    return this.h;
  }
  allowCleanup() {
    return !this.permanent && !this.isUsed();
  }
  becomesUsed() {
    this.load();
  }
  becomesUnused() {
    this.cancel();
  }
  cancel() {
    if (this.isLoading()) {
      if (this._cancelCb) {
        this._cancelCb(this);
        this._cancelCb = null;
      }
      this.loadingSince = 0;
    }
  }
  isLoaded() {
    return !!this._nativeTexture;
  }
  isLoading() {
    return this.loadingSince > 0;
  }
  isError() {
    return !!this._loadError;
  }
  reload() {
    this.free();
    if (this.isUsed()) {
      this.load();
    }
  }
  load(forceSync = false) {
    if (this.isResultTexture) {
      return;
    }
    if (!this._nativeTexture && !this.isLoading()) {
      this.loadingSince = new Date().getTime();
      this._cancelCb = this.loader((err, options) => {
        if (this.isLoading()) {
          this._cancelCb = null;
          if (this.manager.stage.destroyed) {
            return;
          }
          if (err) {
            this.onError(err);
          } else if (options && options.source) {
            if (!this.stage.isUpdatingFrame() && !forceSync && options.throttle !== false) {
              const textureThrottler = this.stage.textureThrottler;
              this._cancelCb = textureThrottler.genericCancelCb;
              textureThrottler.add(this, options);
            } else {
              this.processLoadedSource(options);
            }
          }
        }
      }, this);
    }
  }
  processLoadedSource(options) {
    this.loadingSince = 0;
    this.setSource(options);
  }
  setSource(options) {
    const source = options.source;
    this._hasAlpha = options ? options.hasAlpha || false : false;
    this.w = source.width || options && options.w || 0;
    this.h = source.height || options && options.h || 0;
    if (options && options.renderInfo) {
      this.renderInfo = options.renderInfo;
    }
    this.permanent = !!options.permanent;
    if (options && options.imageRef)
      this._imageRef = options.imageRef;
    if (options && options.flipTextureY) {
      this._flipTextureY = options.flipTextureY;
    } else {
      this._flipTextureY = false;
    }
    if (this._isNativeTexture(source)) {
      this._nativeTexture = source;
      this.w = this.w || source.w;
      this.h = this.h || source.h;
      this.permanent = options.hasOwnProperty("permanent") ? options.permanent : true;
    } else {
      this.manager.uploadTextureSource(this, options);
    }
    this._loadError = null;
    this.onLoad();
  }
  isUsed() {
    return this._activeTextureCount > 0;
  }
  onLoad() {
    if (this.isUsed()) {
      this.textures.forEach((texture) => {
        texture.onLoad();
      });
    }
  }
  forceRenderUpdate() {
    if (this._nativeTexture) {
      this._nativeTexture.update = this.stage.frameCounter;
    }
    this.forEachActiveElement(function(element) {
      element.forceRenderUpdate();
    });
  }
  forceUpdateRenderCoords() {
    this.forEachActiveElement(function(element) {
      element._updateTextureCoords();
    });
  }
  get nativeTexture() {
    return this._nativeTexture;
  }
  clearNativeTexture() {
    this._nativeTexture = null;
    this._imageRef = null;
  }
  replaceNativeTexture(newNativeTexture, w, h) {
    let prevNativeTexture = this._nativeTexture;
    this._nativeTexture = newNativeTexture;
    this.w = w;
    this.h = h;
    if (!prevNativeTexture && this._nativeTexture) {
      this.forEachActiveElement((element) => element.onTextureSourceLoaded());
    }
    if (!this._nativeTexture) {
      this.forEachActiveElement((element) => element._setDisplayedTexture(null));
    }
    this.forEachEnabledElement((element) => element._updateDimensions());
  }
  onError(e) {
    this._loadError = e;
    this.loadingSince = 0;
    console.error("[Lightning] texture load error", e, this.lookupId);
    this.forEachActiveElement((element) => element.onTextureSourceLoadError(e));
  }
  free() {
    if (this.isLoaded()) {
      this.manager.freeTextureSource(this);
    }
  }
  _isNativeTexture(source) {
    if (Utils$1.isNode) {
      return source.constructor.name === "WebGLTexture";
    }
    if ("WebGLTexture" in window) {
      return source instanceof WebGLTexture;
    }
    return false;
  }
}
TextureSource.prototype.isTextureSource = true;
TextureSource.id = 1;
class ElementTexturizer {
  constructor(elementCore) {
    this._element = elementCore.element;
    this._core = elementCore;
    this.ctx = this._core.ctx;
    this._enabled = false;
    this.lazy = false;
    this._colorize = false;
    this._renderTexture = null;
    this._renderTextureReused = false;
    this._resultTextureSource = null;
    this._renderOffscreen = false;
    this.empty = false;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(v) {
    this._enabled = v;
    this._core.updateRenderToTextureEnabled();
  }
  get renderOffscreen() {
    return this._renderOffscreen;
  }
  set renderOffscreen(v) {
    this._renderOffscreen = v;
    this._core.setHasRenderUpdates(1);
    this._core._setRecalc(6);
  }
  get colorize() {
    return this._colorize;
  }
  set colorize(v) {
    if (this._colorize !== v) {
      this._colorize = v;
      this._core.setHasRenderUpdates(1);
    }
  }
  _getTextureSource() {
    if (!this._resultTextureSource) {
      this._resultTextureSource = new TextureSource(this._element.stage.textureManager);
      this.updateResultTexture();
    }
    return this._resultTextureSource;
  }
  hasResultTexture() {
    return !!this._resultTextureSource;
  }
  resultTextureInUse() {
    return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();
  }
  updateResultTexture() {
    let resultTexture = this.getResultTexture();
    if (this._resultTextureSource) {
      if (this._resultTextureSource.nativeTexture !== resultTexture) {
        let w = resultTexture ? resultTexture.w : 0;
        let h = resultTexture ? resultTexture.h : 0;
        this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);
      }
      this._resultTextureSource.forEachEnabledElement((element) => {
        element._updateDimensions();
        element.core.setHasRenderUpdates(3);
      });
    }
  }
  mustRenderToTexture() {
    if (this._enabled && !this.lazy) {
      return true;
    } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {
      return true;
    }
    return false;
  }
  deactivate() {
    this.release();
  }
  get renderTextureReused() {
    return this._renderTextureReused;
  }
  release() {
    this.releaseRenderTexture();
  }
  releaseRenderTexture() {
    if (this._renderTexture) {
      if (!this._renderTextureReused) {
        this.ctx.releaseRenderTexture(this._renderTexture);
      }
      this._renderTexture = null;
      this._renderTextureReused = false;
      this.updateResultTexture();
    }
  }
  reuseTextureAsRenderTexture(nativeTexture) {
    if (this._renderTexture !== nativeTexture) {
      this.releaseRenderTexture();
      this._renderTexture = nativeTexture;
      this._renderTextureReused = true;
    }
  }
  hasRenderTexture() {
    return !!this._renderTexture;
  }
  getRenderTexture() {
    if (!this._renderTexture) {
      this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);
      this._renderTextureReused = false;
    }
    return this._renderTexture;
  }
  getResultTexture() {
    return this._renderTexture;
  }
}
class ElementCore {
  constructor(element) {
    this._element = element;
    this.ctx = element.stage.ctx;
    this._recalc = 0;
    this._parent = null;
    this._onUpdate = null;
    this._pRecalc = 0;
    this._worldContext = new ElementCoreContext();
    this._hasUpdates = false;
    this._localAlpha = 1;
    this._onAfterCalcs = null;
    this._onAfterUpdate = null;
    this._localPx = 0;
    this._localPy = 0;
    this._localTa = 1;
    this._localTb = 0;
    this._localTc = 0;
    this._localTd = 1;
    this._isComplex = false;
    this._dimsUnknown = false;
    this._clipping = false;
    this._zSort = false;
    this._outOfBounds = 0;
    this._displayedTextureSource = null;
    this._zContextUsage = 0;
    this._children = null;
    this._hasRenderUpdates = 0;
    this._zIndexedChildren = null;
    this._renderContext = this._worldContext;
    this.renderState = this.ctx.renderState;
    this._scissor = null;
    this._shaderOwner = null;
    this._updateTreeOrder = 0;
    this._colorUl = this._colorUr = this._colorBl = this._colorBr = 4294967295;
    this._x = 0;
    this._y = 0;
    this._w = 0;
    this._h = 0;
    this._optFlags = 0;
    this._funcX = null;
    this._funcY = null;
    this._funcW = null;
    this._funcH = null;
    this._scaleX = 1;
    this._scaleY = 1;
    this._pivotX = 0.5;
    this._pivotY = 0.5;
    this._mountX = 0;
    this._mountY = 0;
    this._rotation = 0;
    this._alpha = 1;
    this._visible = true;
    this._ulx = 0;
    this._uly = 0;
    this._brx = 1;
    this._bry = 1;
    this._zIndex = 0;
    this._forceZIndexContext = false;
    this._zParent = null;
    this._isRoot = false;
    this._zIndexResort = false;
    this._shader = null;
    this._renderToTextureEnabled = false;
    this._texturizer = null;
    this._useRenderToTexture = false;
    this._boundsMargin = null;
    this._recBoundsMargin = null;
    this._withinBoundsMargin = false;
    this._viewport = null;
    this._clipbox = true;
    this.render = this._renderSimple;
    this._layout = null;
  }
  get offsetX() {
    if (this._funcX) {
      return this._funcX;
    } else {
      if (this.hasFlexLayout()) {
        return this._layout.originalX;
      } else {
        return this._x;
      }
    }
  }
  set offsetX(v) {
    if (Utils$1.isFunction(v)) {
      this.funcX = v;
    } else {
      this._disableFuncX();
      if (this.hasFlexLayout()) {
        this.x += v - this._layout.originalX;
        this._layout.setOriginalXWithoutUpdatingLayout(v);
      } else {
        this.x = v;
      }
    }
  }
  get x() {
    return this._x;
  }
  set x(v) {
    if (v !== this._x) {
      this._updateLocalTranslateDelta(v - this._x, 0);
      this._x = v;
    }
  }
  get funcX() {
    return this._optFlags & 1 ? this._funcX : null;
  }
  set funcX(v) {
    if (this._funcX !== v) {
      this._optFlags |= 1;
      this._funcX = v;
      if (this.hasFlexLayout()) {
        this._layout.setOriginalXWithoutUpdatingLayout(0);
        this.layout.forceLayout();
      } else {
        this._x = 0;
        this._triggerRecalcTranslate();
      }
    }
  }
  _disableFuncX() {
    this._optFlags = this._optFlags & 65535 - 1;
    this._funcX = null;
  }
  get offsetY() {
    if (this._funcY) {
      return this._funcY;
    } else {
      if (this.hasFlexLayout()) {
        return this._layout.originalY;
      } else {
        return this._y;
      }
    }
  }
  set offsetY(v) {
    if (Utils$1.isFunction(v)) {
      this.funcY = v;
    } else {
      this._disableFuncY();
      if (this.hasFlexLayout()) {
        this.y += v - this._layout.originalY;
        this._layout.setOriginalYWithoutUpdatingLayout(v);
      } else {
        this.y = v;
      }
    }
  }
  get y() {
    return this._y;
  }
  set y(v) {
    if (v !== this._y) {
      this._updateLocalTranslateDelta(0, v - this._y);
      this._y = v;
    }
  }
  get funcY() {
    return this._optFlags & 2 ? this._funcY : null;
  }
  set funcY(v) {
    if (this._funcY !== v) {
      this._optFlags |= 2;
      this._funcY = v;
      if (this.hasFlexLayout()) {
        this._layout.setOriginalYWithoutUpdatingLayout(0);
        this.layout.forceLayout();
      } else {
        this._y = 0;
        this._triggerRecalcTranslate();
      }
    }
  }
  _disableFuncY() {
    this._optFlags = this._optFlags & 65535 - 2;
    this._funcY = null;
  }
  get funcW() {
    return this._optFlags & 4 ? this._funcW : null;
  }
  set funcW(v) {
    if (this._funcW !== v) {
      this._optFlags |= 4;
      this._funcW = v;
      if (this.hasFlexLayout()) {
        this._layout._originalWidth = 0;
        this.layout.changedDimensions(true, false);
      } else {
        this._w = 0;
        this._triggerRecalcTranslate();
      }
    }
  }
  disableFuncW() {
    this._optFlags = this._optFlags & 65535 - 4;
    this._funcW = null;
  }
  get funcH() {
    return this._optFlags & 8 ? this._funcH : null;
  }
  set funcH(v) {
    if (this._funcH !== v) {
      this._optFlags |= 8;
      this._funcH = v;
      if (this.hasFlexLayout()) {
        this._layout._originalHeight = 0;
        this.layout.changedDimensions(false, true);
      } else {
        this._h = 0;
        this._triggerRecalcTranslate();
      }
    }
  }
  disableFuncH() {
    this._optFlags = this._optFlags & 65535 - 8;
    this._funcH = null;
  }
  get w() {
    return this._w;
  }
  getRenderWidth() {
    if (this.hasFlexLayout()) {
      return this._layout.originalWidth;
    } else {
      return this._w;
    }
  }
  get h() {
    return this._h;
  }
  getRenderHeight() {
    if (this.hasFlexLayout()) {
      return this._layout.originalHeight;
    } else {
      return this._h;
    }
  }
  get scaleX() {
    return this._scaleX;
  }
  set scaleX(v) {
    if (this._scaleX !== v) {
      this._scaleX = v;
      this._updateLocalTransform();
    }
  }
  get scaleY() {
    return this._scaleY;
  }
  set scaleY(v) {
    if (this._scaleY !== v) {
      this._scaleY = v;
      this._updateLocalTransform();
    }
  }
  get scale() {
    return this.scaleX;
  }
  set scale(v) {
    if (this._scaleX !== v || this._scaleY !== v) {
      this._scaleX = v;
      this._scaleY = v;
      this._updateLocalTransform();
    }
  }
  get pivotX() {
    return this._pivotX;
  }
  set pivotX(v) {
    if (this._pivotX !== v) {
      this._pivotX = v;
      this._updateLocalTranslate();
    }
  }
  get pivotY() {
    return this._pivotY;
  }
  set pivotY(v) {
    if (this._pivotY !== v) {
      this._pivotY = v;
      this._updateLocalTranslate();
    }
  }
  get pivot() {
    return this._pivotX;
  }
  set pivot(v) {
    if (this._pivotX !== v || this._pivotY !== v) {
      this._pivotX = v;
      this._pivotY = v;
      this._updateLocalTranslate();
    }
  }
  get mountX() {
    return this._mountX;
  }
  set mountX(v) {
    if (this._mountX !== v) {
      this._mountX = v;
      this._updateLocalTranslate();
    }
  }
  get mountY() {
    return this._mountY;
  }
  set mountY(v) {
    if (this._mountY !== v) {
      this._mountY = v;
      this._updateLocalTranslate();
    }
  }
  get mount() {
    return this._mountX;
  }
  set mount(v) {
    if (this._mountX !== v || this._mountY !== v) {
      this._mountX = v;
      this._mountY = v;
      this._updateLocalTranslate();
    }
  }
  get rotation() {
    return this._rotation;
  }
  set rotation(v) {
    if (this._rotation !== v) {
      this._rotation = v;
      this._updateLocalTransform();
    }
  }
  get alpha() {
    return this._alpha;
  }
  set alpha(v) {
    v = v > 1 ? 1 : v < 1e-14 ? 0 : v;
    if (this._alpha !== v) {
      let prev = this._alpha;
      this._alpha = v;
      this._updateLocalAlpha();
      if (prev === 0 !== (v === 0)) {
        this._element._updateEnabledFlag();
      }
    }
  }
  get visible() {
    return this._visible;
  }
  set visible(v) {
    if (this._visible !== v) {
      this._visible = v;
      this._updateLocalAlpha();
      this._element._updateEnabledFlag();
      if (this.hasFlexLayout()) {
        this.layout.setVisible(v);
      }
    }
  }
  _updateLocalTransform() {
    if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {
      let _sr = Math.sin(this._rotation);
      let _cr = Math.cos(this._rotation);
      this._setLocalTransform(
        _cr * this._scaleX,
        -_sr * this._scaleY,
        _sr * this._scaleX,
        _cr * this._scaleY
      );
    } else {
      this._setLocalTransform(
        this._scaleX,
        0,
        0,
        this._scaleY
      );
    }
    this._updateLocalTranslate();
  }
  _updateLocalTranslate() {
    this._recalcLocalTranslate();
    this._triggerRecalcTranslate();
  }
  _recalcLocalTranslate() {
    let pivotXMul = this._pivotX * this._w;
    let pivotYMul = this._pivotY * this._h;
    let px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;
    let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;
    px -= this._mountX * this._w;
    py -= this._mountY * this._h;
    this._localPx = px;
    this._localPy = py;
  }
  _updateLocalTranslateDelta(dx, dy) {
    this._addLocalTranslate(dx, dy);
  }
  _updateLocalAlpha() {
    this._setLocalAlpha(this._visible ? this._alpha : 0);
  }
  setHasRenderUpdates(type) {
    if (this._worldContext.alpha) {
      let p = this;
      p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);
      while ((p = p._parent) && p._hasRenderUpdates !== 3) {
        p._hasRenderUpdates = 3;
      }
    }
  }
  _setRecalc(type) {
    this._recalc |= type;
    this._setHasUpdates();
    if (this._parent) {
      this._parent.setHasRenderUpdates(3);
    }
  }
  _setHasUpdates() {
    let p = this;
    while (p && !p._hasUpdates) {
      p._hasUpdates = true;
      p = p._parent;
    }
  }
  getParent() {
    return this._parent;
  }
  setParent(parent) {
    if (parent !== this._parent) {
      let prevIsZContext = this.isZContext();
      let prevParent = this._parent;
      this._parent = parent;
      if (this._layout || parent && parent.isFlexContainer()) {
        this.layout.setParent(prevParent, parent);
      }
      if (prevParent) {
        prevParent.setHasRenderUpdates(3);
      }
      this._setRecalc(1 + 2 + 4);
      if (this._parent) {
        this._parent._setHasUpdates();
      }
      if (this._zIndex === 0) {
        this.setZParent(parent);
      } else {
        this.setZParent(parent ? parent.findZContext() : null);
      }
      if (prevIsZContext !== this.isZContext()) {
        if (!this.isZContext()) {
          this.disableZContext();
        } else {
          this.enableZContext(prevParent.findZContext());
        }
      }
      this._zIndexResort = true;
      if (this._zParent) {
        this._zParent.enableZSort();
      }
      if (!this._shader) {
        let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;
        if (newShaderOwner !== this._shaderOwner) {
          this.setHasRenderUpdates(1);
          this._setShaderOwnerRecursive(newShaderOwner);
        }
      }
    }
  }
  enableZSort(force = false) {
    if (!this._zSort && this._zContextUsage > 0) {
      this._zSort = true;
      if (force) {
        this.ctx.forceZSort(this);
      }
    }
  }
  addChildAt(index, child) {
    if (!this._children)
      this._children = [];
    this._children.splice(index, 0, child);
    child.setParent(this);
  }
  setChildAt(index, child) {
    if (!this._children)
      this._children = [];
    this._children[index].setParent(null);
    this._children[index] = child;
    child.setParent(this);
  }
  removeChildAt(index) {
    let child = this._children[index];
    this._children.splice(index, 1);
    child.setParent(null);
  }
  removeChildren() {
    if (this._children) {
      for (let i = 0, n = this._children.length; i < n; i++) {
        this._children[i].setParent(null);
      }
      this._children.splice(0);
      if (this._zIndexedChildren) {
        this._zIndexedChildren.splice(0);
      }
    }
  }
  syncChildren(removed, added, order) {
    this._children = order;
    for (let i = 0, n = removed.length; i < n; i++) {
      removed[i].setParent(null);
    }
    for (let i = 0, n = added.length; i < n; i++) {
      added[i].setParent(this);
    }
  }
  moveChild(fromIndex, toIndex) {
    let c = this._children[fromIndex];
    this._children.splice(fromIndex, 1);
    this._children.splice(toIndex, 0, c);
    this._zIndexResort = true;
    if (this._zParent) {
      this._zParent.enableZSort();
    }
  }
  _setLocalTransform(a, b, c, d) {
    this._setRecalc(4);
    this._localTa = a;
    this._localTb = b;
    this._localTc = c;
    this._localTd = d;
    this._isComplex = b !== 0 || c !== 0 || a < 0 || d < 0;
  }
  _addLocalTranslate(dx, dy) {
    this._localPx += dx;
    this._localPy += dy;
    this._triggerRecalcTranslate();
  }
  _setLocalAlpha(a) {
    if (!this._worldContext.alpha && (this._parent && this._parent._worldContext.alpha && a)) {
      this._setRecalc(1 + 128);
    } else {
      this._setRecalc(1);
    }
    if (a < 1e-14) {
      a = 0;
    }
    this._localAlpha = a;
  }
  setDimensions(w, h, isEstimate = this._dimsUnknown) {
    this._dimsUnknown = isEstimate;
    if (this.hasFlexLayout()) {
      this._layout.originalWidth = w;
      this._layout.originalHeight = h;
    } else {
      if (this._w !== w || this._h !== h) {
        this._updateDimensions(w, h);
        return true;
      }
    }
    return false;
  }
  _updateDimensions(w, h) {
    if (this._w !== w || this._h !== h) {
      this._w = w;
      this._h = h;
      this._triggerRecalcTranslate();
      if (this._texturizer) {
        this._texturizer.releaseRenderTexture();
        this._texturizer.updateResultTexture();
      }
      this._updateLocalTranslate();
    }
  }
  setTextureCoords(ulx, uly, brx, bry) {
    this.setHasRenderUpdates(3);
    this._ulx = ulx;
    this._uly = uly;
    this._brx = brx;
    this._bry = bry;
  }
  get displayedTextureSource() {
    return this._displayedTextureSource;
  }
  setDisplayedTextureSource(textureSource) {
    this.setHasRenderUpdates(3);
    this._displayedTextureSource = textureSource;
  }
  get isRoot() {
    return this._isRoot;
  }
  setAsRoot() {
    this._parent = new ElementCore(this._element);
    this._parent._hasRenderUpdates = 3;
    this._parent._hasUpdates = true;
    this._isRoot = true;
    this.ctx.root = this;
    this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];
    this._parent._scissor = this._parent._viewport;
    this._parent._recBoundsMargin = null;
    this._setRecalc(1 + 2 + 4);
  }
  isAncestorOf(c) {
    let p = c;
    while (p = p._parent) {
      if (this === p) {
        return true;
      }
    }
    return false;
  }
  isZContext() {
    return this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent;
  }
  findZContext() {
    if (this.isZContext()) {
      return this;
    } else {
      return this._parent.findZContext();
    }
  }
  setZParent(newZParent) {
    if (this._zParent !== newZParent) {
      if (this._zParent !== null) {
        if (this._zIndex !== 0) {
          this._zParent.decZContextUsage();
        }
        this._zParent.enableZSort();
      }
      if (newZParent !== null) {
        let hadZContextUsage = newZParent._zContextUsage > 0;
        if (this._zIndex !== 0) {
          newZParent.incZContextUsage();
        }
        if (newZParent._zContextUsage > 0) {
          if (!hadZContextUsage && this._parent === newZParent)
            ;
          else {
            newZParent._zIndexedChildren.push(this);
          }
          newZParent.enableZSort();
        }
      }
      this._zParent = newZParent;
      this._zIndexResort = true;
    }
  }
  incZContextUsage() {
    this._zContextUsage++;
    if (this._zContextUsage === 1) {
      if (!this._zIndexedChildren) {
        this._zIndexedChildren = [];
      }
      if (this._children) {
        for (let i = 0, n = this._children.length; i < n; i++) {
          this._zIndexedChildren.push(this._children[i]);
        }
        this._zSort = false;
      }
    }
  }
  decZContextUsage() {
    this._zContextUsage--;
    if (this._zContextUsage === 0) {
      this._zSort = false;
      this._zIndexedChildren.splice(0);
    }
  }
  get zIndex() {
    return this._zIndex;
  }
  set zIndex(zIndex) {
    if (this._zIndex !== zIndex) {
      this.setHasRenderUpdates(1);
      let newZParent = this._zParent;
      let prevIsZContext = this.isZContext();
      if (zIndex === 0 && this._zIndex !== 0) {
        if (this._parent === this._zParent) {
          if (this._zParent) {
            this._zParent.decZContextUsage();
          }
        } else {
          newZParent = this._parent;
        }
      } else if (zIndex !== 0 && this._zIndex === 0) {
        newZParent = this._parent ? this._parent.findZContext() : null;
        if (newZParent === this._zParent) {
          if (this._zParent) {
            this._zParent.incZContextUsage();
            this._zParent.enableZSort();
          }
        }
      } else if (zIndex !== this._zIndex) {
        if (this._zParent && this._zParent._zContextUsage) {
          this._zParent.enableZSort();
        }
      }
      if (newZParent !== this._zParent) {
        this.setZParent(null);
      }
      this._zIndex = zIndex;
      if (newZParent !== this._zParent) {
        this.setZParent(newZParent);
      }
      if (prevIsZContext !== this.isZContext()) {
        if (!this.isZContext()) {
          this.disableZContext();
        } else {
          this.enableZContext(this._parent.findZContext());
        }
      }
      this._zIndexResort = true;
      if (this._zParent) {
        this._zParent.enableZSort();
      }
    }
  }
  get forceZIndexContext() {
    return this._forceZIndexContext;
  }
  set forceZIndexContext(v) {
    this.setHasRenderUpdates(1);
    let prevIsZContext = this.isZContext();
    this._forceZIndexContext = v;
    if (prevIsZContext !== this.isZContext()) {
      if (!this.isZContext()) {
        this.disableZContext();
      } else {
        this.enableZContext(this._parent.findZContext());
      }
    }
  }
  enableZContext(prevZContext) {
    if (prevZContext && prevZContext._zContextUsage > 0) {
      const results = this._getZIndexedDescs();
      results.forEach((c) => {
        if (this.isAncestorOf(c) && c._zIndex !== 0) {
          c.setZParent(this);
        }
      });
    }
  }
  _getZIndexedDescs() {
    const results = [];
    if (this._children) {
      for (let i = 0, n = this._children.length; i < n; i++) {
        this._children[i]._getZIndexedDescsRec(results);
      }
    }
    return results;
  }
  _getZIndexedDescsRec(results) {
    if (this._zIndex) {
      results.push(this);
    } else if (this._children && !this.isZContext()) {
      for (let i = 0, n = this._children.length; i < n; i++) {
        this._children[i]._getZIndexedDescsRec(results);
      }
    }
  }
  disableZContext() {
    if (this._zContextUsage > 0) {
      let newZParent = this._parent.findZContext();
      if (this._zSort) {
        this.sortZIndexedChildren();
      }
      this._zIndexedChildren.slice().forEach(function(c) {
        if (c._zIndex !== 0) {
          c.setZParent(newZParent);
        }
      });
    }
  }
  get colorUl() {
    return this._colorUl;
  }
  set colorUl(color) {
    if (this._colorUl !== color) {
      this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);
      this._colorUl = color;
    }
  }
  get colorUr() {
    return this._colorUr;
  }
  set colorUr(color) {
    if (this._colorUr !== color) {
      this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);
      this._colorUr = color;
    }
  }
  get colorBl() {
    return this._colorBl;
  }
  set colorBl(color) {
    if (this._colorBl !== color) {
      this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);
      this._colorBl = color;
    }
  }
  get colorBr() {
    return this._colorBr;
  }
  set colorBr(color) {
    if (this._colorBr !== color) {
      this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);
      this._colorBr = color;
    }
  }
  set onUpdate(f) {
    this._onUpdate = f;
    this._setRecalc(7);
  }
  set onAfterUpdate(f) {
    this._onAfterUpdate = f;
    this._setRecalc(7);
  }
  set onAfterCalcs(f) {
    this._onAfterCalcs = f;
    this._setRecalc(7);
  }
  get shader() {
    return this._shader;
  }
  set shader(v) {
    this.setHasRenderUpdates(1);
    let prevShader = this._shader;
    this._shader = v;
    if (!v && prevShader) {
      let newShaderOwner = this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null;
      this._setShaderOwnerRecursive(newShaderOwner);
    } else if (v) {
      this._setShaderOwnerRecursive(this);
    }
  }
  get activeShader() {
    return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;
  }
  get activeShaderOwner() {
    return this._shaderOwner;
  }
  get clipping() {
    return this._clipping;
  }
  set clipping(v) {
    if (this._clipping !== v) {
      this._clipping = v;
      this._setRecalc(1 + 2);
    }
  }
  get clipbox() {
    return this._clipbox;
  }
  set clipbox(v) {
    this._clipbox = v;
  }
  _setShaderOwnerRecursive(elementCore) {
    this._shaderOwner = elementCore;
    if (this._children && !this._renderToTextureEnabled) {
      for (let i = 0, n = this._children.length; i < n; i++) {
        let c = this._children[i];
        if (!c._shader) {
          c._setShaderOwnerRecursive(elementCore);
          c._hasRenderUpdates = 3;
        }
      }
    }
  }
  _setShaderOwnerChildrenRecursive(elementCore) {
    if (this._children) {
      for (let i = 0, n = this._children.length; i < n; i++) {
        let c = this._children[i];
        if (!c._shader) {
          c._setShaderOwnerRecursive(elementCore);
          c._hasRenderUpdates = 3;
        }
      }
    }
  }
  _hasRenderContext() {
    return this._renderContext !== this._worldContext;
  }
  get renderContext() {
    return this._renderContext;
  }
  updateRenderToTextureEnabled() {
    let v = this.texturizer._enabled;
    if (v) {
      this._enableRenderToTexture();
    } else {
      this._disableRenderToTexture();
      this._texturizer.releaseRenderTexture();
    }
  }
  _enableRenderToTexture() {
    if (!this._renderToTextureEnabled) {
      let prevIsZContext = this.isZContext();
      this._renderToTextureEnabled = true;
      this._renderContext = new ElementCoreContext();
      this._setShaderOwnerChildrenRecursive(null);
      if (!prevIsZContext) {
        this.enableZContext(this._parent ? this._parent.findZContext() : null);
      }
      this.setHasRenderUpdates(3);
      this._setRecalc(7);
      this.render = this._renderAdvanced;
    }
  }
  _disableRenderToTexture() {
    if (this._renderToTextureEnabled) {
      this._renderToTextureEnabled = false;
      this._setShaderOwnerChildrenRecursive(this._shaderOwner);
      this._renderContext = this._worldContext;
      if (!this.isZContext()) {
        this.disableZContext();
      }
      this._setRecalc(7);
      this.setHasRenderUpdates(3);
      this.render = this._renderSimple;
    }
  }
  isWhite() {
    return this._colorUl === 4294967295 && this._colorUr === 4294967295 && this._colorBl === 4294967295 && this._colorBr === 4294967295;
  }
  hasSimpleTexCoords() {
    return this._ulx === 0 && this._uly === 0 && this._brx === 1 && this._bry === 1;
  }
  _stashTexCoords() {
    this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];
    this._ulx = 0;
    this._uly = 0;
    this._brx = 1;
    this._bry = 1;
  }
  _unstashTexCoords() {
    this._ulx = this._stashedTexCoords[0];
    this._uly = this._stashedTexCoords[1];
    this._brx = this._stashedTexCoords[2];
    this._bry = this._stashedTexCoords[3];
    this._stashedTexCoords = null;
  }
  _stashColors() {
    this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];
    this._colorUl = 4294967295;
    this._colorUr = 4294967295;
    this._colorBr = 4294967295;
    this._colorBl = 4294967295;
  }
  _unstashColors() {
    this._colorUl = this._stashedColors[0];
    this._colorUr = this._stashedColors[1];
    this._colorBr = this._stashedColors[2];
    this._colorBl = this._stashedColors[3];
    this._stashedColors = null;
  }
  isVisible() {
    return this._localAlpha > 1e-14;
  }
  get outOfBounds() {
    return this._outOfBounds;
  }
  set boundsMargin(v) {
    this._boundsMargin = v ? v.slice() : null;
    this._triggerRecalcTranslate();
  }
  get boundsMargin() {
    return this._boundsMargin;
  }
  update() {
    this._recalc |= this._parent._pRecalc;
    if (this._layout && this._layout.isEnabled()) {
      if (this._recalc & 256) {
        this._layout.layoutFlexTree();
      }
    } else if (this._recalc & 2 && this._optFlags) {
      this._applyRelativeDimFuncs();
    }
    if (this._onUpdate) {
      this._hasUpdates = true;
      this._onUpdate(this.element, this);
    }
    const pw = this._parent._worldContext;
    let w = this._worldContext;
    const visible = pw.alpha && this._localAlpha;
    if (this._hasUpdates || this._recalc && visible || w.alpha && !visible) {
      let recalc = this._recalc;
      if (recalc & 1) {
        if (!w.alpha && visible) {
          this._hasRenderUpdates = 3;
        }
        w.alpha = pw.alpha * this._localAlpha;
        if (w.alpha < 1e-14) {
          w.alpha = 0;
        }
      }
      if (recalc & 6) {
        w.px = pw.px + this._localPx * pw.ta;
        w.py = pw.py + this._localPy * pw.td;
        if (pw.tb !== 0)
          w.px += this._localPy * pw.tb;
        if (pw.tc !== 0)
          w.py += this._localPx * pw.tc;
      }
      if (recalc & 4) {
        w.ta = this._localTa * pw.ta;
        w.tb = this._localTd * pw.tb;
        w.tc = this._localTa * pw.tc;
        w.td = this._localTd * pw.td;
        if (this._isComplex) {
          w.ta += this._localTc * pw.tb;
          w.tb += this._localTb * pw.ta;
          w.tc += this._localTc * pw.td;
          w.td += this._localTb * pw.tc;
        }
      }
      const pr = this._parent._renderContext;
      if (this._parent._hasRenderContext()) {
        const init = this._renderContext === this._worldContext;
        if (init) {
          this._renderContext = new ElementCoreContext();
        }
        const r2 = this._renderContext;
        if (init || recalc & 1) {
          r2.alpha = pr.alpha * this._localAlpha;
          if (r2.alpha < 1e-14) {
            r2.alpha = 0;
          }
        }
        if (init || recalc & 6) {
          r2.px = pr.px + this._localPx * pr.ta;
          r2.py = pr.py + this._localPy * pr.td;
          if (pr.tb !== 0)
            r2.px += this._localPy * pr.tb;
          if (pr.tc !== 0)
            r2.py += this._localPx * pr.tc;
        }
        if (init) {
          recalc |= 2;
        }
        if (init || recalc & 4) {
          r2.ta = this._localTa * pr.ta;
          r2.tb = this._localTd * pr.tb;
          r2.tc = this._localTa * pr.tc;
          r2.td = this._localTd * pr.td;
          if (this._isComplex) {
            r2.ta += this._localTc * pr.tb;
            r2.tb += this._localTb * pr.ta;
            r2.tc += this._localTc * pr.td;
            r2.td += this._localTb * pr.tc;
          }
        }
      } else {
        this._renderContext = this._worldContext;
      }
      if (this.ctx.updateTreeOrder === -1) {
        this.ctx.updateTreeOrder = this._updateTreeOrder + 1;
      } else {
        this._updateTreeOrder = this.ctx.updateTreeOrder++;
      }
      const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();
      if (this._useRenderToTexture !== useRenderToTexture) {
        this._recalc |= 2 + 4;
        recalc |= 2;
        if (!this._useRenderToTexture) {
          this._texturizer.release();
        }
      }
      this._useRenderToTexture = useRenderToTexture;
      const r = this._renderContext;
      const bboxW = this._dimsUnknown ? 2048 : this._w;
      const bboxH = this._dimsUnknown ? 2048 : this._h;
      let sx, sy, ex, ey;
      const rComplex = r.tb !== 0 || r.tc !== 0 || r.ta < 0 || r.td < 0;
      if (rComplex) {
        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;
        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;
        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;
        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;
      } else {
        sx = r.px;
        ex = r.px + r.ta * bboxW;
        sy = r.py;
        ey = r.py + r.td * bboxH;
      }
      if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {
        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;
        const ny = this._x * pr.tc + this._y * pr.td + pr.py;
        if (nx < sx)
          sx = nx;
        if (ny < sy)
          sy = ny;
        if (nx > ex)
          ex = nx;
        if (ny > ey)
          ey = ny;
      }
      if (recalc & 6 || !this._scissor) {
        if (this._clipping && r.isSquare()) {
          const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;
          if (area) {
            const lx = Math.max(area[0], sx);
            const ly = Math.max(area[1], sy);
            this._scissor = [
              lx,
              ly,
              Math.min(area[2] + area[0], ex) - lx,
              Math.min(area[3] + area[1], ey) - ly
            ];
          } else {
            this._scissor = [sx, sy, ex - sx, ey - sy];
          }
        } else {
          this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;
        }
      }
      if (this._boundsMargin) {
        this._recBoundsMargin = this._boundsMargin;
      } else {
        this._recBoundsMargin = this._parent._recBoundsMargin;
      }
      if (this._onAfterCalcs) {
        if (this._onAfterCalcs(this.element)) {
          if (rComplex) {
            sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;
            ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;
            sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;
            ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;
          } else {
            sx = r.px;
            ex = r.px + r.ta * bboxW;
            sy = r.py;
            ey = r.py + r.td * bboxH;
          }
          if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {
            const nx = this._x * pr.ta + this._y * pr.tb + pr.px;
            const ny = this._x * pr.tc + this._y * pr.td + pr.py;
            if (nx < sx)
              sx = nx;
            if (ny < sy)
              sy = ny;
            if (nx > ex)
              ex = nx;
            if (ny > ey)
              ey = ny;
          }
        }
      }
      if (this._parent._outOfBounds === 2) {
        this._outOfBounds = 2;
        if (this._withinBoundsMargin) {
          this._withinBoundsMargin = false;
          this.element._disableWithinBoundsMargin();
        }
      } else {
        if (recalc & 6) {
          this._outOfBounds = 0;
          let withinMargin = true;
          if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {
            if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {
              this._outOfBounds = 2;
            } else {
              if (this._scissor[0] > ex || this._scissor[1] > ey || sx > this._scissor[0] + this._scissor[2] || sy > this._scissor[1] + this._scissor[3]) {
                this._outOfBounds = 1;
              }
              if (this._outOfBounds) {
                if (this._clipping || this._useRenderToTexture || this._clipbox && (bboxW && bboxH)) {
                  this._outOfBounds = 2;
                }
              }
            }
            withinMargin = this._outOfBounds === 0;
            if (!withinMargin) {
              if (this._recBoundsMargin) {
                withinMargin = !(ex < this._scissor[0] - this._recBoundsMargin[2] || ey < this._scissor[1] - this._recBoundsMargin[3] || sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0] || sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]);
              } else {
                withinMargin = !(ex < this._scissor[0] - 100 || ey < this._scissor[1] - 100 || sx > this._scissor[0] + this._scissor[2] + 100 || sy > this._scissor[1] + this._scissor[3] + 100);
              }
              if (withinMargin && this._outOfBounds === 2) {
                this._outOfBounds = 1;
              }
            }
          }
          if (this._withinBoundsMargin !== withinMargin) {
            this._withinBoundsMargin = withinMargin;
            if (this._withinBoundsMargin) {
              this._hasUpdates = true;
              const recalc2 = this._recalc;
              this._recalc = 0;
              this.element._enableWithinBoundsMargin();
              if (this._recalc) {
                return this.update();
              }
              this._recalc = recalc2;
            } else {
              this.element._disableWithinBoundsMargin();
            }
          }
        }
      }
      if (this._useRenderToTexture) {
        if (this._viewport) {
          this._viewport[2] = bboxW;
          this._viewport[3] = bboxH;
        } else {
          this._viewport = [0, 0, bboxW, bboxH];
        }
      }
      this._pRecalc = this._recalc & 135;
      this._recalc = 0;
      this._hasUpdates = false;
      if (this._outOfBounds < 2) {
        if (this._useRenderToTexture) {
          if (this._worldContext.isIdentity()) {
            this._renderContext = this._worldContext;
          } else {
            this._renderContext = ElementCoreContext.IDENTITY;
          }
        }
        if (this._children) {
          for (let i = 0, n = this._children.length; i < n; i++) {
            this._children[i].update();
          }
        }
        if (this._useRenderToTexture) {
          this._renderContext = r;
        }
      } else {
        if (this._children) {
          for (let i = 0, n = this._children.length; i < n; i++) {
            if (this._children[i]._hasUpdates) {
              this._children[i].update();
            } else {
              this._children[i]._recalc |= this._pRecalc;
              this._children[i].updateOutOfBounds();
            }
          }
        }
      }
      if (this._onAfterUpdate) {
        this._onAfterUpdate(this.element);
      }
    } else {
      if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {
        this.ctx.updateTreeOrder = -1;
      } else {
        this.updateTreeOrder();
      }
    }
  }
  _applyRelativeDimFuncs() {
    if (this._optFlags & 1) {
      const x = this._funcX(this._parent.w);
      if (x !== this._x) {
        this._localPx += x - this._x;
        this._x = x;
      }
    }
    if (this._optFlags & 2) {
      const y = this._funcY(this._parent.h);
      if (y !== this._y) {
        this._localPy += y - this._y;
        this._y = y;
      }
    }
    let changedDims = false;
    if (this._optFlags & 4) {
      const w = this._funcW(this._parent.w);
      if (w !== this._w) {
        this._w = w;
        changedDims = true;
      }
    }
    if (this._optFlags & 8) {
      const h = this._funcH(this._parent.h);
      if (h !== this._h) {
        this._h = h;
        changedDims = true;
      }
    }
    if (changedDims) {
      this._recalcLocalTranslate();
      this.element.onDimensionsChanged(this._w, this._h);
    }
  }
  updateOutOfBounds() {
    if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {
      this._outOfBounds = 2;
      if (this._withinBoundsMargin) {
        this._withinBoundsMargin = false;
        this.element._disableWithinBoundsMargin();
      }
      if (this._children) {
        for (let i = 0, n = this._children.length; i < n; i++) {
          this._children[i].updateOutOfBounds();
        }
      }
    }
  }
  updateTreeOrder() {
    if (this._localAlpha && this._outOfBounds !== 2) {
      this._updateTreeOrder = this.ctx.updateTreeOrder++;
      if (this._children) {
        for (let i = 0, n = this._children.length; i < n; i++) {
          this._children[i].updateTreeOrder();
        }
      }
    }
  }
  _renderSimple() {
    this._hasRenderUpdates = 0;
    if (this._zSort) {
      this.sortZIndexedChildren();
    }
    if (this._outOfBounds < 2 && this._renderContext.alpha) {
      let renderState = this.renderState;
      if (this._outOfBounds === 0 && this._displayedTextureSource) {
        renderState.setShader(this.activeShader, this._shaderOwner);
        renderState.setScissor(this._scissor);
        this.renderState.addQuad(this);
      }
      if (this._children) {
        if (this._zContextUsage) {
          for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {
            this._zIndexedChildren[i].render();
          }
        } else {
          for (let i = 0, n = this._children.length; i < n; i++) {
            if (this._children[i]._zIndex === 0) {
              this._children[i].render();
            }
          }
        }
      }
    }
  }
  _renderAdvanced() {
    const hasRenderUpdates = this._hasRenderUpdates;
    this._hasRenderUpdates = 0;
    if (this._zSort) {
      this.sortZIndexedChildren();
    }
    if (this._outOfBounds < 2 && this._renderContext.alpha) {
      let renderState = this.renderState;
      let mustRenderChildren = true;
      let renderTextureInfo;
      let prevRenderTextureInfo;
      if (this._useRenderToTexture) {
        if (this._w === 0 || this._h === 0) {
          return;
        } else if (!this._texturizer.hasRenderTexture() || hasRenderUpdates >= 3) {
          this.ctx.renderToTextureCount++;
          renderState.setShader(renderState.defaultShader, this);
          prevRenderTextureInfo = renderState.renderTextureInfo;
          renderTextureInfo = {
            nativeTexture: null,
            offset: 0,
            w: this._w,
            h: this._h,
            empty: true,
            cleared: false,
            ignore: false,
            cache: false
          };
          if (this._texturizer.hasResultTexture() || !renderState.isCachingTexturizer && hasRenderUpdates < 3) {
            renderTextureInfo.cache = true;
            renderState.isCachingTexturizer = true;
          }
          if (!this._texturizer.hasResultTexture()) {
            this._texturizer.releaseRenderTexture();
          }
          renderState.setRenderTextureInfo(renderTextureInfo);
          renderState.setScissor(null);
          if (this._displayedTextureSource) {
            let r = this._renderContext;
            this._renderContext = ElementCoreContext.IDENTITY;
            this.renderState.addQuad(this);
            this._renderContext = r;
          }
        } else {
          mustRenderChildren = false;
        }
      } else {
        if (this._outOfBounds === 0 && this._displayedTextureSource) {
          renderState.setShader(this.activeShader, this._shaderOwner);
          renderState.setScissor(this._scissor);
          this.renderState.addQuad(this);
        }
      }
      if (mustRenderChildren && this._children) {
        if (this._zContextUsage) {
          for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {
            this._zIndexedChildren[i].render();
          }
        } else {
          for (let i = 0, n = this._children.length; i < n; i++) {
            if (this._children[i]._zIndex === 0) {
              this._children[i].render();
            }
          }
        }
      }
      if (this._useRenderToTexture) {
        let updateResultTexture = false;
        if (mustRenderChildren) {
          renderState.finishedRenderTexture();
          this._texturizer.empty = renderTextureInfo.empty;
          if (renderTextureInfo.empty) {
            this._texturizer.releaseRenderTexture();
          } else if (renderTextureInfo.nativeTexture) {
            this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);
            renderTextureInfo.ignore = true;
          } else {
            if (this._texturizer.renderTextureReused) {
              this._texturizer.releaseRenderTexture();
            }
            renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();
          }
          renderState.setRenderTextureInfo(prevRenderTextureInfo);
          updateResultTexture = true;
        }
        if (!this._texturizer.empty) {
          let resultTexture = this._texturizer.getResultTexture();
          if (updateResultTexture) {
            if (resultTexture) {
              resultTexture.update = renderState.stage.frameCounter;
            }
            this._texturizer.updateResultTexture();
          }
          if (!this._texturizer.renderOffscreen) {
            renderState.setShader(this.activeShader, this._shaderOwner);
            renderState.setScissor(this._scissor);
            const cache = !renderTextureInfo || renderTextureInfo.cache;
            renderState.setTexturizer(this._texturizer, cache);
            this._stashTexCoords();
            if (!this._texturizer.colorize)
              this._stashColors();
            this.renderState.addQuad(this, true);
            if (!this._texturizer.colorize)
              this._unstashColors();
            this._unstashTexCoords();
            renderState.setTexturizer(null);
          }
        }
      }
      if (renderTextureInfo && renderTextureInfo.cache) {
        renderState.isCachingTexturizer = false;
      }
    }
  }
  get zSort() {
    return this._zSort;
  }
  sortZIndexedChildren() {
    const n = this._zIndexedChildren.length;
    let ptr = 0;
    const a = this._zIndexedChildren;
    const b = [];
    for (let i = 0; i < n; i++) {
      if (a[i]._zParent === this) {
        if (a[i]._zIndexResort) {
          b.push(a[i]);
        } else {
          if (ptr !== i) {
            a[ptr] = a[i];
          }
          ptr++;
        }
      }
    }
    const m = b.length;
    if (m) {
      for (let j = 0; j < m; j++) {
        b[j]._zIndexResort = false;
      }
      b.sort(ElementCore.sortZIndexedChildren);
      const n2 = ptr;
      if (!n2) {
        ptr = 0;
        let j = 0;
        do {
          a[ptr++] = b[j++];
        } while (j < m);
        if (a.length > ptr) {
          a.splice(ptr);
        }
      } else {
        ptr = 0;
        let i = 0;
        let j = 0;
        const mergeResult = [];
        do {
          const v = a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex;
          const add = v > 0 ? b[j++] : a[i++];
          if (ptr === 0 || mergeResult[ptr - 1] !== add) {
            mergeResult[ptr++] = add;
          }
          if (i >= n2) {
            do {
              const add2 = b[j++];
              if (ptr === 0 || mergeResult[ptr - 1] !== add2) {
                mergeResult[ptr++] = add2;
              }
            } while (j < m);
            break;
          } else if (j >= m) {
            do {
              const add2 = a[i++];
              if (ptr === 0 || mergeResult[ptr - 1] !== add2) {
                mergeResult[ptr++] = add2;
              }
            } while (i < n2);
            break;
          }
        } while (true);
        this._zIndexedChildren = mergeResult;
      }
    } else {
      if (a.length > ptr) {
        a.splice(ptr);
      }
    }
    this._zSort = false;
  }
  get localTa() {
    return this._localTa;
  }
  get localTb() {
    return this._localTb;
  }
  get localTc() {
    return this._localTc;
  }
  get localTd() {
    return this._localTd;
  }
  get element() {
    return this._element;
  }
  get renderUpdates() {
    return this._hasRenderUpdates;
  }
  get texturizer() {
    if (!this._texturizer) {
      this._texturizer = new ElementTexturizer(this);
    }
    return this._texturizer;
  }
  getCornerPoints() {
    let w = this._worldContext;
    return [
      w.px,
      w.py,
      w.px + this._w * w.ta,
      w.py + this._w * w.tc,
      w.px + this._w * w.ta + this._h * w.tb,
      w.py + this._w * w.tc + this._h * w.td,
      w.px + this._h * w.tb,
      w.py + this._h * w.td
    ];
  }
  getRenderTextureCoords(relX, relY) {
    let r = this._renderContext;
    return [
      r.px + r.ta * relX + r.tb * relY,
      r.py + r.tc * relX + r.td * relY
    ];
  }
  getAbsoluteCoords(relX, relY) {
    let w = this._renderContext;
    return [
      w.px + w.ta * relX + w.tb * relY,
      w.py + w.tc * relX + w.td * relY
    ];
  }
  collectAtCoord(x, y, children) {
    if (this._renderContext.alpha === 0) {
      return;
    }
    if (this.inBound(x, y)) {
      if (this._scissor) {
        if (this.inScissor()) {
          children.push(this);
        }
      } else {
        children.push(this);
      }
    }
    if (this._children) {
      const j = this._children.length;
      for (let i = 0; i < j; i++) {
        this._children[i].collectAtCoord(x, y, children);
      }
    }
    return children.sort(ElementCore.sortZIndexedChildren);
  }
  inBound(tx, ty) {
    const c = this.getCornerPoints();
    return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];
  }
  inScissor() {
    const sc = this._scissor;
    const c = this.getCornerPoints();
    return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];
  }
  get layout() {
    this._ensureLayout();
    return this._layout;
  }
  get flex() {
    return this._layout ? this._layout.flex : null;
  }
  set flex(v) {
    this.layout.flex = v;
  }
  get flexItem() {
    return this._layout ? this._layout.flexItem : null;
  }
  set flexItem(v) {
    this.layout.flexItem = v;
  }
  isFlexItem() {
    return !!this._layout && this._layout.isFlexItemEnabled();
  }
  isFlexContainer() {
    return !!this._layout && this._layout.isFlexEnabled();
  }
  enableFlexLayout() {
    this._ensureLayout();
  }
  _ensureLayout() {
    if (!this._layout) {
      this._layout = new FlexTarget(this);
    }
  }
  disableFlexLayout() {
    this._triggerRecalcTranslate();
  }
  hasFlexLayout() {
    return this._layout && this._layout.isEnabled();
  }
  setLayout(x, y, w, h) {
    this.x = x;
    this.y = y;
    this._updateDimensions(w, h);
  }
  triggerLayout() {
    this._setRecalc(256);
  }
  _triggerRecalcTranslate() {
    this._setRecalc(2);
  }
}
class ElementCoreContext {
  constructor() {
    this.alpha = 1;
    this.px = 0;
    this.py = 0;
    this.ta = 1;
    this.tb = 0;
    this.tc = 0;
    this.td = 1;
  }
  isIdentity() {
    return this.alpha === 1 && this.px === 0 && this.py === 0 && this.ta === 1 && this.tb === 0 && this.tc === 0 && this.td === 1;
  }
  isSquare() {
    return this.tb === 0 && this.tc === 0;
  }
}
ElementCoreContext.IDENTITY = new ElementCoreContext();
ElementCore.sortZIndexedChildren = function(a, b) {
  return a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex;
};
class EventEmitter {
  constructor() {
    this._hasEventListeners = false;
  }
  on(name, listener) {
    if (!this._hasEventListeners) {
      this._eventFunction = {};
      this._eventListeners = {};
      this._hasEventListeners = true;
    }
    const current = this._eventFunction[name];
    if (!current) {
      this._eventFunction[name] = listener;
    } else {
      if (this._eventFunction[name] !== EventEmitter.combiner) {
        this._eventListeners[name] = [this._eventFunction[name], listener];
        this._eventFunction[name] = EventEmitter.combiner;
      } else {
        this._eventListeners[name].push(listener);
      }
    }
  }
  once(name, listener) {
    const wrapper = (arg1, arg2, arg3) => {
      listener(arg1, arg2, arg3);
      this.off(name, wrapper);
    };
    wrapper.__originalFunc = listener;
    this.on(name, wrapper);
  }
  has(name, listener) {
    if (this._hasEventListeners) {
      const current = this._eventFunction[name];
      if (current) {
        if (current === EventEmitter.combiner) {
          const listeners = this._eventListeners[name];
          for (const l of listeners) {
            if (l === listener || l.__originalFunc == listener) {
              return true;
            }
          }
        } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {
          return true;
        }
      }
    }
    return false;
  }
  off(name, listener) {
    if (this._hasEventListeners) {
      const current = this._eventFunction[name];
      if (current) {
        if (current === EventEmitter.combiner) {
          const listeners = this._eventListeners[name];
          let index = listeners.indexOf(listener);
          if (index >= 0) {
            listeners.splice(index, 1);
          }
          index = listeners.map((l) => l.__originalFunc).indexOf(listener);
          if (index >= 0) {
            listeners.splice(index, 1);
          }
          if (listeners.length === 1) {
            this._eventFunction[name] = listeners[0];
            this._eventListeners[name] = void 0;
          }
        } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {
          this._eventFunction[name] = void 0;
        }
      }
    }
  }
  removeListener(name, listener) {
    this.off(name, listener);
  }
  emit(name, arg1, arg2, arg3) {
    if (this._hasEventListeners) {
      const func = this._eventFunction[name];
      if (func) {
        if (func === EventEmitter.combiner) {
          func(this, name, arg1, arg2, arg3);
        } else {
          func(arg1, arg2, arg3);
        }
      }
    }
  }
  listenerCount(name) {
    if (this._hasEventListeners) {
      const func = this._eventFunction[name];
      if (func) {
        if (func === EventEmitter.combiner) {
          return this._eventListeners[name].length;
        } else {
          return 1;
        }
      }
    }
    return 0;
  }
  removeAllListeners(name) {
    if (this._hasEventListeners) {
      delete this._eventFunction[name];
      delete this._eventListeners[name];
    }
  }
}
EventEmitter.combiner = function(object, name, arg1, arg2, arg3) {
  const listeners = object._eventListeners[name];
  if (listeners) {
    for (const listener of [...listeners]) {
      listener(arg1, arg2, arg3);
    }
  }
};
EventEmitter.addAsMixin = function(cls) {
  cls.prototype.on = EventEmitter.prototype.on;
  cls.prototype.once = EventEmitter.prototype.once;
  cls.prototype.has = EventEmitter.prototype.has;
  cls.prototype.off = EventEmitter.prototype.off;
  cls.prototype.removeListener = EventEmitter.prototype.removeListener;
  cls.prototype.emit = EventEmitter.prototype.emit;
  cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;
  cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;
};
class Shader {
  constructor(coreContext) {
    this._initialized = false;
    this.ctx = coreContext;
    this._elements = /* @__PURE__ */ new Set();
  }
  static create(stage, v) {
    let shader;
    if (Utils$1.isObjectLiteral(v)) {
      if (v.type) {
        shader = stage.renderer.createShader(stage.ctx, v);
      } else {
        shader = this.shader;
      }
      if (shader) {
        Base.patchObject(shader, v);
      }
    } else if (v === null) {
      shader = stage.ctx.renderState.defaultShader;
    } else if (v === void 0) {
      shader = null;
    } else {
      if (v.isShader) {
        if (!stage.renderer.isValidShaderType(v.constructor)) {
          console.error("[Lightning] Invalid shader type");
          v = null;
        }
        shader = v;
      } else {
        console.error("[Lightning] Please specify a shader type.");
        return;
      }
    }
    return shader;
  }
  static getWebGL() {
    return void 0;
  }
  static getC2d() {
    return void 0;
  }
  addElement(elementCore) {
    this._elements.add(elementCore);
  }
  removeElement(elementCore) {
    this._elements.delete(elementCore);
    if (!this._elements) {
      this.cleanup();
    }
  }
  redraw() {
    this._elements.forEach((elementCore) => {
      elementCore.setHasRenderUpdates(2);
    });
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
  useDefault() {
    return false;
  }
  addEmpty() {
    return false;
  }
  cleanup() {
  }
  get isShader() {
    return true;
  }
}
class Texture {
  constructor(stage) {
    this.stage = stage;
    this.manager = this.stage.textureManager;
    this.id = Texture.id++;
    this.elements = /* @__PURE__ */ new Set();
    this._activeCount = 0;
    this._source = null;
    this._resizeMode = null;
    this._x = 0;
    this._y = 0;
    this._w = 0;
    this._h = 0;
    this._precision = 1;
    this.mw = 0;
    this.mh = 0;
    this.clipping = false;
    this._mustUpdate = true;
  }
  get source() {
    if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {
      this._performUpdateSource(true);
      this.stage.removeUpdateSourceTexture(this);
    }
    return this._source;
  }
  addElement(v) {
    if (!this.elements.has(v)) {
      this.elements.add(v);
      if (this.elements.size === 1) {
        if (this._source) {
          this._source.addTexture(this);
        }
      }
      if (v.active) {
        this.incActiveCount();
      }
    }
  }
  removeElement(v) {
    if (this.elements.delete(v)) {
      if (this.elements.size === 0) {
        if (this._source) {
          this._source.removeTexture(this);
        }
      }
      if (v.active) {
        this.decActiveCount();
      }
    }
  }
  incActiveCount() {
    const source = this.source;
    if (source) {
      this._checkForNewerReusableTextureSource();
    }
    this._activeCount++;
    if (this._activeCount === 1) {
      this.becomesUsed();
    }
  }
  decActiveCount() {
    this.source;
    this._activeCount--;
    if (!this._activeCount) {
      this.becomesUnused();
    }
  }
  becomesUsed() {
    if (this.source) {
      this.source.incActiveTextureCount();
    }
  }
  onLoad() {
    if (this._resizeMode) {
      this._applyResizeMode();
    }
    this.elements.forEach((element) => {
      if (element.active) {
        element.onTextureSourceLoaded();
      }
    });
  }
  _checkForNewerReusableTextureSource() {
    const source = this.source;
    if (!source.isLoaded()) {
      const reusable = this._getReusableTextureSource();
      if (reusable && reusable.isLoaded() && reusable !== source) {
        this._replaceTextureSource(reusable);
      }
    } else {
      if (this._resizeMode) {
        this._applyResizeMode();
      }
    }
  }
  becomesUnused() {
    if (this.source) {
      this.source.decActiveTextureCount();
    }
  }
  isUsed() {
    return this._activeCount > 0;
  }
  _getLookupId() {
    return null;
  }
  _getSourceLoader() {
    throw new Error("Texture.generate must be implemented.");
  }
  get isValid() {
    return this._getIsValid();
  }
  _getIsValid() {
    return true;
  }
  _changed() {
    if (this.isUsed()) {
      this._updateSource();
    } else {
      this._mustUpdate = true;
    }
  }
  _updateSource() {
    this.stage.addUpdateSourceTexture(this);
  }
  _performUpdateSource(force = false) {
    if (force || this.isUsed()) {
      this._mustUpdate = false;
      let source = this._getTextureSource();
      this._replaceTextureSource(source);
    }
  }
  _getTextureSource() {
    let source = null;
    if (this._getIsValid()) {
      const lookupId = this._getLookupId();
      source = this._getReusableTextureSource(lookupId);
      if (!source) {
        source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);
      }
    }
    return source;
  }
  _getReusableTextureSource(lookupId = this._getLookupId()) {
    if (this._getIsValid()) {
      if (lookupId) {
        return this.manager.getReusableTextureSource(lookupId);
      }
    }
    return null;
  }
  _replaceTextureSource(newSource = null) {
    let oldSource = this._source;
    this._source = newSource;
    if (this.elements.size) {
      if (oldSource) {
        if (this._activeCount) {
          oldSource.decActiveTextureCount();
        }
        oldSource.removeTexture(this);
        if (this["text"] && !oldSource.isUsed()) {
          this.manager.freeTextureSource(oldSource);
        }
      }
      if (newSource) {
        newSource.addTexture(this);
        if (this._activeCount) {
          newSource.incActiveTextureCount();
        }
      }
    }
    if (this.isUsed()) {
      if (newSource) {
        if (newSource.isLoaded()) {
          if (this._resizeMode) {
            this._applyResizeMode();
          }
          this.elements.forEach((element) => {
            if (element.active) {
              element._setDisplayedTexture(this);
            }
          });
        } else {
          const loadError = newSource.loadError;
          if (loadError) {
            this.elements.forEach((element) => {
              if (element.active) {
                element.onTextureSourceLoadError(loadError);
              }
            });
          }
        }
      } else {
        this.elements.forEach((element) => {
          if (element.active) {
            element._setDisplayedTexture(null);
          }
        });
      }
    }
  }
  load() {
    if (this.source) {
      if (!this.isLoaded()) {
        this.source.load(true);
      }
    }
  }
  isLoaded() {
    return this._source && this._source.isLoaded();
  }
  get loadError() {
    return this._source && this._source.loadError;
  }
  free() {
    if (this._source) {
      this._source.free();
    }
  }
  set resizeMode({ type = "cover", w = 0, h = 0, clipX = 0.5, clipY = 0.5 }) {
    this._resizeMode = { type, w, h, clipX, clipY };
    if (this.isLoaded()) {
      this._applyResizeMode();
    }
  }
  get resizeMode() {
    return this._resizeMode;
  }
  _clearResizeMode() {
    this._resizeMode = null;
  }
  _applyResizeMode() {
    if (this._resizeMode.type === "cover") {
      this._applyResizeCover();
    } else if (this._resizeMode.type === "contain") {
      this._applyResizeContain();
    }
    this._updatePrecision();
    this._updateClipping();
  }
  _applyResizeCover() {
    const scaleX = this._resizeMode.w / this._source.w;
    const scaleY = this._resizeMode.h / this._source.h;
    let scale = Math.max(scaleX, scaleY);
    if (!scale)
      return;
    this._precision = 1 / scale;
    if (scaleX && scaleX < scale) {
      const desiredSize = this._precision * this._resizeMode.w;
      const choppedOffPixels = this._source.w - desiredSize;
      this._x = choppedOffPixels * this._resizeMode.clipX;
      this._w = this._source.w - choppedOffPixels;
    }
    if (scaleY && scaleY < scale) {
      const desiredSize = this._precision * this._resizeMode.h;
      const choppedOffPixels = this._source.h - desiredSize;
      this._y = choppedOffPixels * this._resizeMode.clipY;
      this._h = this._source.h - choppedOffPixels;
    }
  }
  _applyResizeContain() {
    const scaleX = this._resizeMode.w / this._source.w;
    const scaleY = this._resizeMode.h / this._source.h;
    let scale = scaleX;
    if (!scale || scaleY < scale) {
      scale = scaleY;
    }
    if (!scale)
      return;
    this._precision = 1 / scale;
  }
  enableClipping(x, y, w, h) {
    this._clearResizeMode();
    x *= this._precision;
    y *= this._precision;
    w *= this._precision;
    h *= this._precision;
    if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {
      this._x = x;
      this._y = y;
      this._w = w;
      this._h = h;
      this._updateClipping(true);
    }
  }
  disableClipping() {
    this._clearResizeMode();
    if (this._x || this._y || this._w || this._h) {
      this._x = 0;
      this._y = 0;
      this._w = 0;
      this._h = 0;
      this._updateClipping();
    }
  }
  _updateClipping() {
    this.clipping = !!(this._x || this._y || this._w || this._h);
    let self = this;
    this.elements.forEach(function(element) {
      if (element.displayedTexture === self) {
        element.onDisplayedTextureClippingChanged();
      }
    });
  }
  _updatePrecision() {
    let self = this;
    this.elements.forEach(function(element) {
      if (element.displayedTexture === self) {
        element.onPrecisionChanged();
      }
    });
  }
  getNonDefaults() {
    let nonDefaults = {};
    nonDefaults["type"] = this.constructor.name;
    if (this.x !== 0)
      nonDefaults["x"] = this.x;
    if (this.y !== 0)
      nonDefaults["y"] = this.y;
    if (this.w !== 0)
      nonDefaults["w"] = this.w;
    if (this.h !== 0)
      nonDefaults["h"] = this.h;
    if (this.precision !== 1)
      nonDefaults["precision"] = this.precision;
    return nonDefaults;
  }
  get px() {
    return this._x;
  }
  get py() {
    return this._y;
  }
  get pw() {
    return this._w;
  }
  get ph() {
    return this._h;
  }
  get x() {
    return this._x / this._precision;
  }
  set x(v) {
    this._clearResizeMode();
    v = v * this._precision;
    if (this._x !== v) {
      this._x = v;
      this._updateClipping();
    }
  }
  get y() {
    return this._y / this._precision;
  }
  set y(v) {
    this._clearResizeMode();
    v = v * this._precision;
    if (this._y !== v) {
      this._y = v;
      this._updateClipping();
    }
  }
  get w() {
    return this._w / this._precision;
  }
  set w(v) {
    this._clearResizeMode();
    v = v * this._precision;
    if (this._w !== v) {
      this._w = v;
      this._updateClipping();
    }
  }
  get h() {
    return this._h / this._precision;
  }
  set h(v) {
    this._clearResizeMode();
    v = v * this._precision;
    if (this._h !== v) {
      this._h = v;
      this._updateClipping();
    }
  }
  get precision() {
    return this._precision;
  }
  set precision(v) {
    this._clearResizeMode();
    if (this._precision !== v) {
      this._precision = v;
      this._updatePrecision();
    }
  }
  isAutosizeTexture() {
    return true;
  }
  getRenderWidth() {
    if (!this.isAutosizeTexture()) {
      return 0;
    }
    return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;
  }
  getRenderHeight() {
    if (!this.isAutosizeTexture()) {
      return 0;
    }
    return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
}
Texture.prototype.isTexture = true;
Texture.id = 0;
class ImageTexture extends Texture {
  constructor(stage) {
    super(stage);
    this._src = void 0;
    this._hasAlpha = false;
  }
  get src() {
    return this._src;
  }
  set src(v) {
    if (this._src !== v) {
      this._src = v;
      this._changed();
    }
  }
  get hasAlpha() {
    return this._hasAlpha;
  }
  set hasAlpha(v) {
    if (this._hasAlpha !== v) {
      this._hasAlpha = v;
      this._changed();
    }
  }
  _getIsValid() {
    return !!this._src;
  }
  _getLookupId() {
    return this._src;
  }
  _getSourceLoader() {
    let src = this._src;
    let hasAlpha = this._hasAlpha;
    if (this.stage.getOption("srcBasePath")) {
      var fc = src.charCodeAt(0);
      if (src.indexOf("//") === -1 && (fc >= 65 && fc <= 90 || fc >= 97 && fc <= 122 || fc == 46)) {
        src = this.stage.getOption("srcBasePath") + src;
      }
    }
    return (cb) => {
      return this.stage.platform.loadSrcTexture({ src, hasAlpha }, cb);
    };
  }
  getNonDefaults() {
    const obj = super.getNonDefaults();
    if (this._src) {
      obj.src = this._src;
    }
    return obj;
  }
}
function getFontSetting(fontFace, fontStyle, fontSize, precision, defaultFontFace) {
  let ff = fontFace;
  if (!Array.isArray(ff)) {
    ff = [ff];
  }
  let ffs = [];
  for (let i = 0, n = ff.length; i < n; i++) {
    let curFf = ff[i];
    if (curFf === null) {
      curFf = defaultFontFace;
    }
    if (curFf === "serif" || curFf === "sans-serif") {
      ffs.push(curFf);
    } else {
      ffs.push(`"${curFf}"`);
    }
  }
  return `${fontStyle} ${fontSize * precision}px ${ffs.join(",")}`;
}
function isZeroWidthSpace(space) {
  return space === "" || space === "​";
}
function isSpace(space) {
  return isZeroWidthSpace(space) || space === " ";
}
function tokenizeString(tokenRegex, text) {
  const delimeters = text.match(tokenRegex) || [];
  const words = text.split(tokenRegex) || [];
  let final = [];
  for (let i = 0; i < words.length; i++) {
    final.push(words[i], delimeters[i]);
  }
  final.pop();
  return final.filter((word) => word != "");
}
function measureText(context, word, space = 0) {
  if (!space) {
    return context.measureText(word).width;
  }
  return word.split("").reduce((acc, char) => {
    if (isZeroWidthSpace(char)) {
      return acc;
    }
    return acc + context.measureText(char).width + space;
  }, 0);
}
function wrapText(context, text, wordWrapWidth, letterSpacing, indent) {
  const spaceRegex = / |\u200B/g;
  let lines = text.split(/\r?\n/g);
  let allLines = [];
  let realNewlines = [];
  for (let i = 0; i < lines.length; i++) {
    let resultLines = [];
    let result = "";
    let spaceLeft = wordWrapWidth - indent;
    let words = lines[i].split(spaceRegex);
    let spaces = lines[i].match(spaceRegex) || [];
    for (let j = 0; j < words.length; j++) {
      const space = spaces[j - 1] || "";
      const word = words[j];
      const wordWidth = measureText(context, word, letterSpacing);
      const wordWidthWithSpace = wordWidth + measureText(context, space, letterSpacing);
      if (j === 0 || wordWidthWithSpace > spaceLeft) {
        if (j > 0) {
          resultLines.push(result);
          result = "";
        }
        result += word;
        spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);
      } else {
        spaceLeft -= wordWidthWithSpace;
        result += space + word;
      }
    }
    resultLines.push(result);
    result = "";
    allLines = allLines.concat(resultLines);
    if (i < lines.length - 1) {
      realNewlines.push(allLines.length);
    }
  }
  return { l: allLines, n: realNewlines };
}
class TextTextureRenderer {
  constructor(stage, canvas, settings) {
    this._stage = stage;
    this._canvas = canvas;
    this._context = this._canvas.getContext("2d");
    this._settings = settings;
  }
  getPrecision() {
    return this._settings.precision;
  }
  setFontProperties() {
    this._context.font = getFontSetting(
      this._settings.fontFace,
      this._settings.fontStyle,
      this._settings.fontSize,
      this.getPrecision(),
      this._stage.getOption("defaultFontFace")
    );
    this._context.textBaseline = this._settings.textBaseline;
  }
  _load() {
    if (Utils$1.isWeb && document.fonts) {
      const fontSetting = getFontSetting(
        this._settings.fontFace,
        this._settings.fontStyle,
        this._settings.fontSize,
        this.getPrecision(),
        this._stage.getOption("defaultFontFace")
      );
      try {
        if (!document.fonts.check(fontSetting, this._settings.text)) {
          return document.fonts.load(fontSetting, this._settings.text).catch((err) => {
            console.warn("[Lightning] Font load error", err, fontSetting);
          }).then(() => {
            if (!document.fonts.check(fontSetting, this._settings.text)) {
              console.warn("[Lightning] Font not found", fontSetting);
            }
          });
        }
      } catch (e) {
        console.warn("[Lightning] Can't check font loading for " + fontSetting);
      }
    }
  }
  draw() {
    const loadPromise = this._load();
    if (!loadPromise) {
      return Utils$1.isSpark ? this._stage.platform.drawText(this) : this._draw();
    } else {
      return loadPromise.then(() => {
        return Utils$1.isSpark ? this._stage.platform.drawText(this) : this._draw();
      });
    }
  }
  _calculateRenderInfo() {
    let renderInfo = {};
    const precision = this.getPrecision();
    const paddingLeft = this._settings.paddingLeft * precision;
    const paddingRight = this._settings.paddingRight * precision;
    const fontSize = this._settings.fontSize * precision;
    let offsetY = this._settings.offsetY === null ? null : this._settings.offsetY * precision;
    let lineHeight = this._settings.lineHeight * precision;
    const w = this._settings.w * precision;
    const h = this._settings.h * precision;
    let wordWrapWidth = this._settings.wordWrapWidth * precision;
    const cutSx = this._settings.cutSx * precision;
    const cutEx = this._settings.cutEx * precision;
    const cutSy = this._settings.cutSy * precision;
    const cutEy = this._settings.cutEy * precision;
    const letterSpacing = (this._settings.letterSpacing || 0) * precision;
    const textIndent = this._settings.textIndent * precision;
    this.setFontProperties();
    let width = w || this._stage.getOption("w");
    let innerWidth = width - paddingLeft;
    if (innerWidth < 10) {
      width += 10 - innerWidth;
      innerWidth = 10;
    }
    if (!wordWrapWidth) {
      wordWrapWidth = innerWidth;
    }
    if (this._settings.textOverflow && !this._settings.wordWrap) {
      let suffix;
      switch (this._settings.textOverflow) {
        case "clip":
          suffix = "";
          break;
        case "ellipsis":
          suffix = this._settings.maxLinesSuffix;
          break;
        default:
          suffix = this._settings.textOverflow;
      }
      this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix);
    }
    let linesInfo;
    if (this._settings.wordWrap) {
      linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);
    } else {
      linesInfo = { l: this._settings.text.split(/(?:\r\n|\r|\n)/), n: [] };
      let n = linesInfo.l.length;
      for (let i = 0; i < n - 1; i++) {
        linesInfo.n.push(i);
      }
    }
    let lines = linesInfo.l;
    if (this._settings.maxLines && lines.length > this._settings.maxLines) {
      let usedLines = lines.slice(0, this._settings.maxLines);
      let otherLines = null;
      if (this._settings.maxLinesSuffix) {
        let w2 = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;
        let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w2, letterSpacing, textIndent);
        usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;
        otherLines = [al.l.length > 1 ? al.l[1] : ""];
      } else {
        otherLines = [""];
      }
      let i, n = lines.length;
      let j = 0;
      let m = linesInfo.n.length;
      for (i = this._settings.maxLines; i < n; i++) {
        otherLines[j] += (otherLines[j] ? " " : "") + lines[i];
        if (i + 1 < m && linesInfo.n[i + 1]) {
          j++;
        }
      }
      renderInfo.remainingText = otherLines.join("\n");
      renderInfo.moreTextLines = true;
      lines = usedLines;
    } else {
      renderInfo.moreTextLines = false;
      renderInfo.remainingText = "";
    }
    let maxLineWidth = 0;
    let lineWidths = [];
    for (let i = 0; i < lines.length; i++) {
      let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);
      lineWidths.push(lineWidth);
      maxLineWidth = Math.max(maxLineWidth, lineWidth);
    }
    renderInfo.lineWidths = lineWidths;
    if (!w) {
      width = maxLineWidth + paddingLeft + paddingRight;
      innerWidth = maxLineWidth;
    }
    lineHeight = lineHeight || fontSize;
    let height;
    if (h) {
      height = h;
    } else {
      const baselineOffset = this._settings.textBaseline != "bottom" ? 0.5 * fontSize : 0;
      height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;
    }
    if (offsetY === null) {
      offsetY = fontSize;
    }
    renderInfo.w = width;
    renderInfo.h = height;
    renderInfo.lines = lines;
    renderInfo.precision = precision;
    if (!width) {
      width = 1;
    }
    if (!height) {
      height = 1;
    }
    if (cutSx || cutEx) {
      width = Math.min(width, cutEx - cutSx);
    }
    if (cutSy || cutEy) {
      height = Math.min(height, cutEy - cutSy);
    }
    renderInfo.width = width;
    renderInfo.innerWidth = innerWidth;
    renderInfo.height = height;
    renderInfo.fontSize = fontSize;
    renderInfo.cutSx = cutSx;
    renderInfo.cutSy = cutSy;
    renderInfo.cutEx = cutEx;
    renderInfo.cutEy = cutEy;
    renderInfo.lineHeight = lineHeight;
    renderInfo.lineWidths = lineWidths;
    renderInfo.offsetY = offsetY;
    renderInfo.paddingLeft = paddingLeft;
    renderInfo.paddingRight = paddingRight;
    renderInfo.letterSpacing = letterSpacing;
    renderInfo.textIndent = textIndent;
    return renderInfo;
  }
  _draw() {
    const renderInfo = this._calculateRenderInfo();
    const precision = this.getPrecision();
    this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption("textRenderIssueMargin"));
    this._canvas.height = Math.ceil(renderInfo.height);
    this.setFontProperties();
    if (renderInfo.fontSize >= 128) {
      this._context.globalAlpha = 0.01;
      this._context.fillRect(0, 0, 0.01, 0.01);
      this._context.globalAlpha = 1;
    }
    if (renderInfo.cutSx || renderInfo.cutSy) {
      this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);
    }
    let linePositionX;
    let linePositionY;
    let drawLines = [];
    for (let i = 0, n = renderInfo.lines.length; i < n; i++) {
      linePositionX = i === 0 ? renderInfo.textIndent : 0;
      linePositionY = i * renderInfo.lineHeight + renderInfo.offsetY;
      if (this._settings.verticalAlign == "middle") {
        linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;
      } else if (this._settings.verticalAlign == "bottom") {
        linePositionY += renderInfo.lineHeight - renderInfo.fontSize;
      }
      if (this._settings.textAlign === "right") {
        linePositionX += renderInfo.innerWidth - renderInfo.lineWidths[i];
      } else if (this._settings.textAlign === "center") {
        linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2;
      }
      linePositionX += renderInfo.paddingLeft;
      drawLines.push({ text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i] });
    }
    if (this._settings.highlight) {
      let color = this._settings.highlightColor || 0;
      let hlHeight = this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5;
      const offset = this._settings.highlightOffset * precision;
      const hlPaddingLeft = this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft;
      const hlPaddingRight = this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight;
      this._context.fillStyle = StageUtils.getRgbaString(color);
      for (let i = 0; i < drawLines.length; i++) {
        let drawLine = drawLines[i];
        this._context.fillRect(drawLine.x - hlPaddingLeft, drawLine.y - renderInfo.offsetY + offset, drawLine.w + hlPaddingRight + hlPaddingLeft, hlHeight);
      }
    }
    let prevShadowSettings = null;
    if (this._settings.shadow) {
      prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];
      this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);
      this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;
      this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;
      this._context.shadowBlur = this._settings.shadowBlur * precision;
    }
    this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);
    for (let i = 0, n = drawLines.length; i < n; i++) {
      let drawLine = drawLines[i];
      if (renderInfo.letterSpacing === 0) {
        this._context.fillText(drawLine.text, drawLine.x, drawLine.y);
      } else {
        const textSplit = drawLine.text.split("");
        let x = drawLine.x;
        for (let i2 = 0, j = textSplit.length; i2 < j; i2++) {
          this._context.fillText(textSplit[i2], x, drawLine.y);
          x += this.measureText(textSplit[i2], renderInfo.letterSpacing);
        }
      }
    }
    if (prevShadowSettings) {
      this._context.shadowColor = prevShadowSettings[0];
      this._context.shadowOffsetX = prevShadowSettings[1];
      this._context.shadowOffsetY = prevShadowSettings[2];
      this._context.shadowBlur = prevShadowSettings[3];
    }
    if (renderInfo.cutSx || renderInfo.cutSy) {
      this._context.translate(renderInfo.cutSx, renderInfo.cutSy);
    }
    this.renderInfo = renderInfo;
  }
  wrapWord(word, wordWrapWidth, suffix) {
    const suffixWidth = this.measureText(suffix);
    const wordLen = word.length;
    const wordWidth = this.measureText(word);
    if (wordWidth <= wordWrapWidth) {
      return word;
    }
    let cutoffIndex = Math.floor(wordWrapWidth * wordLen / wordWidth);
    let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;
    if (truncWordWidth > wordWrapWidth) {
      while (cutoffIndex > 0) {
        truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;
        if (truncWordWidth > wordWrapWidth) {
          cutoffIndex -= 1;
        } else {
          break;
        }
      }
    } else {
      while (cutoffIndex < wordLen) {
        truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;
        if (truncWordWidth < wordWrapWidth) {
          cutoffIndex += 1;
        } else {
          cutoffIndex -= 1;
          break;
        }
      }
    }
    return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : "");
  }
  wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {
    return wrapText(this._context, text, wordWrapWidth, letterSpacing, indent);
  }
  measureText(word, space = 0) {
    return measureText(this._context, word, space);
  }
}
class TextTextureRendererAdvanced {
  constructor(stage, canvas, settings) {
    this._stage = stage;
    this._canvas = canvas;
    this._context = this._canvas.getContext("2d");
    this._settings = settings;
  }
  getPrecision() {
    return this._settings.precision;
  }
  setFontProperties() {
    const font = getFontSetting(
      this._settings.fontFace,
      this._settings.fontStyle,
      this._settings.fontSize,
      this.getPrecision(),
      this._stage.getOption("defaultFontFace")
    );
    this._context.font = font;
    this._context.textBaseline = this._settings.textBaseline;
    return font;
  }
  _load() {
    if (Utils$1.isWeb && document.fonts) {
      const fontSetting = getFontSetting(
        this._settings.fontFace,
        this._settings.fontStyle,
        this._settings.fontSize,
        this.getPrecision(),
        this._stage.getOption("defaultFontFace")
      );
      try {
        if (!document.fonts.check(fontSetting, this._settings.text)) {
          return document.fonts.load(fontSetting, this._settings.text).catch((err) => {
            console.warn("Font load error", err, fontSetting);
          }).then(() => {
            if (!document.fonts.check(fontSetting, this._settings.text)) {
              console.warn("Font not found", fontSetting);
            }
          });
        }
      } catch (e) {
        console.warn("Can't check font loading for " + fontSetting);
      }
    }
  }
  draw() {
    const loadPromise = this._load();
    if (!loadPromise) {
      return Utils$1.isSpark ? this._stage.platform.drawText(this) : this._draw();
    } else {
      return loadPromise.then(() => {
        return Utils$1.isSpark ? this._stage.platform.drawText(this) : this._draw();
      });
    }
  }
  _calculateRenderInfo() {
    let renderInfo = {};
    const precision = this.getPrecision();
    const paddingLeft = this._settings.paddingLeft * precision;
    const paddingRight = this._settings.paddingRight * precision;
    const fontSize = this._settings.fontSize * precision;
    const lineHeight = this._settings.lineHeight * precision || fontSize;
    const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption("w");
    const wordWrapWidth = this._settings.wordWrapWidth * precision;
    const cutSx = this._settings.cutSx * precision;
    const cutEx = this._settings.cutEx * precision;
    const cutSy = this._settings.cutSy * precision;
    const cutEy = this._settings.cutEy * precision;
    const letterSpacing = this._settings.letterSpacing || 0;
    renderInfo.baseFont = this.setFontProperties();
    renderInfo.w = w;
    renderInfo.width = w;
    renderInfo.text = this._settings.text;
    renderInfo.precision = precision;
    renderInfo.fontSize = fontSize;
    renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;
    renderInfo.lineHeight = lineHeight;
    renderInfo.letterSpacing = letterSpacing;
    renderInfo.textAlign = this._settings.textAlign;
    renderInfo.textColor = this._settings.textColor;
    renderInfo.verticalAlign = this._settings.verticalAlign;
    renderInfo.highlight = this._settings.highlight;
    renderInfo.highlightColor = this._settings.highlightColor;
    renderInfo.highlightHeight = this._settings.highlightHeight;
    renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;
    renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;
    renderInfo.highlightOffset = this._settings.highlightOffset;
    renderInfo.paddingLeft = this._settings.paddingLeft;
    renderInfo.paddingRight = this._settings.paddingRight;
    renderInfo.maxLines = this._settings.maxLines;
    renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;
    renderInfo.textOverflow = this._settings.textOverflow;
    renderInfo.wordWrap = this._settings.wordWrap;
    renderInfo.wordWrapWidth = wordWrapWidth;
    renderInfo.shadow = this._settings.shadow;
    renderInfo.shadowColor = this._settings.shadowColor;
    renderInfo.shadowOffsetX = this._settings.shadowOffsetX;
    renderInfo.shadowOffsetY = this._settings.shadowOffsetY;
    renderInfo.shadowBlur = this._settings.shadowBlur;
    renderInfo.cutSx = cutSx;
    renderInfo.cutEx = cutEx;
    renderInfo.cutSy = cutSy;
    renderInfo.cutEy = cutEy;
    renderInfo.textIndent = this._settings.textIndent * precision;
    renderInfo.wordBreak = this._settings.wordBreak;
    let text = renderInfo.text;
    let wrapWidth = renderInfo.wordWrap ? renderInfo.wordWrapWidth || renderInfo.width : renderInfo.width;
    if (renderInfo.textOverflow && !renderInfo.wordWrap) {
      let suffix;
      switch (this._settings.textOverflow) {
        case "clip":
          suffix = "";
          break;
        case "ellipsis":
          suffix = this._settings.maxLinesSuffix;
          break;
        default:
          suffix = this._settings.textOverflow;
      }
      text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);
    }
    text = this.tokenize(text);
    text = this.parse(text);
    text = this.measure(text, letterSpacing, renderInfo.baseFont);
    if (renderInfo.textIndent) {
      text = this.indent(text, renderInfo.textIndent);
    }
    if (renderInfo.wordBreak) {
      text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), []);
      this.resetFontStyle();
    }
    let x = paddingLeft;
    let lineNo = 0;
    for (const t of text) {
      if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == "\n") {
        x = paddingLeft;
        lineNo += 1;
      }
      t.lineNo = lineNo;
      if (t.text == "\n") {
        continue;
      }
      t.x = x;
      x += t.width;
    }
    renderInfo.lineNum = lineNo + 1;
    if (this._settings.h) {
      renderInfo.h = this._settings.h;
    } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {
      renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;
    } else {
      renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;
    }
    const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;
    let vaOffset = 0;
    if (renderInfo.verticalAlign == "top" && this._context.textBaseline == "alphabetic") {
      vaOffset = -baselineOffsetInPx;
    } else if (renderInfo.verticalAlign == "middle") {
      vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;
    } else if (this._settings.verticalAlign == "bottom") {
      vaOffset = renderInfo.lineHeight - renderInfo.fontSize;
    }
    renderInfo.lines = [];
    for (let i = 0; i < renderInfo.lineNum; i++) {
      renderInfo.lines[i] = {
        width: 0,
        x: 0,
        y: renderInfo.lineHeight * i + vaOffset,
        text: []
      };
    }
    for (let t of text) {
      renderInfo.lines[t.lineNo].text.push(t);
    }
    for (const l of renderInfo.lines) {
      if (l.text.length == 0) {
        continue;
      }
      const firstWord = l.text[0].text;
      const lastWord = l.text[l.text.length - 1].text;
      if (firstWord == "\n") {
        l.text.shift();
      }
      if (isSpace(lastWord) || lastWord == "\n") {
        l.text.pop();
      }
    }
    for (let l of renderInfo.lines) {
      l.width = l.text.reduce((acc, t) => acc + t.width, 0);
    }
    renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;
    renderInfo.w = renderInfo.width;
    if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {
      const index = renderInfo.maxLines - 1;
      let lastLineText = text.filter((t) => t.lineNo == index);
      let suffix = renderInfo.maxLinesSuffix;
      suffix = this.tokenize(suffix);
      suffix = this.parse(suffix);
      suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);
      for (const s of suffix) {
        s.lineNo = index;
        s.x = 0;
        lastLineText.push(s);
      }
      const spl = suffix.length + 1;
      let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);
      while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {
        lastLineText.splice(lastLineText.length - spl, 1);
        _w = lastLineText.reduce((acc, t) => acc + t.width, 0);
        if (lastLineText.length < spl) {
          break;
        }
      }
      this.alignLine(lastLineText, lastLineText[0].x);
      renderInfo.lines[index].text = lastLineText;
      renderInfo.lines[index].width = _w;
    }
    if (renderInfo.textAlign == "center") {
      for (let l of renderInfo.lines) {
        l.x = (renderInfo.width - l.width - paddingLeft) / 2;
      }
    } else if (renderInfo.textAlign == "right") {
      for (let l of renderInfo.lines) {
        l.x = renderInfo.width - l.width - paddingLeft;
      }
    }
    return renderInfo;
  }
  _draw() {
    const renderInfo = this._calculateRenderInfo();
    const precision = this.getPrecision();
    const paddingLeft = renderInfo.paddingLeft * precision;
    let canvasWidth = renderInfo.w || renderInfo.width;
    if (renderInfo.cutSx || renderInfo.cutEx) {
      canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);
    }
    let canvasHeight = renderInfo.h;
    if (renderInfo.cutSy || renderInfo.cutEy) {
      canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);
    }
    this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption("textRenderIssueMargin"));
    this._canvas.height = Math.ceil(canvasHeight);
    this.setFontProperties();
    if (renderInfo.fontSize >= 128) {
      this._context.globalAlpha = 0.01;
      this._context.fillRect(0, 0, 0.01, 0.01);
      this._context.globalAlpha = 1;
    }
    if (renderInfo.cutSx || renderInfo.cutSy) {
      this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);
    }
    if (renderInfo.highlight) {
      const hlColor = renderInfo.highlightColor || 0;
      const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision : renderInfo.fontSize * 1.5;
      const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;
      const hlPaddingLeft = renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft;
      const hlPaddingRight = renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight;
      this._context.fillStyle = StageUtils.getRgbaString(hlColor);
      const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;
      for (let i = 0; i < lineNum; i++) {
        const l = renderInfo.lines[i];
        this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);
      }
    }
    let prevShadowSettings = null;
    if (this._settings.shadow) {
      prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];
      this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);
      this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;
      this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;
      this._context.shadowBlur = this._settings.shadowBlur * precision;
    }
    const defaultColor = StageUtils.getRgbaString(this._settings.textColor);
    let currentColor = defaultColor;
    this._context.fillStyle = defaultColor;
    for (const line of renderInfo.lines) {
      for (const t of line.text) {
        let lx = 0;
        if (t.text == "\n") {
          continue;
        }
        if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {
          continue;
        }
        if (t.color != currentColor) {
          currentColor = t.color;
          this._context.fillStyle = currentColor;
        }
        this._context.font = t.fontStyle;
        if (t.letters) {
          for (let l of t.letters) {
            const _x = renderInfo.lines[t.lineNo].x + t.x + lx;
            this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);
            lx += l.width;
          }
        } else {
          const _x = renderInfo.lines[t.lineNo].x + t.x;
          this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);
        }
      }
    }
    if (prevShadowSettings) {
      this._context.shadowColor = prevShadowSettings[0];
      this._context.shadowOffsetX = prevShadowSettings[1];
      this._context.shadowOffsetY = prevShadowSettings[2];
      this._context.shadowBlur = prevShadowSettings[3];
    }
    if (renderInfo.cutSx || renderInfo.cutSy) {
      this._context.translate(renderInfo.cutSx, renderInfo.cutSy);
    }
    renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ""));
    if (renderInfo.maxLines) {
      renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);
    }
    this.renderInfo = renderInfo;
  }
  measureText(word, space = 0) {
    return measureText(this._context, word, space);
  }
  tokenize(text) {
    return tokenizeString(/ |\u200B|\n|<i>|<\/i>|<b>|<\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\/color>/g, text);
  }
  parse(tokens) {
    let italic = 0;
    let bold = 0;
    let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];
    let color = 0;
    const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;
    return tokens.map((t) => {
      if (t == "<i>") {
        italic += 1;
        t = "";
      } else if (t == "</i>" && italic > 0) {
        italic -= 1;
        t = "";
      } else if (t == "<b>") {
        bold += 1;
        t = "";
      } else if (t == "</b>" && bold > 0) {
        bold -= 1;
        t = "";
      } else if (t == "</color>") {
        if (colorStack.length > 1) {
          color -= 1;
          colorStack.pop();
        }
        t = "";
      } else if (colorRegexp.test(t)) {
        const matched = colorRegexp.exec(t);
        colorStack.push(
          StageUtils.getRgbaString(parseInt(matched[1]))
        );
        color += 1;
        t = "";
      }
      return {
        text: t,
        italic,
        bold,
        color: colorStack[color]
      };
    }).filter((o) => o.text != "");
  }
  applyFontStyle(word, baseFont) {
    let font = baseFont;
    if (word.bold) {
      font = "bold " + font;
    }
    if (word.italic) {
      font = "italic " + font;
    }
    this._context.font = font;
    word.fontStyle = font;
  }
  resetFontStyle(baseFont) {
    this._context.font = baseFont;
  }
  measure(parsed, letterSpacing = 0, baseFont) {
    for (const p of parsed) {
      this.applyFontStyle(p, baseFont);
      p.width = this.measureText(p.text, letterSpacing);
      if (letterSpacing > 0) {
        p.letters = p.text.split("").map((l) => {
          return { text: l };
        });
        for (let l of p.letters) {
          l.width = this.measureText(l.text, letterSpacing);
        }
      }
    }
    this.resetFontStyle(baseFont);
    return parsed;
  }
  indent(parsed, textIndent) {
    parsed.splice(0, 0, { text: "", width: textIndent });
    return parsed;
  }
  wrapWord(word, wordWrapWidth, suffix) {
    const suffixWidth = this.measureText(suffix);
    const wordLen = word.length;
    const wordWidth = this.measureText(word);
    if (wordWidth <= wordWrapWidth) {
      return word;
    }
    let cutoffIndex = Math.floor(wordWrapWidth * wordLen / wordWidth);
    let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;
    if (truncWordWidth > wordWrapWidth) {
      while (cutoffIndex > 0) {
        truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;
        if (truncWordWidth > wordWrapWidth) {
          cutoffIndex -= 1;
        } else {
          break;
        }
      }
    } else {
      while (cutoffIndex < wordLen) {
        truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;
        if (truncWordWidth < wordWrapWidth) {
          cutoffIndex += 1;
        } else {
          cutoffIndex -= 1;
          break;
        }
      }
    }
    return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : "");
  }
  _getBreakIndex(word, width) {
    const wordLen = word.length;
    const wordWidth = this.measureText(word);
    if (wordWidth <= width) {
      return { breakIndex: word.length, truncWordWidth: wordWidth };
    }
    let breakIndex = Math.floor(width * wordLen / wordWidth);
    let truncWordWidth = this.measureText(word.substring(0, breakIndex));
    if (truncWordWidth > width) {
      while (breakIndex > 0) {
        truncWordWidth = this.measureText(word.substring(0, breakIndex));
        if (truncWordWidth > width) {
          breakIndex -= 1;
        } else {
          break;
        }
      }
    } else {
      while (breakIndex < wordLen) {
        truncWordWidth = this.measureText(word.substring(0, breakIndex));
        if (truncWordWidth < width) {
          breakIndex += 1;
        } else {
          breakIndex -= 1;
          truncWordWidth = this.measureText(word.substring(0, breakIndex));
          break;
        }
      }
    }
    return { breakIndex, truncWordWidth };
  }
  wordBreak(word, width, baseFont) {
    if (!word.text) {
      return word;
    }
    this.applyFontStyle(word, baseFont);
    const parts = [];
    let text = word.text;
    if (!word.letters) {
      while (true) {
        const { breakIndex, truncWordWidth } = this._getBreakIndex(text, width);
        parts.push({ ...word });
        parts[parts.length - 1].text = text.slice(0, breakIndex);
        parts[parts.length - 1].width = truncWordWidth;
        if (breakIndex === text.length) {
          break;
        }
        text = text.slice(breakIndex);
      }
    } else {
      let totalWidth = 0;
      let letters = [];
      let breakIndex = 0;
      for (const l of word.letters) {
        if (totalWidth + l.width >= width) {
          parts.push({ ...word });
          parts[parts.length - 1].text = text.slice(0, breakIndex);
          parts[parts.length - 1].width = totalWidth;
          parts[parts.length - 1].letters = letters;
          text = text.slice(breakIndex);
          totalWidth = 0;
          letters = [];
          breakIndex = 0;
        } else {
          breakIndex += 1;
          letters.push(l);
          totalWidth += l.width;
        }
      }
      if (totalWidth > 0) {
        parts.push({ ...word });
        parts[parts.length - 1].text = text.slice(0, breakIndex);
        parts[parts.length - 1].width = totalWidth;
        parts[parts.length - 1].letters = letters;
      }
    }
    return parts;
  }
  alignLine(parsed, initialX = 0) {
    let prevWidth = 0;
    let prevX = initialX;
    for (const word of parsed) {
      if (word.text == "\n") {
        continue;
      }
      word.x = prevX + prevWidth;
      prevX = word.x;
      prevWidth = word.width;
    }
  }
}
class TextTexture extends Texture {
  constructor(stage) {
    super(stage);
    this._precision = this.stage.getOption("precision");
  }
  static renderer(stage, canvas, settings) {
    if (this.advancedRenderer) {
      return new TextTextureRendererAdvanced(stage, canvas, settings);
    } else {
      return new TextTextureRenderer(stage, canvas, settings);
    }
  }
  get text() {
    return this._text;
  }
  set text(v) {
    if (this._text !== v) {
      this._text = "" + v;
      this._changed();
    }
  }
  get w() {
    return this._w;
  }
  set w(v) {
    if (this._w !== v) {
      this._w = v;
      this._changed();
    }
  }
  get h() {
    return this._h;
  }
  set h(v) {
    if (this._h !== v) {
      this._h = v;
      this._changed();
    }
  }
  get fontStyle() {
    return this._fontStyle;
  }
  set fontStyle(v) {
    if (this._fontStyle !== v) {
      this._fontStyle = v;
      this._changed();
    }
  }
  get fontBaselineRatio() {
    return this._fontBaselineRatio;
  }
  set fontBaselineRatio(v) {
    if (this._fontBaselineRatio !== v) {
      this._fontBaselineRatio = v;
      this._changed();
    }
  }
  get fontSize() {
    return this._fontSize;
  }
  set fontSize(v) {
    if (this._fontSize !== v) {
      this._fontSize = v;
      this._changed();
    }
  }
  get fontFace() {
    return this._fontFace;
  }
  set fontFace(v) {
    if (this._fontFace !== v) {
      this._fontFace = v;
      this._changed();
    }
  }
  get wordWrap() {
    return this._wordWrap;
  }
  set wordWrap(v) {
    if (this._wordWrap !== v) {
      this._wordWrap = v;
      this._changed();
    }
  }
  get wordWrapWidth() {
    return this._wordWrapWidth;
  }
  set wordWrapWidth(v) {
    if (this._wordWrapWidth !== v) {
      this._wordWrapWidth = v;
      this._changed();
    }
  }
  get wordBreak() {
    return this._wordBreak;
  }
  set wordBreak(v) {
    if (this._wordBreak !== v) {
      this._wordBreak = v;
      this._changed();
    }
  }
  get textOverflow() {
    return this._textOverflow;
  }
  set textOverflow(v) {
    if (v != this._textOverflow) {
      this._textOverflow = v;
      this._changed();
    }
  }
  get lineHeight() {
    return this._lineHeight;
  }
  set lineHeight(v) {
    if (this._lineHeight !== v) {
      this._lineHeight = v;
      this._changed();
    }
  }
  get textBaseline() {
    return this._textBaseline;
  }
  set textBaseline(v) {
    if (this._textBaseline !== v) {
      this._textBaseline = v;
      this._changed();
    }
  }
  get textAlign() {
    return this._textAlign;
  }
  set textAlign(v) {
    if (this._textAlign !== v) {
      this._textAlign = v;
      this._changed();
    }
  }
  get verticalAlign() {
    return this._verticalAlign;
  }
  set verticalAlign(v) {
    if (this._verticalAlign !== v) {
      this._verticalAlign = v;
      this._changed();
    }
  }
  get offsetY() {
    return this._offsetY;
  }
  set offsetY(v) {
    if (this._offsetY !== v) {
      this._offsetY = v;
      this._changed();
    }
  }
  get maxLines() {
    return this._maxLines;
  }
  set maxLines(v) {
    if (this._maxLines !== v) {
      this._maxLines = v;
      this._changed();
    }
  }
  get maxLinesSuffix() {
    return this._maxLinesSuffix;
  }
  set maxLinesSuffix(v) {
    if (this._maxLinesSuffix !== v) {
      this._maxLinesSuffix = v;
      this._changed();
    }
  }
  get textColor() {
    return this._textColor;
  }
  set textColor(v) {
    if (this._textColor !== v) {
      this._textColor = v;
      this._changed();
    }
  }
  get paddingLeft() {
    return this._paddingLeft;
  }
  set paddingLeft(v) {
    if (this._paddingLeft !== v) {
      this._paddingLeft = v;
      this._changed();
    }
  }
  get paddingRight() {
    return this._paddingRight;
  }
  set paddingRight(v) {
    if (this._paddingRight !== v) {
      this._paddingRight = v;
      this._changed();
    }
  }
  get shadow() {
    return this._shadow;
  }
  set shadow(v) {
    if (this._shadow !== v) {
      this._shadow = v;
      this._changed();
    }
  }
  get shadowColor() {
    return this._shadowColor;
  }
  set shadowColor(v) {
    if (this._shadowColor !== v) {
      this._shadowColor = v;
      this._changed();
    }
  }
  get shadowOffsetX() {
    return this._shadowOffsetX;
  }
  set shadowOffsetX(v) {
    if (this._shadowOffsetX !== v) {
      this._shadowOffsetX = v;
      this._changed();
    }
  }
  get shadowOffsetY() {
    return this._shadowOffsetY;
  }
  set shadowOffsetY(v) {
    if (this._shadowOffsetY !== v) {
      this._shadowOffsetY = v;
      this._changed();
    }
  }
  get shadowBlur() {
    return this._shadowBlur;
  }
  set shadowBlur(v) {
    if (this._shadowBlur !== v) {
      this._shadowBlur = v;
      this._changed();
    }
  }
  get highlight() {
    return this._highlight;
  }
  set highlight(v) {
    if (this._highlight !== v) {
      this._highlight = v;
      this._changed();
    }
  }
  get highlightHeight() {
    return this._highlightHeight;
  }
  set highlightHeight(v) {
    if (this._highlightHeight !== v) {
      this._highlightHeight = v;
      this._changed();
    }
  }
  get highlightColor() {
    return this._highlightColor;
  }
  set highlightColor(v) {
    if (this._highlightColor !== v) {
      this._highlightColor = v;
      this._changed();
    }
  }
  get highlightOffset() {
    return this._highlightOffset;
  }
  set highlightOffset(v) {
    if (this._highlightOffset !== v) {
      this._highlightOffset = v;
      this._changed();
    }
  }
  get highlightPaddingLeft() {
    return this._highlightPaddingLeft;
  }
  set highlightPaddingLeft(v) {
    if (this._highlightPaddingLeft !== v) {
      this._highlightPaddingLeft = v;
      this._changed();
    }
  }
  get highlightPaddingRight() {
    return this._highlightPaddingRight;
  }
  set highlightPaddingRight(v) {
    if (this._highlightPaddingRight !== v) {
      this._highlightPaddingRight = v;
      this._changed();
    }
  }
  get cutSx() {
    return this._cutSx;
  }
  set cutSx(v) {
    if (this._cutSx !== v) {
      this._cutSx = v;
      this._changed();
    }
  }
  get cutEx() {
    return this._cutEx;
  }
  set cutEx(v) {
    if (this._cutEx !== v) {
      this._cutEx = v;
      this._changed();
    }
  }
  get cutSy() {
    return this._cutSy;
  }
  set cutSy(v) {
    if (this._cutSy !== v) {
      this._cutSy = v;
      this._changed();
    }
  }
  get cutEy() {
    return this._cutEy;
  }
  set cutEy(v) {
    if (this._cutEy !== v) {
      this._cutEy = v;
      this._changed();
    }
  }
  get advancedRenderer() {
    return this._advancedRenderer;
  }
  set advancedRenderer(v) {
    if (this._advancedRenderer !== v) {
      this._advancedRenderer = v;
      this._changed();
    }
  }
  set letterSpacing(v) {
    if (this._letterSpacing !== v) {
      this._letterSpacing = v;
      this._changed();
    }
  }
  get letterSpacing() {
    return this._letterSpacing;
  }
  set textIndent(v) {
    if (this._textIndent !== v) {
      this._textIndent = v;
      this._changed();
    }
  }
  get textIndent() {
    return this._textIndent;
  }
  get precision() {
    return super.precision;
  }
  set precision(v) {
    if (this.precision !== v) {
      super.precision = v;
      this._changed();
    }
  }
  _getIsValid() {
    return !!this.text;
  }
  _getLookupId() {
    let parts = [];
    if (this.w !== 0)
      parts.push("w " + this.w);
    if (this.h !== 0)
      parts.push("h " + this.h);
    if (this.fontStyle !== "normal")
      parts.push("fS" + this.fontStyle);
    if (this.fontSize !== 40)
      parts.push("fs" + this.fontSize);
    if (this.fontBaselineRatio !== 0)
      parts.push("fb" + this.fontBaselineRatio);
    if (this.fontFace !== null)
      parts.push("ff" + (Array.isArray(this.fontFace) ? this.fontFace.join(",") : this.fontFace));
    if (this.wordWrap !== true)
      parts.push("wr" + (this.wordWrap ? 1 : 0));
    if (this.wordWrapWidth !== 0)
      parts.push("ww" + this.wordWrapWidth);
    if (this.wordBreak !== false)
      parts.push("wb" + this.wordBreak ? 1 : 0);
    if (this.textOverflow != "")
      parts.push("to" + this.textOverflow);
    if (this.lineHeight !== null)
      parts.push("lh" + this.lineHeight);
    if (this.textBaseline !== "alphabetic")
      parts.push("tb" + this.textBaseline);
    if (this.textAlign !== "left")
      parts.push("ta" + this.textAlign);
    if (this.verticalAlign !== "top")
      parts.push("va" + this.verticalAlign);
    if (this.offsetY !== null)
      parts.push("oy" + this.offsetY);
    if (this.maxLines !== 0)
      parts.push("ml" + this.maxLines);
    if (this.maxLinesSuffix !== "..")
      parts.push("ms" + this.maxLinesSuffix);
    parts.push("pc" + this.precision);
    if (this.textColor !== 4294967295)
      parts.push("co" + this.textColor.toString(16));
    if (this.paddingLeft !== 0)
      parts.push("pl" + this.paddingLeft);
    if (this.paddingRight !== 0)
      parts.push("pr" + this.paddingRight);
    if (this.shadow !== false)
      parts.push("sh" + (this.shadow ? 1 : 0));
    if (this.shadowColor !== 4278190080)
      parts.push("sc" + this.shadowColor.toString(16));
    if (this.shadowOffsetX !== 0)
      parts.push("sx" + this.shadowOffsetX);
    if (this.shadowOffsetY !== 0)
      parts.push("sy" + this.shadowOffsetY);
    if (this.shadowBlur !== 5)
      parts.push("sb" + this.shadowBlur);
    if (this.highlight !== false)
      parts.push("hL" + (this.highlight ? 1 : 0));
    if (this.highlightHeight !== 0)
      parts.push("hh" + this.highlightHeight);
    if (this.highlightColor !== 4278190080)
      parts.push("hc" + this.highlightColor.toString(16));
    if (this.highlightOffset !== null)
      parts.push("ho" + this.highlightOffset);
    if (this.highlightPaddingLeft !== null)
      parts.push("hl" + this.highlightPaddingLeft);
    if (this.highlightPaddingRight !== null)
      parts.push("hr" + this.highlightPaddingRight);
    if (this.letterSpacing !== null)
      parts.push("ls" + this.letterSpacing);
    if (this.textIndent !== null)
      parts.push("ti" + this.textIndent);
    if (this.cutSx)
      parts.push("csx" + this.cutSx);
    if (this.cutEx)
      parts.push("cex" + this.cutEx);
    if (this.cutSy)
      parts.push("csy" + this.cutSy);
    if (this.cutEy)
      parts.push("cey" + this.cutEy);
    if (this.advancedRenderer)
      parts.push("aR" + this.advancedRenderer ? 1 : 0);
    let id = "TX$" + parts.join("|") + ":" + this.text;
    return id;
  }
  _getSourceLoader() {
    const args = this.cloneArgs();
    const gl = this.stage.gl;
    return function(cb) {
      const canvas = this.stage.platform.getDrawingCanvas();
      const renderer = args.advancedRenderer ? new TextTextureRendererAdvanced(this.stage, canvas, args) : new TextTextureRenderer(this.stage, canvas, args);
      const p = renderer.draw();
      const texParams = {};
      const sharpCfg = this.stage.getOption("fontSharp");
      let sharpen = false;
      if (Utils$1.isBoolean(sharpCfg)) {
        sharpen = sharpCfg;
      } else if (Utils$1.isObject(sharpCfg)) {
        const precision = this.stage.getRenderPrecision();
        sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;
      }
      if (gl && sharpen) {
        texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;
      }
      if (p) {
        p.then(() => {
          cb(null, Object.assign({
            renderInfo: renderer.renderInfo,
            throttle: false,
            texParams
          }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));
        }).catch((err) => {
          cb(err);
        });
      } else {
        cb(null, Object.assign({
          renderInfo: renderer.renderInfo,
          throttle: false,
          texParams
        }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));
      }
    };
  }
  getNonDefaults() {
    const nonDefaults = super.getNonDefaults();
    if (this.text !== "")
      nonDefaults["text"] = this.text;
    if (this.w !== 0)
      nonDefaults["w"] = this.w;
    if (this.h !== 0)
      nonDefaults["h"] = this.h;
    if (this.fontStyle !== "normal")
      nonDefaults["fontStyle"] = this.fontStyle;
    if (this.fontSize !== 40)
      nonDefaults["fontSize"] = this.fontSize;
    if (this.fontBaselineRatio !== 0)
      nonDefaults["fontBaselineRatio"] = this.fontBaselineRatio;
    if (this.fontFace !== null)
      nonDefaults["fontFace"] = this.fontFace;
    if (this.wordWrap !== true)
      nonDefaults["wordWrap"] = this.wordWrap;
    if (this.wordWrapWidth !== 0)
      nonDefaults["wordWrapWidth"] = this.wordWrapWidth;
    if (this.wordBreak !== false)
      nonDefaults["wordBreak"] = this.wordBreak;
    if (this.textOverflow != "")
      nonDefaults["textOverflow"] = this.textOverflow;
    if (this.lineHeight !== null)
      nonDefaults["lineHeight"] = this.lineHeight;
    if (this.textBaseline !== "alphabetic")
      nonDefaults["textBaseline"] = this.textBaseline;
    if (this.textAlign !== "left")
      nonDefaults["textAlign"] = this.textAlign;
    if (this.verticalAlign !== "top")
      nonDefaults["verticalAlign"] = this.verticalAlign;
    if (this.offsetY !== null)
      nonDefaults["offsetY"] = this.offsetY;
    if (this.maxLines !== 0)
      nonDefaults["maxLines"] = this.maxLines;
    if (this.maxLinesSuffix !== "..")
      nonDefaults["maxLinesSuffix"] = this.maxLinesSuffix;
    if (this.precision !== this.stage.getOption("precision"))
      nonDefaults["precision"] = this.precision;
    if (this.textColor !== 4294967295)
      nonDefaults["textColor"] = this.textColor;
    if (this.paddingLeft !== 0)
      nonDefaults["paddingLeft"] = this.paddingLeft;
    if (this.paddingRight !== 0)
      nonDefaults["paddingRight"] = this.paddingRight;
    if (this.shadow !== false)
      nonDefaults["shadow"] = this.shadow;
    if (this.shadowColor !== 4278190080)
      nonDefaults["shadowColor"] = this.shadowColor;
    if (this.shadowOffsetX !== 0)
      nonDefaults["shadowOffsetX"] = this.shadowOffsetX;
    if (this.shadowOffsetY !== 0)
      nonDefaults["shadowOffsetY"] = this.shadowOffsetY;
    if (this.shadowBlur !== 5)
      nonDefaults["shadowBlur"] = this.shadowBlur;
    if (this.highlight !== false)
      nonDefaults["highlight"] = this.highlight;
    if (this.highlightHeight !== 0)
      nonDefaults["highlightHeight"] = this.highlightHeight;
    if (this.highlightColor !== 4278190080)
      nonDefaults["highlightColor"] = this.highlightColor;
    if (this.highlightOffset !== 0)
      nonDefaults["highlightOffset"] = this.highlightOffset;
    if (this.highlightPaddingLeft !== 0)
      nonDefaults["highlightPaddingLeft"] = this.highlightPaddingLeft;
    if (this.highlightPaddingRight !== 0)
      nonDefaults["highlightPaddingRight"] = this.highlightPaddingRight;
    if (this.letterSpacing !== 0)
      nonDefaults["letterSpacing"] = this.letterSpacing;
    if (this.textIndent !== 0)
      nonDefaults["textIndent"] = this.textIndent;
    if (this.cutSx)
      nonDefaults["cutSx"] = this.cutSx;
    if (this.cutEx)
      nonDefaults["cutEx"] = this.cutEx;
    if (this.cutSy)
      nonDefaults["cutSy"] = this.cutSy;
    if (this.cutEy)
      nonDefaults["cutEy"] = this.cutEy;
    if (this.advancedRenderer)
      nonDefaults["renderer"] = this.advancedRenderer;
    return nonDefaults;
  }
  cloneArgs() {
    let obj = {};
    obj.text = this._text;
    obj.w = this._w;
    obj.h = this._h;
    obj.fontStyle = this._fontStyle;
    obj.fontSize = this._fontSize;
    obj.fontBaselineRatio = this._fontBaselineRatio;
    obj.fontFace = this._fontFace;
    obj.wordWrap = this._wordWrap;
    obj.wordWrapWidth = this._wordWrapWidth;
    obj.wordBreak = this._wordBreak;
    obj.textOverflow = this._textOverflow;
    obj.lineHeight = this._lineHeight;
    obj.textBaseline = this._textBaseline;
    obj.textAlign = this._textAlign;
    obj.verticalAlign = this._verticalAlign;
    obj.offsetY = this._offsetY;
    obj.maxLines = this._maxLines;
    obj.maxLinesSuffix = this._maxLinesSuffix;
    obj.precision = this._precision;
    obj.textColor = this._textColor;
    obj.paddingLeft = this._paddingLeft;
    obj.paddingRight = this._paddingRight;
    obj.shadow = this._shadow;
    obj.shadowColor = this._shadowColor;
    obj.shadowOffsetX = this._shadowOffsetX;
    obj.shadowOffsetY = this._shadowOffsetY;
    obj.shadowBlur = this._shadowBlur;
    obj.highlight = this._highlight;
    obj.highlightHeight = this._highlightHeight;
    obj.highlightColor = this._highlightColor;
    obj.highlightOffset = this._highlightOffset;
    obj.highlightPaddingLeft = this._highlightPaddingLeft;
    obj.highlightPaddingRight = this._highlightPaddingRight;
    obj.letterSpacing = this._letterSpacing;
    obj.textIndent = this._textIndent;
    obj.cutSx = this._cutSx;
    obj.cutEx = this._cutEx;
    obj.cutSy = this._cutSy;
    obj.cutEy = this._cutEy;
    obj.advancedRenderer = this._advancedRenderer;
    return obj;
  }
}
let proto = TextTexture.prototype;
proto._text = "";
proto._w = 0;
proto._h = 0;
proto._fontStyle = "normal";
proto._fontSize = 40;
proto._fontFace = null;
proto._wordWrap = true;
proto._wordWrapWidth = 0;
proto._wordBreak = false;
proto._textOverflow = "";
proto._lineHeight = null;
proto._textBaseline = "alphabetic";
proto._textAlign = "left";
proto._verticalAlign = "top";
proto._offsetY = null;
proto._maxLines = 0;
proto._maxLinesSuffix = "..";
proto._textColor = 4294967295;
proto._paddingLeft = 0;
proto._paddingRight = 0;
proto._shadow = false;
proto._shadowColor = 4278190080;
proto._shadowOffsetX = 0;
proto._shadowOffsetY = 0;
proto._shadowBlur = 5;
proto._highlight = false;
proto._highlightHeight = 0;
proto._highlightColor = 4278190080;
proto._highlightOffset = 0;
proto._highlightPaddingLeft = 0;
proto._highlightPaddingRight = 0;
proto._letterSpacing = 0;
proto._textIndent = 0;
proto._cutSx = 0;
proto._cutEx = 0;
proto._cutSy = 0;
proto._cutEy = 0;
proto._advancedRenderer = false;
proto._fontBaselineRatio = 0;
class SourceTexture extends Texture {
  constructor(stage) {
    super(stage);
    this._textureSource = void 0;
  }
  get textureSource() {
    return this._textureSource;
  }
  set textureSource(v) {
    if (v !== this._textureSource) {
      if (v.isResultTexture) {
        this._precision = this.stage.getRenderPrecision();
      }
      this._textureSource = v;
      this._changed();
    }
  }
  _getTextureSource() {
    return this._textureSource;
  }
}
class Transition extends EventEmitter {
  constructor(manager, settings, element, property) {
    super();
    this.manager = manager;
    this._settings = settings;
    this._element = element;
    this._getter = element.constructor.getGetter(property);
    this._setter = element.constructor.getSetter(property);
    this._merger = settings.merger;
    if (!this._merger) {
      this._merger = element.constructor.getMerger(property);
    }
    this._startValue = this._getter(this._element);
    this._targetValue = this._startValue;
    this._p = 1;
    this._delayLeft = 0;
  }
  start(targetValue) {
    this._startValue = this._getter(this._element);
    if (!this.isAttached()) {
      this._targetValue = targetValue;
      this._p = 1;
      this._updateDrawValue();
    } else {
      if (targetValue === this._startValue) {
        this.reset(targetValue, 1);
      } else {
        this._targetValue = targetValue;
        this._p = 0;
        this._delayLeft = this._settings.delay;
        this.emit("start");
        this.add();
      }
    }
  }
  finish() {
    if (this._p < 1) {
      this._p = 1;
    }
  }
  stop() {
    this.emit("stop");
    this.manager.removeActive(this);
  }
  pause() {
    this.stop();
  }
  play() {
    this.manager.addActive(this);
  }
  reset(targetValue, p) {
    if (!this.isAttached()) {
      this._startValue = this._getter(this._element);
      this._targetValue = targetValue;
      this._p = 1;
      this._updateDrawValue();
    } else {
      this._startValue = this._getter(this._element);
      this._targetValue = targetValue;
      this._p = p;
      this.add();
    }
  }
  _updateDrawValue() {
    this._setter(this._element, this.getDrawValue());
  }
  add() {
    this.manager.addActive(this);
  }
  isAttached() {
    return this._element.attached;
  }
  isRunning() {
    return this._p < 1;
  }
  progress(dt) {
    if (!this.isAttached()) {
      this._p = 1;
    }
    if (this.p < 1) {
      if (this.delayLeft > 0) {
        this._delayLeft -= dt;
        if (this.delayLeft < 0) {
          dt = -this.delayLeft;
          this._delayLeft = 0;
          this.emit("delayEnd");
        } else {
          return;
        }
      }
      if (this._settings.duration == 0) {
        this._p = 1;
      } else {
        this._p += dt / this._settings.duration;
      }
      if (this._p >= 1) {
        this._p = 1;
      }
    }
    this._updateDrawValue();
    this.invokeListeners();
  }
  invokeListeners() {
    this.emit("progress", this.p);
    if (this.p === 1) {
      this.emit("finish");
    }
  }
  updateTargetValue(targetValue) {
    let t = this._settings.timingFunctionImpl(this.p);
    if (t === 1) {
      this._targetValue = targetValue;
    } else if (t === 0) {
      this._startValue = this._targetValue;
      this._targetValue = targetValue;
    } else {
      this._startValue = targetValue - (targetValue - this._targetValue) / (1 - t);
      this._targetValue = targetValue;
    }
  }
  getDrawValue() {
    if (this.p >= 1) {
      return this.targetValue;
    } else {
      let v = this._settings._timingFunctionImpl(this.p);
      return this._merger(this.targetValue, this.startValue, v);
    }
  }
  skipDelay() {
    this._delayLeft = 0;
  }
  get startValue() {
    return this._startValue;
  }
  get targetValue() {
    return this._targetValue;
  }
  get p() {
    return this._p;
  }
  get delayLeft() {
    return this._delayLeft;
  }
  get element() {
    return this._element;
  }
  get settings() {
    return this._settings;
  }
  set settings(v) {
    this._settings = v;
  }
}
Transition.prototype.isTransition = true;
class ObjectList {
  constructor() {
    this._items = [];
    this._refs = {};
  }
  get() {
    return this._items;
  }
  get first() {
    return this._items[0];
  }
  get last() {
    return this._items.length ? this._items[this._items.length - 1] : void 0;
  }
  add(item) {
    this.addAt(item, this._items.length);
  }
  addAt(item, index) {
    if (index >= 0 && index <= this._items.length) {
      let currentIndex = this._items.indexOf(item);
      if (currentIndex === index) {
        return item;
      }
      if (Utils$1.isObjectLiteral(item)) {
        const o = item;
        item = this.createItem(o);
        item.patch(o);
      }
      if (currentIndex != -1) {
        this.setAt(item, index);
      } else {
        if (item.ref) {
          this._refs[item.ref] = item;
        }
        this._items.splice(index, 0, item);
        this.onAdd(item, index);
      }
    } else {
      throw new Error("addAt: The index " + index + " is out of bounds " + this._items.length);
    }
  }
  replaceByRef(item) {
    if (item.ref) {
      const existingItem = this.getByRef(item.ref);
      if (!existingItem) {
        throw new Error("replaceByRef: no item found with reference: " + item.ref);
      }
      this.replace(item, existingItem);
    } else {
      throw new Error("replaceByRef: no ref specified in item");
    }
    this.addAt(item, this._items.length);
  }
  replace(item, prevItem) {
    const index = this.getIndex(prevItem);
    if (index === -1) {
      throw new Error("replace: The previous item does not exist");
    }
    this.setAt(item, index);
  }
  setAt(item, index) {
    if (index >= 0 && index < this._items.length) {
      if (Utils$1.isObjectLiteral(item)) {
        const o = item;
        item = this.createItem(o);
        item.patch(o);
      }
      let currentIndex = this._items.indexOf(item);
      if (currentIndex != -1) {
        if (currentIndex !== index) {
          const fromIndex = currentIndex;
          if (fromIndex !== index) {
            this._items.splice(fromIndex, 1);
            this._items.splice(index, 0, item);
            this.onMove(item, fromIndex, index);
          }
        }
      } else {
        if (index < this._items.length) {
          if (this._items[index].ref) {
            this._refs[this._items[index].ref] = void 0;
          }
        }
        const prevItem = this._items[index];
        this._items[index] = item;
        if (item.ref) {
          this._refs[item.ref] = item;
        }
        this.onSet(item, index, prevItem);
      }
    } else {
      throw new Error("setAt: The index " + index + " is out of bounds " + this._items.length);
    }
  }
  getAt(index) {
    return this._items[index];
  }
  getIndex(item) {
    return this._items.indexOf(item);
  }
  remove(item) {
    let index = this._items.indexOf(item);
    if (index !== -1) {
      this.removeAt(index);
    }
  }
  removeAt(index) {
    if (index >= 0 && index < this._items.length) {
      const item = this._items[index];
      if (item.ref) {
        this._refs[item.ref] = void 0;
      }
      this._items.splice(index, 1);
      this.onRemove(item, index);
      return item;
    } else {
      throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);
    }
  }
  clear() {
    let n = this._items.length;
    if (n) {
      let prev = this._items;
      this._items = [];
      this._refs = {};
      this.onSync(prev, [], []);
    }
  }
  a(o) {
    if (Utils$1.isObjectLiteral(o)) {
      let c = this.createItem(o);
      c.patch(o);
      this.add(c);
      return c;
    } else if (Array.isArray(o)) {
      for (let i = 0, n = o.length; i < n; i++) {
        this.a(o[i]);
      }
      return null;
    } else if (this.isItem(o)) {
      this.add(o);
      return o;
    }
  }
  get length() {
    return this._items.length;
  }
  _getRefs() {
    return this._refs;
  }
  getByRef(ref) {
    return this._refs[ref];
  }
  clearRef(ref) {
    delete this._refs[ref];
  }
  setRef(ref, child) {
    this._refs[ref] = child;
  }
  patch(settings) {
    if (Utils$1.isObjectLiteral(settings)) {
      this._setByObject(settings);
    } else if (Array.isArray(settings)) {
      this._setByArray(settings);
    }
  }
  _setByObject(settings) {
    let refs = this._getRefs();
    let crefs = Object.keys(settings);
    for (let i = 0, n = crefs.length; i < n; i++) {
      let cref = crefs[i];
      let s = settings[cref];
      let c = refs[cref];
      if (!c) {
        if (this.isItem(s)) {
          s.ref = cref;
          this.add(s);
        } else {
          c = this.createItem(s);
          c.ref = cref;
          c.patch(s);
          this.add(c);
        }
      } else {
        if (this.isItem(s)) {
          if (c !== s) {
            let idx = this.getIndex(c);
            s.ref = cref;
            this.setAt(s, idx);
          }
        } else {
          c.patch(s);
        }
      }
    }
  }
  _equalsArray(array) {
    let same = true;
    if (array.length === this._items.length) {
      for (let i = 0, n = this._items.length; i < n && same; i++) {
        same = same && this._items[i] === array[i];
      }
    } else {
      same = false;
    }
    return same;
  }
  _setByArray(array) {
    if (this._equalsArray(array)) {
      return;
    }
    for (let i = 0, n = this._items.length; i < n; i++) {
      this._items[i].marker = true;
    }
    let refs;
    let newItems = [];
    for (let i = 0, n = array.length; i < n; i++) {
      let s = array[i];
      if (this.isItem(s)) {
        s.marker = false;
        newItems.push(s);
      } else {
        let cref = s.ref;
        let c;
        if (cref) {
          if (!refs)
            refs = this._getRefs();
          c = refs[cref];
        }
        if (!c) {
          c = this.createItem(s);
        } else {
          c.marker = false;
        }
        if (Utils$1.isObjectLiteral(s)) {
          c.patch(s);
        }
        newItems.push(c);
      }
    }
    this._setItems(newItems);
  }
  _setItems(newItems) {
    let prevItems = this._items;
    this._items = newItems;
    let removed = prevItems.filter((item) => {
      let m = item.marker;
      delete item.marker;
      return m;
    });
    let added = newItems.filter((item) => prevItems.indexOf(item) === -1);
    if (removed.length || added.length) {
      this._refs = {};
      for (let i = 0, n = this._items.length; i < n; i++) {
        let ref = this._items[i].ref;
        if (ref) {
          this._refs[ref] = this._items[i];
        }
      }
    }
    this.onSync(removed, added, newItems);
  }
  sort(f) {
    const items = this._items.slice();
    items.sort(f);
    this._setByArray(items);
  }
  onAdd(item, index) {
  }
  onRemove(item, index) {
  }
  onSync(removed, added, order) {
  }
  onSet(item, index, prevItem) {
  }
  onMove(item, fromIndex, toIndex) {
  }
  createItem(object) {
    throw new Error("ObjectList.createItem must create and return a new object");
  }
  isItem(object) {
    return false;
  }
  forEach(f) {
    this.get().forEach(f);
  }
}
class ElementChildList extends ObjectList {
  constructor(element) {
    super();
    this._element = element;
  }
  _connectParent(item) {
    const prevParent = item.parent;
    if (prevParent && prevParent !== this._element) {
      const prevChildList = item.parent.childList;
      const index = prevChildList.getIndex(item);
      if (item.ref) {
        prevChildList._refs[item.ref] = void 0;
      }
      prevChildList._items.splice(index, 1);
      prevParent.core.removeChildAt(index);
    }
    item._setParent(this._element);
  }
  onAdd(item, index) {
    this._connectParent(item);
    this._element.core.addChildAt(index, item.core);
  }
  onRemove(item, index) {
    item._setParent(null);
    this._element.core.removeChildAt(index);
  }
  onSync(removed, added, order) {
    for (let i = 0, n = removed.length; i < n; i++) {
      removed[i]._setParent(null);
    }
    for (let i = 0, n = added.length; i < n; i++) {
      this._connectParent(added[i]);
    }
    let gc = (i) => i.core;
    this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));
  }
  onSet(item, index, prevItem) {
    prevItem._setParent(null);
    this._connectParent(item);
    this._element.core.setChildAt(index, item.core);
  }
  onMove(item, fromIndex, toIndex) {
    this._element.core.moveChild(fromIndex, toIndex);
  }
  createItem(object) {
    if (object.type) {
      return new object.type(this._element.stage);
    } else {
      return this._element.stage.createElement();
    }
  }
  isItem(object) {
    return object.isElement;
  }
}
class Element {
  constructor(stage) {
    this.stage = stage;
    this.__id = Element.id++;
    this.__start();
    this._hasEventListeners = false;
    this.__core = new ElementCore(this);
    this.__ref = null;
    this.__attached = false;
    this.__enabled = false;
    this.__active = false;
    this.__parent = null;
    this.__texture = null;
    this.__displayedTexture = null;
    this.__tags = null;
    this.__treeTags = null;
    this.__tagRoot = false;
    this.__childList = null;
    this._w = 0;
    this._h = 0;
  }
  __start() {
  }
  get id() {
    return this.__id;
  }
  set ref(ref) {
    if (this.__ref !== ref) {
      const charcode = ref.charCodeAt(0);
      if (!Utils$1.isUcChar(charcode)) {
        this._throwError("Ref must start with an upper case character: " + ref);
      }
      if (this.__ref !== null) {
        this.removeTag(this.__ref);
        if (this.__parent) {
          this.__parent.__childList.clearRef(this.__ref);
        }
      }
      this.__ref = ref;
      if (this.__ref) {
        this._addTag(this.__ref);
        if (this.__parent) {
          this.__parent.__childList.setRef(this.__ref, this);
        }
      }
    }
  }
  get ref() {
    return this.__ref;
  }
  get core() {
    return this.__core;
  }
  setAsRoot() {
    this.__core.setAsRoot();
    this._updateAttachedFlag();
    this._updateEnabledFlag();
  }
  get isRoot() {
    return this.__core.isRoot;
  }
  _setParent(parent) {
    if (this.__parent === parent)
      return;
    if (this.__parent) {
      this._unsetTagsParent();
    }
    this.__parent = parent;
    if (parent) {
      this._setTagsParent();
    }
    this._updateAttachedFlag();
    this._updateEnabledFlag();
    this._updateCollision();
    if (this.isRoot && parent) {
      this._throwError("Root should not be added as a child! Results are unspecified!");
    }
  }
  getDepth() {
    let depth = 0;
    let p = this.__parent;
    while (p) {
      depth++;
      p = p.__parent;
    }
    return depth;
  }
  getAncestor(l) {
    let p = this;
    while (l > 0 && p.__parent) {
      p = p.__parent;
      l--;
    }
    return p;
  }
  getAncestors() {
    const a = [];
    let p = this;
    while (p) {
      a.push(p);
      p = p.__parent;
    }
    return a;
  }
  getAncestorAtDepth(depth) {
    let levels = this.getDepth() - depth;
    if (levels < 0) {
      return null;
    }
    return this.getAncestor(levels);
  }
  isAncestorOf(c) {
    let p = c;
    while (p = p.parent) {
      if (this === p) {
        return true;
      }
    }
    return false;
  }
  getSharedAncestor(c) {
    let o1 = this;
    let o2 = c;
    let l1 = o1.getDepth();
    let l2 = o2.getDepth();
    if (l1 > l2) {
      o1 = o1.getAncestor(l1 - l2);
    } else if (l2 > l1) {
      o2 = o2.getAncestor(l2 - l1);
    }
    do {
      if (o1 === o2) {
        return o1;
      }
      o1 = o1.__parent;
      o2 = o2.__parent;
    } while (o1 && o2);
    return null;
  }
  get attached() {
    return this.__attached;
  }
  get enabled() {
    return this.__enabled;
  }
  get active() {
    return this.__active;
  }
  _isAttached() {
    return this.__parent ? this.__parent.__attached : this.stage.root === this;
  }
  _isEnabled() {
    return this.__core.visible && this.__core.alpha > 0 && (this.__parent ? this.__parent.__enabled : this.stage.root === this);
  }
  _isActive() {
    return this._isEnabled() && this.withinBoundsMargin;
  }
  _updateAttachedFlag() {
    let newAttached = this._isAttached();
    if (this.__attached !== newAttached) {
      this.__attached = newAttached;
      if (newAttached) {
        this._onSetup();
      }
      let children = this._children.get();
      if (children) {
        let m = children.length;
        if (m > 0) {
          for (let i = 0; i < m; i++) {
            children[i]._updateAttachedFlag();
          }
        }
      }
      if (newAttached) {
        this._onAttach();
      } else {
        this._onDetach();
      }
    }
  }
  _updateEnabledFlag() {
    let newEnabled = this._isEnabled();
    if (this.__enabled !== newEnabled) {
      if (newEnabled) {
        this._onEnabled();
        this._setEnabledFlag();
      } else {
        this._onDisabled();
        this._unsetEnabledFlag();
      }
      let children = this._children.get();
      if (children) {
        let m = children.length;
        if (m > 0) {
          for (let i = 0; i < m; i++) {
            children[i]._updateEnabledFlag();
          }
        }
      }
    }
  }
  _setEnabledFlag() {
    this.__enabled = true;
    this._updateDimensions();
    this._updateTextureCoords();
    if (this.__texture) {
      this.__texture.addElement(this);
    }
    if (this.withinBoundsMargin) {
      this._setActiveFlag();
    }
    if (this.__core.shader) {
      this.__core.shader.addElement(this.__core);
    }
  }
  _unsetEnabledFlag() {
    if (this.__active) {
      this._unsetActiveFlag();
    }
    if (this.__texture) {
      this.__texture.removeElement(this);
    }
    if (this.__core.shader) {
      this.__core.shader.removeElement(this.__core);
    }
    if (this._texturizer) {
      this.texturizer.filters.forEach((filter) => filter.removeElement(this.__core));
    }
    this.__enabled = false;
  }
  _setActiveFlag() {
    this.__active = true;
    if (this.__texture) {
      this.__texture.incActiveCount();
    }
    if (this.__texture) {
      this._enableTexture();
    }
    this._onActive();
  }
  _unsetActiveFlag() {
    if (this.__texture) {
      this.__texture.decActiveCount();
    }
    this.__active = false;
    if (this.__texture) {
      this._disableTexture();
    }
    if (this._hasTexturizer()) {
      this.texturizer.deactivate();
    }
    this._onInactive();
  }
  _onSetup() {
  }
  _onAttach() {
  }
  _onDetach() {
  }
  _onEnabled() {
  }
  _onDisabled() {
  }
  _onActive() {
  }
  _onInactive() {
  }
  _onResize() {
  }
  _getRenderWidth() {
    if (this._w) {
      return this._w;
    } else if (this.__displayedTexture) {
      return this.__displayedTexture.getRenderWidth();
    } else if (this.__texture) {
      return this.__texture.getRenderWidth();
    } else {
      return 0;
    }
  }
  _getRenderHeight() {
    if (this._h) {
      return this._h;
    } else if (this.__displayedTexture) {
      return this.__displayedTexture.getRenderHeight();
    } else if (this.__texture) {
      return this.__texture.getRenderHeight();
    } else {
      return 0;
    }
  }
  get renderWidth() {
    if (this.__enabled) {
      return this.__core.getRenderWidth();
    } else {
      return this._getRenderWidth();
    }
  }
  get renderHeight() {
    if (this.__enabled) {
      return this.__core.getRenderHeight();
    } else {
      return this._getRenderHeight();
    }
  }
  get finalX() {
    return this.__core.x;
  }
  get finalY() {
    return this.__core.y;
  }
  get finalW() {
    return this.__core.w;
  }
  get finalH() {
    return this.__core.h;
  }
  textureIsLoaded() {
    return this.__texture && this.__texture.isLoaded();
  }
  loadTexture() {
    if (this.__texture) {
      this.__texture.load();
      if (!this.__texture.isUsed() || !this._isEnabled()) {
        this._updateDimensions();
      }
    }
  }
  _enableTextureError() {
    const loadError = this.__texture.loadError;
    if (loadError) {
      this.emit("txError", loadError, this.__texture._source);
    }
  }
  _enableTexture() {
    if (this.__texture.isLoaded()) {
      this._setDisplayedTexture(this.__texture);
    } else {
      this._setDisplayedTexture(null);
      this._enableTextureError();
    }
  }
  _disableTexture() {
    this._setDisplayedTexture(null);
  }
  get texture() {
    return this.__texture;
  }
  set texture(v) {
    let texture;
    if (Utils$1.isObjectLiteral(v)) {
      if (v.type) {
        texture = new v.type(this.stage);
      } else {
        texture = this.texture;
      }
      if (texture) {
        Base.patchObject(texture, v);
      }
    } else if (!v) {
      texture = null;
    } else {
      if (v.isTexture) {
        texture = v;
      } else if (v.isTextureSource) {
        texture = new SourceTexture(this.stage);
        texture.textureSource = v;
      } else {
        console.error("[Lightning] Please specify a texture type.");
        return;
      }
    }
    const prevTexture = this.__texture;
    if (texture !== prevTexture) {
      this.__texture = texture;
      if (this.__texture) {
        if (this.__enabled) {
          this.__texture.addElement(this);
          if (this.withinBoundsMargin) {
            if (this.__texture.isLoaded()) {
              this._setDisplayedTexture(this.__texture);
            } else {
              this._enableTextureError();
            }
          }
        }
      } else {
        this._setDisplayedTexture(null);
      }
      if (prevTexture && prevTexture !== this.__displayedTexture) {
        prevTexture.removeElement(this);
      }
      this._updateDimensions();
    }
  }
  get displayedTexture() {
    return this.__displayedTexture;
  }
  _setDisplayedTexture(v) {
    let prevTexture = this.__displayedTexture;
    if (prevTexture && v !== prevTexture) {
      if (this.__texture !== prevTexture) {
        prevTexture.removeElement(this);
      }
    }
    const prevSource = this.__core.displayedTextureSource ? this.__core.displayedTextureSource._source : null;
    const sourceChanged = (v ? v._source : null) !== prevSource;
    this.__displayedTexture = v;
    this._updateDimensions();
    if (this.__displayedTexture) {
      if (sourceChanged) {
        this._updateTextureCoords();
        this.__core.setDisplayedTextureSource(this.__displayedTexture._source);
      }
    } else {
      this.__core.setDisplayedTextureSource(null);
    }
    if (sourceChanged) {
      if (this.__displayedTexture) {
        this.emit("txLoaded", this.__displayedTexture);
      } else {
        this.emit("txUnloaded", this.__displayedTexture);
      }
    }
  }
  onTextureSourceLoaded() {
    if (this.active) {
      this._setDisplayedTexture(this.__texture);
    }
  }
  onTextureSourceLoadError(e) {
    this.emit("txError", e, this.__texture._source);
  }
  forceRenderUpdate() {
    this.__core.setHasRenderUpdates(3);
  }
  onDisplayedTextureClippingChanged() {
    this._updateDimensions();
    this._updateTextureCoords();
  }
  onPrecisionChanged() {
    this._updateDimensions();
  }
  onDimensionsChanged(w, h) {
    if (this.texture instanceof TextTexture) {
      this.texture.w = w;
      this.texture.h = h;
      this.w = w;
      this.h = h;
    }
  }
  _updateDimensions() {
    let w = this._getRenderWidth();
    let h = this._getRenderHeight();
    let unknownSize = false;
    if (!w || !h) {
      if (!this.__displayedTexture && this.__texture) {
        w = w || this.__texture.mw;
        h = h || this.__texture.mh;
        if ((!w || !h) && this.__texture.isAutosizeTexture()) {
          unknownSize = true;
        }
      }
    }
    if (this.__core.setDimensions(w, h, unknownSize)) {
      this._onResize();
    }
  }
  _updateTextureCoords() {
    if (this.displayedTexture && this.displayedTexture._source) {
      let displayedTexture = this.displayedTexture;
      let displayedTextureSource = this.displayedTexture._source;
      let tx1 = 0, ty1 = 0, tx2 = 1, ty2 = 1;
      if (displayedTexture.clipping) {
        let w = displayedTextureSource.getRenderWidth();
        let h = displayedTextureSource.getRenderHeight();
        let iw, ih, rw, rh;
        iw = 1 / w;
        ih = 1 / h;
        if (displayedTexture.pw) {
          rw = displayedTexture.pw * iw;
        } else {
          rw = (w - displayedTexture.px) * iw;
        }
        if (displayedTexture.ph) {
          rh = displayedTexture.ph * ih;
        } else {
          rh = (h - displayedTexture.py) * ih;
        }
        iw *= displayedTexture.px;
        ih *= displayedTexture.py;
        tx1 = iw;
        ty1 = ih;
        tx2 = tx2 * rw + iw;
        ty2 = ty2 * rh + ih;
        tx1 = Math.max(0, tx1);
        ty1 = Math.max(0, ty1);
        tx2 = Math.min(1, tx2);
        ty2 = Math.min(1, ty2);
      }
      if (displayedTextureSource._flipTextureY) {
        let tempty = ty2;
        ty2 = ty1;
        ty1 = tempty;
      }
      this.__core.setTextureCoords(tx1, ty1, tx2, ty2);
    }
  }
  getCornerPoints() {
    return this.__core.getCornerPoints();
  }
  _unsetTagsParent() {
    if (this.__tags) {
      this.__tags.forEach((tag) => {
        let p = this;
        while (p = p.__parent) {
          let parentTreeTags = p.__treeTags.get(tag);
          parentTreeTags.delete(this);
          if (p.__tagRoot) {
            break;
          }
        }
      });
    }
    let tags = null;
    let n = 0;
    if (this.__treeTags) {
      if (!this.__tagRoot) {
        tags = Utils$1.iteratorToArray(this.__treeTags.keys());
        n = tags.length;
        if (n > 0) {
          for (let i = 0; i < n; i++) {
            let tagSet = this.__treeTags.get(tags[i]);
            let p = this;
            while (p = p.__parent) {
              let parentTreeTags = p.__treeTags.get(tags[i]);
              tagSet.forEach(function(comp) {
                parentTreeTags.delete(comp);
              });
              if (p.__tagRoot) {
                break;
              }
            }
          }
        }
      }
    }
  }
  _setTagsParent() {
    if (this.__tags) {
      this.__tags.forEach((tag) => {
        let p = this;
        while (p = p.__parent) {
          if (!p.__treeTags) {
            p.__treeTags = /* @__PURE__ */ new Map();
          }
          let s = p.__treeTags.get(tag);
          if (!s) {
            s = /* @__PURE__ */ new Set();
            p.__treeTags.set(tag, s);
          }
          s.add(this);
          if (p.__tagRoot) {
            break;
          }
        }
      });
    }
    if (this.__treeTags && this.__treeTags.size) {
      if (!this.__tagRoot) {
        this.__treeTags.forEach((tagSet, tag) => {
          let p = this;
          while (!p.__tagRoot && (p = p.__parent)) {
            if (p.__tagRoot)
              ;
            if (!p.__treeTags) {
              p.__treeTags = /* @__PURE__ */ new Map();
            }
            let s = p.__treeTags.get(tag);
            if (!s) {
              s = /* @__PURE__ */ new Set();
              p.__treeTags.set(tag, s);
            }
            tagSet.forEach(function(comp) {
              s.add(comp);
            });
          }
        });
      }
    }
  }
  _getByTag(tag) {
    if (!this.__treeTags) {
      return [];
    }
    let t = this.__treeTags.get(tag);
    return t ? Utils$1.setToArray(t) : [];
  }
  getTags() {
    return this.__tags ? this.__tags : [];
  }
  setTags(tags) {
    tags = tags.reduce((acc, tag) => {
      return acc.concat(tag.split(" "));
    }, []);
    if (this.__ref) {
      tags.push(this.__ref);
    }
    let i, n = tags.length;
    let removes = [];
    let adds = [];
    for (i = 0; i < n; i++) {
      if (!this.hasTag(tags[i])) {
        adds.push(tags[i]);
      }
    }
    let currentTags = this.tags || [];
    n = currentTags.length;
    for (i = 0; i < n; i++) {
      if (tags.indexOf(currentTags[i]) == -1) {
        removes.push(currentTags[i]);
      }
    }
    for (i = 0; i < removes.length; i++) {
      this.removeTag(removes[i]);
    }
    for (i = 0; i < adds.length; i++) {
      this.addTag(adds[i]);
    }
  }
  addTag(tag) {
    if (tag.indexOf(" ") === -1) {
      if (Utils$1.isUcChar(tag.charCodeAt(0))) {
        this._throwError("Tag may not start with an upper case character.");
      }
      this._addTag(tag);
    } else {
      const tags = tag.split(" ");
      for (let i = 0, m = tags.length; i < m; i++) {
        const tag2 = tags[i];
        if (Utils$1.isUcChar(tag2.charCodeAt(0))) {
          this._throwError("Tag may not start with an upper case character.");
        }
        this._addTag(tag2);
      }
    }
  }
  _addTag(tag) {
    if (!this.__tags) {
      this.__tags = [];
    }
    if (this.__tags.indexOf(tag) === -1) {
      this.__tags.push(tag);
      let p = this.__parent;
      if (p) {
        do {
          if (!p.__treeTags) {
            p.__treeTags = /* @__PURE__ */ new Map();
          }
          let s = p.__treeTags.get(tag);
          if (!s) {
            s = /* @__PURE__ */ new Set();
            p.__treeTags.set(tag, s);
          }
          s.add(this);
        } while (!p.__tagRoot && (p = p.__parent));
      }
    }
  }
  removeTag(tag) {
    let i = this.__tags.indexOf(tag);
    if (i !== -1) {
      this.__tags.splice(i, 1);
      let p = this.__parent;
      if (p) {
        do {
          let list = p.__treeTags.get(tag);
          if (list) {
            list.delete(this);
          }
        } while (!p.__tagRoot && (p = p.__parent));
      }
    }
  }
  hasTag(tag) {
    return this.__tags && this.__tags.indexOf(tag) !== -1;
  }
  _tag(tag) {
    if (tag.indexOf(".") !== -1) {
      return this.mtag(tag)[0];
    } else {
      if (this.__treeTags) {
        let t = this.__treeTags.get(tag);
        if (t) {
          const item = t.values().next();
          return item ? item.value : void 0;
        }
      }
    }
  }
  get tag() {
    return this._tag;
  }
  set tag(t) {
    this.tags = t;
  }
  mtag(tag) {
    let idx = tag.indexOf(".");
    if (idx >= 0) {
      let parts = tag.split(".");
      let res = this._getByTag(parts[0]);
      let level = 1;
      let c = parts.length;
      while (res.length && level < c) {
        let resn = [];
        for (let j = 0, n = res.length; j < n; j++) {
          resn = resn.concat(res[j]._getByTag(parts[level]));
        }
        res = resn;
        level++;
      }
      return res;
    } else {
      return this._getByTag(tag);
    }
  }
  stag(tag, settings) {
    let t = this.mtag(tag);
    let n = t.length;
    for (let i = 0; i < n; i++) {
      Base.patchObject(t[i], settings);
    }
  }
  get tagRoot() {
    return this.__tagRoot;
  }
  set tagRoot(v) {
    if (this.__tagRoot !== v) {
      if (!v) {
        this._setTagsParent();
      } else {
        this._unsetTagsParent();
      }
      this.__tagRoot = v;
    }
  }
  sel(path) {
    const results = this.select(path);
    if (results.length) {
      return results[0];
    } else {
      return void 0;
    }
  }
  select(path) {
    if (path.indexOf(",") !== -1) {
      let selectors = path.split(",");
      let res = [];
      for (let i = 0; i < selectors.length; i++) {
        res = res.concat(this._select(selectors[i]));
      }
      return res;
    } else {
      return this._select(path);
    }
  }
  _select(path) {
    if (path === "")
      return [this];
    let pointIdx = path.indexOf(".");
    let arrowIdx = path.indexOf(">");
    if (pointIdx === -1 && arrowIdx === -1) {
      return this.mtag(path);
    }
    let isRef;
    if (arrowIdx === 0) {
      isRef = true;
      path = path.substr(1);
    } else if (pointIdx === 0) {
      isRef = false;
      path = path.substr(1);
    } else {
      isRef = false;
    }
    return this._selectChilds(path, isRef);
  }
  _selectChilds(path, isRef) {
    const pointIdx = path.indexOf(".");
    const arrowIdx = path.indexOf(">");
    if (pointIdx === -1 && arrowIdx === -1) {
      if (isRef) {
        const ref = this.getByRef(path);
        return ref ? [ref] : [];
      } else {
        return this.mtag(path);
      }
    }
    if (arrowIdx === -1 || pointIdx !== -1 && pointIdx < arrowIdx) {
      let next;
      const str = path.substr(0, pointIdx);
      if (isRef) {
        const ref = this.getByRef(str);
        next = ref ? [ref] : [];
      } else {
        next = this.mtag(str);
      }
      let total = [];
      const subPath = path.substr(pointIdx + 1);
      for (let i = 0, n = next.length; i < n; i++) {
        total = total.concat(next[i]._selectChilds(subPath, false));
      }
      return total;
    } else {
      let next;
      const str = path.substr(0, arrowIdx);
      if (isRef) {
        const ref = this.getByRef(str);
        next = ref ? [ref] : [];
      } else {
        next = this.mtag(str);
      }
      let total = [];
      const subPath = path.substr(arrowIdx + 1);
      for (let i = 0, n = next.length; i < n; i++) {
        total = total.concat(next[i]._selectChilds(subPath, true));
      }
      return total;
    }
  }
  getByRef(ref) {
    return this.childList.getByRef(ref);
  }
  getLocationString() {
    let i;
    i = this.__parent ? this.__parent._children.getIndex(this) : "R";
    let localTags = this.getTags();
    let str = this.__parent ? this.__parent.getLocationString() : "";
    if (this.ref) {
      str += ":[" + i + "]" + this.ref;
    } else if (localTags.length) {
      str += ":[" + i + "]" + localTags.join(",");
    } else {
      str += ":[" + i + "]#" + this.id;
    }
    return str;
  }
  toString() {
    let obj = this.getSettings();
    return Element.getPrettyString(obj, "");
  }
  static getPrettyString(obj, indent) {
    let children = obj.children;
    delete obj.children;
    let colorKeys = ["color", "colorUl", "colorUr", "colorBl", "colorBr"];
    let str = JSON.stringify(obj, function(k, v) {
      if (colorKeys.indexOf(k) !== -1) {
        return "COLOR[" + v.toString(16) + "]";
      }
      return v;
    });
    str = str.replace(/"COLOR\[([a-f0-9]{1,8})\]"/g, "0x$1");
    if (children) {
      let childStr = "";
      if (Utils$1.isObjectLiteral(children)) {
        let refs = Object.keys(children);
        childStr = "";
        for (let i = 0, n = refs.length; i < n; i++) {
          childStr += `
${indent}  "${refs[i]}":`;
          delete children[refs[i]].ref;
          childStr += Element.getPrettyString(children[refs[i]], indent + "  ") + (i < n - 1 ? "," : "");
        }
        let isEmpty = str === "{}";
        str = str.substr(0, str.length - 1) + (isEmpty ? "" : ",") + childStr + "\n" + indent + "}";
      } else {
        let n = children.length;
        childStr = "[";
        for (let i = 0; i < n; i++) {
          childStr += Element.getPrettyString(children[i], indent + "  ") + (i < n - 1 ? "," : "") + "\n";
        }
        childStr += indent + "]}";
        let isEmpty = str === "{}";
        str = str.substr(0, str.length - 1) + (isEmpty ? "" : ",") + '"children":\n' + indent + childStr + "}";
      }
    }
    return str;
  }
  getSettings() {
    let settings = this.getNonDefaults();
    let children = this._children.get();
    if (children) {
      let n = children.length;
      if (n) {
        const childArray = [];
        let missing = false;
        for (let i = 0; i < n; i++) {
          childArray.push(children[i].getSettings());
          missing = missing || !children[i].ref;
        }
        if (!missing) {
          settings.children = {};
          childArray.forEach((child) => {
            settings.children[child.ref] = child;
          });
        } else {
          settings.children = childArray;
        }
      }
    }
    settings.id = this.id;
    return settings;
  }
  getNonDefaults() {
    let settings = {};
    if (this.constructor !== Element) {
      settings.type = this.constructor.name;
    }
    if (this.__ref) {
      settings.ref = this.__ref;
    }
    if (this.__tags && this.__tags.length) {
      settings.tags = this.__tags;
    }
    if (this.x !== 0)
      settings.x = this.x;
    if (this.y !== 0)
      settings.y = this.y;
    if (this.w !== 0)
      settings.w = this.w;
    if (this.h !== 0)
      settings.h = this.h;
    if (this.scaleX === this.scaleY) {
      if (this.scaleX !== 1)
        settings.scale = this.scaleX;
    } else {
      if (this.scaleX !== 1)
        settings.scaleX = this.scaleX;
      if (this.scaleY !== 1)
        settings.scaleY = this.scaleY;
    }
    if (this.pivotX === this.pivotY) {
      if (this.pivotX !== 0.5)
        settings.pivot = this.pivotX;
    } else {
      if (this.pivotX !== 0.5)
        settings.pivotX = this.pivotX;
      if (this.pivotY !== 0.5)
        settings.pivotY = this.pivotY;
    }
    if (this.mountX === this.mountY) {
      if (this.mountX !== 0)
        settings.mount = this.mountX;
    } else {
      if (this.mountX !== 0)
        settings.mountX = this.mountX;
      if (this.mountY !== 0)
        settings.mountY = this.mountY;
    }
    if (this.alpha !== 1)
      settings.alpha = this.alpha;
    if (!this.visible)
      settings.visible = false;
    if (this.rotation !== 0)
      settings.rotation = this.rotation;
    if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {
      if (this.colorUl !== 4294967295)
        settings.color = this.colorUl.toString(16);
    } else {
      if (this.colorUl !== 4294967295)
        settings.colorUl = this.colorUl.toString(16);
      if (this.colorUr !== 4294967295)
        settings.colorUr = this.colorUr.toString(16);
      if (this.colorBl !== 4294967295)
        settings.colorBl = this.colorBl.toString(16);
      if (this.colorBr !== 4294967295)
        settings.colorBr = this.colorBr.toString(16);
    }
    if (this.zIndex)
      settings.zIndex = this.zIndex;
    if (this.forceZIndexContext)
      settings.forceZIndexContext = true;
    if (this.clipping)
      settings.clipping = this.clipping;
    if (!this.clipbox)
      settings.clipbox = this.clipbox;
    if (this.__texture) {
      let tnd = this.__texture.getNonDefaults();
      if (Object.keys(tnd).length) {
        settings.texture = tnd;
      }
    }
    if (this.shader && Utils$1.isFunction(this.shader.getNonDefaults)) {
      let tnd = this.shader.getNonDefaults();
      if (Object.keys(tnd).length) {
        settings.shader = tnd;
      }
    }
    if (this._hasTexturizer()) {
      if (this.texturizer.enabled) {
        settings.renderToTexture = this.texturizer.enabled;
      }
      if (this.texturizer.lazy) {
        settings.renderToTextureLazy = this.texturizer.lazy;
      }
      if (this.texturizer.colorize) {
        settings.colorizeResultTexture = this.texturizer.colorize;
      }
      if (this.texturizer.renderOffscreen) {
        settings.renderOffscreen = this.texturizer.renderOffscreen;
      }
    }
    return settings;
  }
  static getGetter(propertyPath) {
    let getter = Element.PROP_GETTERS.get(propertyPath);
    if (!getter) {
      getter = new Function("obj", "return obj." + propertyPath);
      Element.PROP_GETTERS.set(propertyPath, getter);
    }
    return getter;
  }
  static getSetter(propertyPath) {
    let setter = Element.PROP_SETTERS.get(propertyPath);
    if (!setter) {
      setter = new Function("obj", "v", "obj." + propertyPath + " = v");
      Element.PROP_SETTERS.set(propertyPath, setter);
    }
    return setter;
  }
  get withinBoundsMargin() {
    return this.__core._withinBoundsMargin;
  }
  _enableWithinBoundsMargin() {
    if (this.__enabled) {
      this._setActiveFlag();
    }
  }
  _disableWithinBoundsMargin() {
    if (this.__active) {
      this._unsetActiveFlag();
    }
  }
  set boundsMargin(v) {
    if (!Array.isArray(v) && v !== null) {
      throw new Error("boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)");
    }
    this.__core.boundsMargin = v;
  }
  get boundsMargin() {
    return this.__core.boundsMargin;
  }
  get x() {
    return this.__core.offsetX;
  }
  set x(v) {
    this.__core.offsetX = v;
  }
  get y() {
    return this.__core.offsetY;
  }
  set y(v) {
    this.__core.offsetY = v;
  }
  get w() {
    return this._w;
  }
  set w(v) {
    if (Utils$1.isFunction(v)) {
      this._w = 0;
      this.__core.funcW = v;
    } else {
      v = Math.max(v, 0);
      if (this._w !== v) {
        this.__core.disableFuncW();
        this._w = v;
        this._updateDimensions();
      }
    }
  }
  get h() {
    return this._h;
  }
  set h(v) {
    if (Utils$1.isFunction(v)) {
      this._h = 0;
      this.__core.funcH = v;
    } else {
      v = Math.max(v, 0);
      if (this._h !== v) {
        this.__core.disableFuncH();
        this._h = v;
        this._updateDimensions();
      }
    }
  }
  get collision() {
    return this._collision;
  }
  set collision(v) {
    this._collision = v;
  }
  _updateCollision() {
    if (this.collision && this.__parent && this.__parent.collision === void 0) {
      this.__parent.collision = 2;
    }
  }
  get scaleX() {
    return this.__core.scaleX;
  }
  set scaleX(v) {
    this.__core.scaleX = v;
  }
  get scaleY() {
    return this.__core.scaleY;
  }
  set scaleY(v) {
    this.__core.scaleY = v;
  }
  get scale() {
    return this.__core.scale;
  }
  set scale(v) {
    this.__core.scale = v;
  }
  get pivotX() {
    return this.__core.pivotX;
  }
  set pivotX(v) {
    this.__core.pivotX = v;
  }
  get pivotY() {
    return this.__core.pivotY;
  }
  set pivotY(v) {
    this.__core.pivotY = v;
  }
  get pivot() {
    return this.__core.pivot;
  }
  set pivot(v) {
    this.__core.pivot = v;
  }
  get mountX() {
    return this.__core.mountX;
  }
  set mountX(v) {
    this.__core.mountX = v;
  }
  get mountY() {
    return this.__core.mountY;
  }
  set mountY(v) {
    this.__core.mountY = v;
  }
  get mount() {
    return this.__core.mount;
  }
  set mount(v) {
    this.__core.mount = v;
  }
  get rotation() {
    return this.__core.rotation;
  }
  set rotation(v) {
    this.__core.rotation = v;
  }
  get alpha() {
    return this.__core.alpha;
  }
  set alpha(v) {
    this.__core.alpha = v;
  }
  get visible() {
    return this.__core.visible;
  }
  set visible(v) {
    this.__core.visible = v;
  }
  get colorUl() {
    return this.__core.colorUl;
  }
  set colorUl(v) {
    this.__core.colorUl = v;
  }
  get colorUr() {
    return this.__core.colorUr;
  }
  set colorUr(v) {
    this.__core.colorUr = v;
  }
  get colorBl() {
    return this.__core.colorBl;
  }
  set colorBl(v) {
    this.__core.colorBl = v;
  }
  get colorBr() {
    return this.__core.colorBr;
  }
  set colorBr(v) {
    this.__core.colorBr = v;
  }
  get color() {
    return this.__core.colorUl;
  }
  set color(v) {
    if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {
      this.colorUl = v;
      this.colorUr = v;
      this.colorBl = v;
      this.colorBr = v;
    }
  }
  get colorTop() {
    return this.colorUl;
  }
  set colorTop(v) {
    if (this.colorUl !== v || this.colorUr !== v) {
      this.colorUl = v;
      this.colorUr = v;
    }
  }
  get colorBottom() {
    return this.colorBl;
  }
  set colorBottom(v) {
    if (this.colorBl !== v || this.colorBr !== v) {
      this.colorBl = v;
      this.colorBr = v;
    }
  }
  get colorLeft() {
    return this.colorUl;
  }
  set colorLeft(v) {
    if (this.colorUl !== v || this.colorBl !== v) {
      this.colorUl = v;
      this.colorBl = v;
    }
  }
  get colorRight() {
    return this.colorUr;
  }
  set colorRight(v) {
    if (this.colorUr !== v || this.colorBr !== v) {
      this.colorUr = v;
      this.colorBr = v;
    }
  }
  get zIndex() {
    return this.__core.zIndex;
  }
  set zIndex(v) {
    this.__core.zIndex = v;
  }
  get forceZIndexContext() {
    return this.__core.forceZIndexContext;
  }
  set forceZIndexContext(v) {
    this.__core.forceZIndexContext = v;
  }
  get clipping() {
    return this.__core.clipping;
  }
  set clipping(v) {
    this.__core.clipping = v;
  }
  get clipbox() {
    return this.__core.clipbox;
  }
  set clipbox(v) {
    this.__core.clipbox = v;
  }
  get tags() {
    return this.getTags();
  }
  set tags(v) {
    if (!Array.isArray(v))
      v = [v];
    this.setTags(v);
  }
  set t(v) {
    this.tags = v;
  }
  get _children() {
    if (!this.__childList) {
      this.__childList = new ElementChildList(this, false);
    }
    return this.__childList;
  }
  get childList() {
    if (!this._allowChildrenAccess()) {
      this._throwError("Direct access to children is not allowed in " + this.getLocationString());
    }
    return this._children;
  }
  hasChildren() {
    return this._allowChildrenAccess() && this.__childList && this.__childList.length > 0;
  }
  _allowChildrenAccess() {
    return true;
  }
  get children() {
    return this.childList.get();
  }
  set children(children) {
    this.childList.patch(children);
  }
  add(o) {
    return this.childList.a(o);
  }
  get p() {
    return this.__parent;
  }
  get parent() {
    return this.__parent;
  }
  get src() {
    if (this.texture && this.texture instanceof ImageTexture) {
      return this.texture._src;
    } else {
      return void 0;
    }
  }
  set src(v) {
    const texture = new ImageTexture(this.stage);
    texture.src = v;
    this.texture = texture;
  }
  set mw(v) {
    if (this.texture) {
      this.texture.mw = v;
      this._updateDimensions();
    } else {
      this._throwError("Please set mw after setting a texture.");
    }
  }
  set mh(v) {
    if (this.texture) {
      this.texture.mh = v;
      this._updateDimensions();
    } else {
      this._throwError("Please set mh after setting a texture.");
    }
  }
  get rect() {
    return this.texture === this.stage.rectangleTexture;
  }
  set rect(v) {
    if (v) {
      this.texture = this.stage.rectangleTexture;
    } else {
      this.texture = null;
    }
  }
  enableTextTexture() {
    if (!this.texture || !(this.texture instanceof TextTexture)) {
      this.texture = new TextTexture(this.stage);
      if (!this.texture.w && !this.texture.h) {
        this.texture.w = this.w;
        this.texture.h = this.h;
      }
    }
    return this.texture;
  }
  get text() {
    if (this.texture && this.texture instanceof TextTexture) {
      return this.texture;
    } else {
      return null;
    }
  }
  set text(v) {
    if (!this.texture || !(this.texture instanceof TextTexture)) {
      this.enableTextTexture();
    }
    if (Utils$1.isString(v)) {
      this.texture.text = v;
    } else {
      this.texture.patch(v);
    }
  }
  set onUpdate(f) {
    this.__core.onUpdate = f;
  }
  set onAfterCalcs(f) {
    this.__core.onAfterCalcs = f;
  }
  set onAfterUpdate(f) {
    this.__core.onAfterUpdate = f;
  }
  forceUpdate() {
    this.__core._setHasUpdates();
  }
  get shader() {
    return this.__core.shader;
  }
  set shader(v) {
    if (Utils$1.isObjectLiteral(v) && !v.type) {
      if (this.shader) {
        this.shader.patch(v);
      }
    } else {
      const shader = Shader.create(this.stage, v);
      if (this.__enabled && this.__core.shader) {
        this.__core.shader.removeElement(this.__core);
      }
      this.__core.shader = shader;
      if (this.__enabled && this.__core.shader) {
        this.__core.shader.addElement(this.__core);
      }
    }
  }
  _hasTexturizer() {
    return !!this.__core._texturizer;
  }
  get renderToTexture() {
    return this.rtt;
  }
  set renderToTexture(v) {
    this.rtt = v;
  }
  get rtt() {
    return this._hasTexturizer() && this.texturizer.enabled;
  }
  set rtt(v) {
    this.texturizer.enabled = v;
  }
  get rttLazy() {
    return this._hasTexturizer() && this.texturizer.lazy;
  }
  set rttLazy(v) {
    this.texturizer.lazy = v;
  }
  get renderOffscreen() {
    return this._hasTexturizer() && this.texturizer.renderOffscreen;
  }
  set renderOffscreen(v) {
    this.texturizer.renderOffscreen = v;
  }
  get colorizeResultTexture() {
    return this._hasTexturizer() && this.texturizer.colorize;
  }
  set colorizeResultTexture(v) {
    this.texturizer.colorize = v;
  }
  getTexture() {
    return this.texturizer._getTextureSource();
  }
  get texturizer() {
    return this.__core.texturizer;
  }
  patch(settings) {
    let paths = Object.keys(settings);
    for (let i = 0, n = paths.length; i < n; i++) {
      let path = paths[i];
      const v = settings[path];
      const firstCharCode = path.charCodeAt(0);
      if (Utils$1.isUcChar(firstCharCode)) {
        const child = this.getByRef(path);
        if (!child) {
          if (v !== void 0) {
            let c;
            if (Utils$1.isObjectLiteral(v)) {
              c = this.childList.createItem(v);
              c.patch(v);
            } else if (Utils$1.isObject(v)) {
              c = v;
            }
            if (c.isElement) {
              c.ref = path;
            }
            this.childList.a(c);
          }
        } else {
          if (v === void 0) {
            if (child.parent) {
              child.parent.childList.remove(child);
            }
          } else if (Utils$1.isObjectLiteral(v)) {
            child.patch(v);
          } else if (v.isElement) {
            v.ref = path;
            this.childList.replace(v, child);
          } else {
            this._throwError("Unexpected value for path: " + path);
          }
        }
      } else {
        Base.patchObjectProperty(this, path, v);
      }
    }
  }
  _throwError(message) {
    throw new Error(this.constructor.name + " (" + this.getLocationString() + "): " + message);
  }
  animation(settings) {
    return this.stage.animations.createAnimation(this, settings);
  }
  transition(property, settings = null) {
    if (settings === null) {
      return this._getTransition(property);
    } else {
      this._setTransition(property, settings);
      return null;
    }
  }
  set transitions(object) {
    let keys = Object.keys(object);
    keys.forEach((property) => {
      this.transition(property, object[property]);
    });
  }
  set smooth(object) {
    let keys = Object.keys(object);
    keys.forEach((property) => {
      let value = object[property];
      if (Array.isArray(value)) {
        this.setSmooth(property, value[0], value[1]);
      } else {
        this.setSmooth(property, value);
      }
    });
  }
  fastForward(property) {
    if (this._transitions) {
      let t = this._transitions[property];
      if (t && t.isTransition) {
        t.finish();
      }
    }
  }
  _getTransition(property) {
    if (!this._transitions) {
      this._transitions = {};
    }
    let t = this._transitions[property];
    if (!t) {
      t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);
    } else if (t.isTransitionSettings) {
      t = new Transition(
        this.stage.transitions,
        t,
        this,
        property
      );
    }
    this._transitions[property] = t;
    return t;
  }
  _setTransition(property, settings) {
    if (!settings) {
      this._removeTransition(property);
    } else {
      if (Utils$1.isObjectLiteral(settings)) {
        settings = this.stage.transitions.createSettings(settings);
      }
      if (!this._transitions) {
        this._transitions = {};
      }
      let current = this._transitions[property];
      if (current && current.isTransition) {
        current.settings = settings;
        return current;
      } else {
        this._transitions[property] = settings;
      }
    }
  }
  _removeTransition(property) {
    if (this._transitions) {
      delete this._transitions[property];
    }
  }
  getSmooth(property, v) {
    let t = this._getTransition(property);
    if (t && t.isAttached()) {
      return t.targetValue;
    } else {
      return v;
    }
  }
  setSmooth(property, v, settings) {
    if (settings) {
      this._setTransition(property, settings);
    }
    let t = this._getTransition(property);
    t.start(v);
    return t;
  }
  get flex() {
    return this.__core.flex;
  }
  set flex(v) {
    this.__core.flex = v;
  }
  get flexItem() {
    return this.__core.flexItem;
  }
  set flexItem(v) {
    this.__core.flexItem = v;
  }
  static isColorProperty(property) {
    return property.toLowerCase().indexOf("color") >= 0;
  }
  static getMerger(property) {
    if (Element.isColorProperty(property)) {
      return StageUtils.mergeColors;
    } else {
      return StageUtils.mergeNumbers;
    }
  }
  toJSON() {
    const ref = [`${this.constructor.name}`];
    const tree = {};
    tree[ref] = {};
    if (this.hasChildren()) {
      Element.collectChildren(tree[ref], this.__childList);
    } else {
      tree[ref] = { ...Element.getProperties(this) };
    }
    return tree;
  }
  static collectChildren(tree, children) {
    const childList = children;
    for (let i = 0, j = childList.length; i < j; i++) {
      const element = childList.getAt(i);
      const ref = `${element.__ref || `Element-${element.id}`}`;
      const properties = this.getProperties(element);
      tree[ref] = { ...properties };
      if (element.hasChildren()) {
        tree[ref].children = {};
        this.collectChildren(
          tree[ref].children,
          element.__childList
        );
      }
    }
  }
  static getProperties(element) {
    const props = {};
    const list = [
      "alpha",
      "active",
      "attached",
      "boundsMargin",
      "color",
      "clipping",
      "enabled",
      "h",
      "id",
      "isComponent",
      "mount",
      "mountY",
      "mountX",
      "pivot",
      "pivotX",
      "pivotY",
      "ref",
      "renderOffscreen",
      "renderToTexture",
      "scale",
      "scaleX",
      "scaleY",
      "state",
      "tag",
      "visible",
      "w",
      "x",
      "y",
      "zIndex",
      "!!flex",
      "!!flexItem",
      "hasFocus()",
      "hasFinalFocus()"
    ];
    let n = list.length;
    while (n--) {
      let key = list[n];
      const getBoolean = /^!{2}/;
      const isFunction = /\(\)$/;
      if (getBoolean.test(key)) {
        key = key.substring(2, key.length);
        props[key] = !!element[key];
      } else if (isFunction.test(key)) {
        key = key.substring(0, key.length - 2);
        if (typeof element[key] === "function") {
          props[key] = element[key]();
        }
      } else {
        props[key] = element[key];
      }
    }
    return { ...props, ...element.getNonDefaults() };
  }
}
EventEmitter.addAsMixin(Element);
Element.prototype.isElement = 1;
Element.id = 1;
Element.PROP_GETTERS = /* @__PURE__ */ new Map();
Element.PROP_SETTERS = /* @__PURE__ */ new Map();
class StateMachine {
  constructor() {
    StateMachine.setupStateMachine(this);
  }
  static setupStateMachine(target) {
    const targetConstructor = target.constructor;
    const router = StateMachine.create(targetConstructor);
    Object.setPrototypeOf(target, router.prototype);
    target.constructor = targetConstructor;
    target._initStateMachine();
  }
  static create(type) {
    if (!type.hasOwnProperty("_sm")) {
      const stateMachineType = new StateMachineType(type);
      type._sm = stateMachineType;
    }
    return type._sm.router;
  }
  fire(event, ...args) {
    if (this._hasMethod(event)) {
      return this[event](...args);
    }
  }
  _getState() {
    return this._state.__path;
  }
  _inState(statePath, currentStatePath = this._state.__path) {
    const state = this._sm.getStateByPath(statePath);
    const currentState = this._sm.getStateByPath(currentStatePath);
    const level = state.__level;
    const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);
    return stateAtLevel === state;
  }
  _hasMember(name) {
    return !!this.constructor.prototype[name];
  }
  _hasMethod(name) {
    const member = this.constructor.prototype[name];
    return !!member && typeof member === "function";
  }
  _setState(statePath, args) {
    const setStateId = ++this._setStateCounter;
    this._setStateId = setStateId;
    if (this._state.__path !== statePath) {
      let newState = this._sm._stateMap[statePath];
      if (!newState) {
        newState = this._sm.getStateByPath(statePath);
      }
      const prevState = this._state;
      const hasDifferentEnterMethod = newState.prototype.$enter !== this._state.prototype.$enter;
      const hasDifferentExitMethod = newState.prototype.$exit !== this._state.prototype.$exit;
      if (hasDifferentEnterMethod || hasDifferentExitMethod) {
        const sharedState = StateMachine._getSharedState(this._state, newState);
        const context = {
          newState: newState.__path,
          prevState: prevState.__path,
          sharedState: sharedState.__path
        };
        const sharedLevel = sharedState.__level;
        if (hasDifferentExitMethod) {
          const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);
          for (let i = 0, n = exitStates.length; i < n; i++) {
            this.__setState(exitStates[i]);
            this._callExit(this._state, args, context);
            const stateChangeOverridden = this._setStateId !== setStateId;
            if (stateChangeOverridden) {
              return;
            }
          }
        }
        if (hasDifferentEnterMethod) {
          const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();
          for (let i = 0, n = enterStates.length; i < n; i++) {
            this.__setState(enterStates[i]);
            this._callEnter(this._state, args, context);
            const stateChangeOverridden = this._setStateId !== setStateId;
            if (stateChangeOverridden) {
              return;
            }
          }
        }
      }
      this.__setState(newState);
      if (this._changedState) {
        const context = {
          newState: newState.__path,
          prevState: prevState.__path
        };
        if (args) {
          this._changedState(context, ...args);
        } else {
          this._changedState(context);
        }
      }
      if (this._onStateChange) {
        const context = {
          newState: newState.__path,
          prevState: prevState.__path
        };
        this._onStateChange(context);
      }
    }
  }
  _callEnter(state, args = [], context) {
    const hasParent = !!state.__parent;
    if (state.prototype.$enter) {
      if (!hasParent || state.__parent.prototype.$enter !== state.prototype.$enter) {
        state.prototype.$enter.apply(this, [context, ...args]);
      }
    }
  }
  _callExit(state, args = [], context) {
    const hasParent = !!state.__parent;
    if (state.prototype.$exit) {
      if (!hasParent || state.__parent.prototype.$exit !== state.prototype.$exit) {
        state.prototype.$exit.apply(this, [context, ...args]);
      }
    }
  }
  __setState(state) {
    this._state = state;
    this._stateIndex = state.__index;
    this.constructor = state;
  }
  _initStateMachine() {
    this._state = null;
    this._stateIndex = 0;
    this._setStateCounter = 0;
    this._sm = this._routedType._sm;
    this.__setState(this._sm.getStateByPath(""));
    const context = { newState: "", prevState: void 0, sharedState: void 0 };
    this._callEnter(this._state, [], context);
    this._onStateChange = void 0;
  }
  _getMostSpecificHandledMember(memberNames) {
    let cur = this._state;
    do {
      for (let i = 0, n = memberNames.length; i < n; i++) {
        const memberName = memberNames[i];
        if (!cur.__parent) {
          if (cur.prototype[memberName]) {
            return memberName;
          }
        } else {
          const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);
          if (this[alias]) {
            return memberName;
          }
        }
      }
      cur = cur.__parent;
    } while (cur);
  }
  static _getStatesUntilLevel(state, level) {
    const states = [];
    while (state.__level > level) {
      states.push(state);
      state = state.__parent;
    }
    return states;
  }
  static _getSharedState(state1, state2) {
    const state1Array = StateMachine._getAncestorStates(state1);
    const state2Array = StateMachine._getAncestorStates(state2);
    const n = Math.min(state1Array.length, state2Array.length);
    for (let i = 0; i < n; i++) {
      if (state1Array[i] !== state2Array[i]) {
        return state1Array[i - 1];
      }
    }
    return state1Array[n - 1];
  }
  static _getAncestorStates(state) {
    const result = [];
    do {
      result.push(state);
    } while (state = state.__parent);
    return result.reverse();
  }
  static _getStateAtLevel(state, level) {
    if (level > state.__level) {
      return void 0;
    }
    while (level < state.__level) {
      state = state.__parent;
    }
    return state;
  }
}
class StateMachineType {
  constructor(type) {
    this._type = type;
    this._router = null;
    this.init();
  }
  get router() {
    return this._router;
  }
  init() {
    this._router = this._createRouter();
    this._stateMap = this._getStateMap();
    this._addStateMemberDelegatorsToRouter();
  }
  _createRouter() {
    const type = this._type;
    const router = class StateMachineRouter extends type {
      constructor() {
        super(...arguments);
        if (!this.constructor.hasOwnProperty("_isRouter")) {
          throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);
        }
      }
    };
    router._isRouter = true;
    router.prototype._routedType = type;
    router.original = type;
    this._mixinStateMachineMethods(router);
    return router;
  }
  _mixinStateMachineMethods(router) {
    const names = Object.getOwnPropertyNames(StateMachine.prototype);
    for (let i = 0, n = names.length; i < n; i++) {
      const name = names[i];
      if (name !== "constructor") {
        const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);
        Object.defineProperty(router.prototype, name, descriptor);
      }
    }
  }
  _addStateMemberDelegatorsToRouter() {
    const members = this._getAllMemberNames();
    members.forEach((member) => {
      this._addMemberRouter(member);
    });
  }
  _addMemberRouter(member) {
    const statePaths = Object.keys(this._stateMap);
    const descriptors = [];
    const aliases = [];
    statePaths.forEach((statePath, index) => {
      const state = this._stateMap[statePath];
      const descriptor = this._getDescriptor(state, member);
      if (descriptor) {
        descriptors[index] = descriptor;
        const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);
        aliases[index] = alias;
        if (!this._router.prototype.hasOwnProperty(alias)) {
          Object.defineProperty(this._router.prototype, alias, descriptor);
        }
      } else {
        descriptors[index] = null;
        aliases[index] = null;
      }
    });
    let type = void 0;
    descriptors.forEach((descriptor) => {
      if (descriptor) {
        const descType = this._getDescriptorType(descriptor);
        if (type && type !== descType) {
          console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);
          return;
        }
        type = descType;
      }
    });
    switch (type) {
      case "method":
        this._addMethodRouter(member, descriptors, aliases);
        break;
      case "getter":
        this._addGetterSetterRouters(member);
        break;
      case "property":
        console.warn("[Lightning] Fixed properties are not supported; please use a getter instead!");
        break;
    }
  }
  _getDescriptor(state, member, isValid = () => true) {
    let type = state;
    let curState = state;
    do {
      const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);
      if (descriptor) {
        if (isValid(descriptor)) {
          descriptor._source = curState;
          return descriptor;
        }
      }
      type = Object.getPrototypeOf(type);
      if (type && type.hasOwnProperty("__state")) {
        curState = type;
      }
    } while (type && type.prototype);
    return void 0;
  }
  _getDescriptorType(descriptor) {
    if (descriptor.get || descriptor.set) {
      return "getter";
    } else {
      if (typeof descriptor.value === "function") {
        return "method";
      } else {
        return "property";
      }
    }
  }
  static _supportsSpread() {
    if (this.__supportsSpread === void 0) {
      this.__supportsSpread = false;
      try {
        const func = new Function("return [].concat(...arguments);");
        func();
        this.__supportsSpread = true;
      } catch (e) {
      }
    }
    return this.__supportsSpread;
  }
  _addMethodRouter(member, descriptors, aliases) {
    const code = [
      "//@ sourceURL=StateMachineRouter.js",
      "var i = this._stateIndex;"
    ];
    let cur = aliases[0];
    const supportsSpread = StateMachineType._supportsSpread();
    for (let i = 1, n = aliases.length; i < n; i++) {
      const alias = aliases[i];
      if (alias !== cur) {
        if (cur) {
          if (supportsSpread) {
            code.push(`if (i < ${i}) return this["${cur}"](...arguments); else`);
          } else {
            code.push(`if (i < ${i}) return this["${cur}"].apply(this, arguments); else`);
          }
        } else {
          code.push(`if (i < ${i}) return ; else`);
        }
      }
      cur = alias;
    }
    if (cur) {
      if (supportsSpread) {
        code.push(`return this["${cur}"](...arguments);`);
      } else {
        code.push(`return this["${cur}"].apply(this, arguments);`);
      }
    } else {
      code.push(`;`);
    }
    const functionBody = code.join("\n");
    const router = new Function([], functionBody);
    const descriptor = { value: router };
    Object.defineProperty(this._router.prototype, member, descriptor);
  }
  _addGetterSetterRouters(member) {
    const getter = this._getGetterRouter(member);
    const setter = this._getSetterRouter(member);
    const descriptor = {
      get: getter,
      set: setter
    };
    Object.defineProperty(this._router.prototype, member, descriptor);
  }
  _getGetterRouter(member) {
    const statePaths = Object.keys(this._stateMap);
    const aliases = [];
    statePaths.forEach((statePath, index) => {
      const state = this._stateMap[statePath];
      const descriptor = this._getDescriptor(state, member, (descriptor2) => descriptor2.get);
      if (descriptor) {
        const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);
        aliases[index] = alias;
        if (!this._router.prototype.hasOwnProperty(alias)) {
          Object.defineProperty(this._router.prototype, alias, descriptor);
        }
      } else {
        aliases[index] = null;
      }
    });
    const code = [
      "//@ sourceURL=StateMachineRouter.js",
      "var i = this._stateIndex;"
    ];
    let cur = aliases[0];
    for (let i = 1, n = aliases.length; i < n; i++) {
      const alias = aliases[i];
      if (alias !== cur) {
        if (cur) {
          code.push(`if (i < ${i}) return this["${cur}"]; else`);
        } else {
          code.push(`if (i < ${i}) return ; else`);
        }
      }
      cur = alias;
    }
    if (cur) {
      code.push(`return this["${cur}"];`);
    } else {
      code.push(`;`);
    }
    const functionBody = code.join("\n");
    const router = new Function([], functionBody);
    return router;
  }
  _getSetterRouter(member) {
    const statePaths = Object.keys(this._stateMap);
    const aliases = [];
    statePaths.forEach((statePath, index) => {
      const state = this._stateMap[statePath];
      const descriptor = this._getDescriptor(state, member, (descriptor2) => descriptor2.set);
      if (descriptor) {
        const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);
        aliases[index] = alias;
        if (!this._router.prototype.hasOwnProperty(alias)) {
          Object.defineProperty(this._router.prototype, alias, descriptor);
        }
      } else {
        aliases[index] = null;
      }
    });
    const code = [
      "//@ sourceURL=StateMachineRouter.js",
      "var i = this._stateIndex;"
    ];
    let cur = aliases[0];
    for (let i = 1, n = aliases.length; i < n; i++) {
      const alias = aliases[i];
      if (alias !== cur) {
        if (cur) {
          code.push(`if (i < ${i}) this["${cur}"] = arg; else`);
        } else {
          code.push(`if (i < ${i}) ; else`);
        }
      }
      cur = alias;
    }
    if (cur) {
      code.push(`this["${cur}"] = arg;`);
    } else {
      code.push(`;`);
    }
    const functionBody = code.join("\n");
    const router = new Function(["arg"], functionBody);
    return router;
  }
  static getStateMemberAlias(path, member) {
    return "$" + (path ? path + "." : "") + member;
  }
  _getAllMemberNames() {
    const stateMap = this._stateMap;
    const map = Object.keys(stateMap);
    let members = /* @__PURE__ */ new Set();
    map.forEach((statePath) => {
      if (statePath === "") {
        return;
      }
      const state = stateMap[statePath];
      const names = this._getStateMemberNames(state);
      names.forEach((name) => {
        members.add(name);
      });
    });
    return [...members];
  }
  _getStateMemberNames(state) {
    let type = state;
    let members = /* @__PURE__ */ new Set();
    const isRoot = this._type === state;
    do {
      const names = this._getStateMemberNamesForType(type);
      names.forEach((name) => {
        members.add(name);
      });
      type = Object.getPrototypeOf(type);
    } while (type && type.prototype && (!type.hasOwnProperty("__state") || isRoot));
    return members;
  }
  _getStateMemberNamesForType(type) {
    const memberNames = Object.getOwnPropertyNames(type.prototype);
    return memberNames.filter((memberName) => {
      return memberName !== "constructor" && !StateMachineType._isStateLocalMember(memberName);
    });
  }
  static _isStateLocalMember(memberName) {
    return memberName === "$enter" || memberName === "$exit";
  }
  getStateByPath(statePath) {
    if (this._stateMap[statePath]) {
      return this._stateMap[statePath];
    }
    const parts = statePath.split(".");
    while (parts.pop()) {
      const statePath2 = parts.join(".");
      if (this._stateMap[statePath2]) {
        return this._stateMap[statePath2];
      }
    }
  }
  _getStateMap() {
    if (!this._stateMap) {
      this._stateMap = this._createStateMap();
    }
    return this._stateMap;
  }
  _createStateMap() {
    const stateMap = {};
    this._addState(this._type, null, "", stateMap);
    return stateMap;
  }
  _addState(state, parentState, name, stateMap) {
    state.__state = true;
    state.__name = name;
    this._addStaticStateProperty(state, parentState);
    const parentPath = parentState ? parentState.__path : "";
    let path = (parentPath ? parentPath + "." : "") + name;
    state.__path = path;
    state.__level = parentState ? parentState.__level + 1 : 0;
    state.__parent = parentState;
    state.__index = Object.keys(stateMap).length;
    stateMap[path] = state;
    const states = state._states;
    if (states) {
      const isInheritedFromParent = parentState && parentState._states === states;
      if (!isInheritedFromParent) {
        const subStates = state._states();
        subStates.forEach((subState) => {
          const stateName = StateMachineType._getStateName(subState);
          this._addState(subState, state, stateName, stateMap);
        });
      }
    }
  }
  static _getStateName(state) {
    const name = state.name;
    const index = name.indexOf("$");
    if (index > 0) {
      return name.substr(0, index);
    }
    return name;
  }
  _addStaticStateProperty(state, parentState) {
    if (parentState) {
      const isClassStateLevel = parentState && !parentState.__parent;
      if (isClassStateLevel) {
        this._router[state.__name] = state;
      } else {
        parentState[state.__name] = state;
      }
    }
  }
}
class Component extends Element {
  constructor(stage, properties) {
    super(stage);
    this.tagRoot = true;
    if (Utils$1.isObjectLiteral(properties)) {
      Object.assign(this, properties);
    }
    this.__initialized = false;
    this.__firstActive = false;
    this.__firstEnable = false;
    this.__signals = void 0;
    this.__passSignals = void 0;
    this.__construct();
    const func = this.constructor.getTemplateFunc(this);
    func.f(this, func.a);
    this._build();
  }
  __start() {
    StateMachine.setupStateMachine(this);
    this._onStateChange = Component.prototype.__onStateChange;
  }
  get state() {
    return this._getState();
  }
  __onStateChange() {
    if (this.application) {
      this.application.updateFocusPath();
    }
  }
  _refocus() {
    if (this.application) {
      this.application.updateFocusPath();
    }
  }
  static bindProp(name, func = null) {
    return { __propertyBinding: true, __name: name, __func: func };
  }
  __bindProperty(propObj, targetObj, targetProp) {
    const obj = targetObj;
    const prop = targetProp;
    const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];
    for (let i = 0; i < propDependencies.length; i++) {
      const propName = propDependencies[i];
      const func = propObj.__func ? propObj.__func : (context) => context[propName];
      if (!this.hasOwnProperty(propName)) {
        this[`__prop_bindings_${propName}`] = [{ __obj: obj, __prop: prop, __func: func }];
        Object.defineProperty(this, propName, {
          set: (value) => {
            this[`__prop_${propName}`] = value;
            for (const { __obj, __prop, __func } of this[`__prop_bindings_${propName}`]) {
              __obj[__prop] = __func(this);
            }
          },
          get: () => this[`__prop_${propName}`]
        });
      } else {
        this[`__prop_bindings_${propName}`].push({ __obj: obj, __prop: prop, __func: func });
      }
    }
  }
  static getTemplateFunc(ctx) {
    const name = "_templateFunc";
    const hasName = "__has" + name;
    if (this[hasName] !== this) {
      this[hasName] = this;
      this[name] = this.parseTemplate(this._template(ctx));
    }
    return this[name];
  }
  static parseTemplate(obj) {
    const context = {
      loc: [],
      store: [],
      rid: 0
    };
    this.parseTemplateRec(obj, context, "element");
    const code = context.loc.join(";\n");
    const f = new Function("element", "store", code);
    return { f, a: context.store };
  }
  static parseTemplateRec(obj, context, cursor) {
    const store = context.store;
    const loc = context.loc;
    const keys = Object.keys(obj);
    keys.forEach((key) => {
      let value = obj[key];
      if (Utils$1.isUcChar(key.charCodeAt(0))) {
        if (Utils$1.isObjectLiteral(value)) {
          const childCursor = `r${key.replace(/[^a-z0-9]/gi, "") + context.rid}`;
          let type = value.type ? value.type : Element;
          if (type === Element) {
            loc.push(`var ${childCursor} = element.stage.createElement()`);
          } else {
            store.push(type);
            loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);
          }
          loc.push(`${childCursor}.ref = "${key}"`);
          context.rid++;
          this.parseTemplateRec(value, context, childCursor);
          loc.push(`${cursor}.childList.add(${childCursor})`);
        } else if (Utils$1.isObject(value)) {
          store.push(value);
          loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);
        }
      } else {
        if (key === "text") {
          const propKey = cursor + "__text";
          loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);
          if (value.__propertyBinding === true) {
            store.push(value);
            loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, "${key}")`);
          } else {
            this.parseTemplatePropRec(value, context, propKey);
          }
        } else if (key === "shader" && Utils$1.isObjectLiteral(value)) {
          const shaderCursor = `${cursor}["shader"]`;
          store.push(value);
          loc.push(`${cursor}["${key}"] = store[${store.length - 1}]`);
          this.parsePropertyBindings(value, context, shaderCursor);
        } else if (key === "texture" && Utils$1.isObjectLiteral(value)) {
          const propKey = cursor + "__texture";
          const type = value.type;
          if (type) {
            store.push(type);
            loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);
            this.parseTemplatePropRec(value, context, propKey);
            loc.push(`${cursor}["${key}"] = ${propKey}`);
          } else {
            loc.push(`${propKey} = ${cursor}.texture`);
            this.parseTemplatePropRec(value, context, propKey);
          }
        } else if (Utils$1.isObjectLiteral(value) && value.__propertyBinding === true) {
          store.push(value);
          loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, "${key}")`);
        } else {
          if (Utils$1.isNumber(value)) {
            loc.push(`${cursor}["${key}"] = ${value}`);
          } else if (Utils$1.isBoolean(value)) {
            loc.push(`${cursor}["${key}"] = ${value ? "true" : "false"}`);
          } else if (Utils$1.isObject(value) || Array.isArray(value)) {
            store.push(value);
            loc.push(`${cursor}["${key}"] = store[${store.length - 1}]`);
          } else {
            loc.push(`${cursor}["${key}"] = ${JSON.stringify(value)}`);
          }
        }
      }
    });
  }
  static parseTemplatePropRec(obj, context, cursor) {
    const store = context.store;
    const loc = context.loc;
    const keys = Object.keys(obj);
    keys.forEach((key) => {
      if (key !== "type") {
        const value = obj[key];
        if (Utils$1.isNumber(value)) {
          loc.push(`${cursor}["${key}"] = ${value}`);
        } else if (Utils$1.isBoolean(value)) {
          loc.push(`${cursor}["${key}"] = ${value ? "true" : "false"}`);
        } else if (Utils$1.isObject(value) && value.__propertyBinding === true) {
          store.push(value);
          loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, "${key}")`);
        } else if (Utils$1.isObject(value) || Array.isArray(value)) {
          store.push(value);
          loc.push(`${cursor}["${key}"] = store[${store.length - 1}]`);
        } else {
          loc.push(`${cursor}["${key}"] = ${JSON.stringify(value)}`);
        }
      }
    });
  }
  static parsePropertyBindings(obj, context, cursor) {
    const store = context.store;
    const loc = context.loc;
    const keys = Object.keys(obj);
    keys.forEach((key) => {
      if (key !== "type") {
        const value = obj[key];
        if (Utils$1.isObjectLiteral(value) && value.__propertyBinding === true) {
          store.push(value);
          loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, "${key}")`);
        }
      }
    });
  }
  _onSetup() {
    if (!this.__initialized) {
      this._setup();
    }
  }
  _setup() {
  }
  _onAttach() {
    if (!this.__initialized) {
      this.__init();
      this.__initialized = true;
    }
    this._attach();
  }
  _attach() {
  }
  _onDetach() {
    this._detach();
  }
  _detach() {
  }
  _onEnabled() {
    if (!this.__firstEnable) {
      this._firstEnable();
      this.__firstEnable = true;
    }
    this._enable();
  }
  _firstEnable() {
  }
  _enable() {
  }
  _onDisabled() {
    this._disable();
  }
  _disable() {
  }
  _onActive() {
    if (!this.__firstActive) {
      this._firstActive();
      this.__firstActive = true;
    }
    this._active();
  }
  _firstActive() {
  }
  _active() {
  }
  _onInactive() {
    this._inactive();
  }
  _inactive() {
  }
  get application() {
    return this.stage.application;
  }
  __construct() {
    this._construct();
  }
  _construct() {
  }
  _build() {
  }
  __init() {
    this._init();
  }
  _init() {
  }
  _focus(newTarget, prevTarget) {
  }
  _unfocus(newTarget) {
  }
  _focusChange(target, newTarget) {
  }
  _getFocused() {
    return this;
  }
  _setFocusSettings(settings) {
  }
  _handleFocusSettings(settings) {
  }
  static _template() {
    return {};
  }
  hasFinalFocus() {
    let path = this.application._focusPath;
    return path && path.length && path[path.length - 1] === this;
  }
  hasFocus() {
    let path = this.application._focusPath;
    return path && path.indexOf(this) >= 0;
  }
  get cparent() {
    return Component.getParent(this);
  }
  seekAncestorByType(type) {
    let c = this.cparent;
    while (c) {
      if (c.constructor === type) {
        return c;
      }
      c = c.cparent;
    }
  }
  getSharedAncestorComponent(element) {
    let ancestor = this.getSharedAncestor(element);
    while (ancestor && !ancestor.isComponent) {
      ancestor = ancestor.parent;
    }
    return ancestor;
  }
  get signals() {
    return this.__signals;
  }
  set signals(v) {
    if (!Utils$1.isObjectLiteral(v)) {
      this._throwError("Signals: specify an object with signal-to-fire mappings");
    }
    this.__signals = v;
  }
  set alterSignals(v) {
    if (!Utils$1.isObjectLiteral(v)) {
      this._throwError("Signals: specify an object with signal-to-fire mappings");
    }
    if (!this.__signals) {
      this.__signals = {};
    }
    for (let key in v) {
      const d = v[key];
      if (d === void 0) {
        delete this.__signals[key];
      } else {
        this.__signals[key] = v;
      }
    }
  }
  get passSignals() {
    return this.__passSignals || {};
  }
  set passSignals(v) {
    this.__passSignals = Object.assign(this.__passSignals || {}, v);
  }
  set alterPassSignals(v) {
    if (!Utils$1.isObjectLiteral(v)) {
      this._throwError("Signals: specify an object with signal-to-fire mappings");
    }
    if (!this.__passSignals) {
      this.__passSignals = {};
    }
    for (let key in v) {
      const d = v[key];
      if (d === void 0) {
        delete this.__passSignals[key];
      } else {
        this.__passSignals[key] = v;
      }
    }
  }
  signal(event, ...args) {
    return this._signal(event, args);
  }
  _signal(event, args) {
    const signalParent = this._getParentSignalHandler();
    if (signalParent) {
      if (this.__signals) {
        let fireEvent = this.__signals[event];
        if (fireEvent === false) {
          return;
        }
        if (fireEvent) {
          if (fireEvent === true) {
            fireEvent = event;
          }
          if (Utils$1.isFunction(fireEvent)) {
            return fireEvent(...args);
          }
          if (signalParent._hasMethod(fireEvent)) {
            return signalParent[fireEvent](...args);
          }
        }
      }
      let passSignal = this.__passSignals && this.__passSignals[event];
      if (passSignal) {
        if (passSignal && passSignal !== true) {
          event = passSignal;
        }
        return signalParent._signal(event, args);
      }
    }
  }
  _getParentSignalHandler() {
    return this.cparent ? this.cparent._getSignalHandler() : null;
  }
  _getSignalHandler() {
    if (this._signalProxy) {
      return this.cparent ? this.cparent._getSignalHandler() : null;
    }
    return this;
  }
  get _signalProxy() {
    return false;
  }
  fireAncestors(name, ...args) {
    if (!name.startsWith("$")) {
      throw new Error("Ancestor event name must be prefixed by dollar sign.");
    }
    const parent = this._getParentSignalHandler();
    if (parent) {
      return parent._doFireAncestors(name, args);
    }
  }
  _doFireAncestors(name, args) {
    if (this._hasMethod(name)) {
      return this.fire(name, ...args);
    } else {
      const signalParent = this._getParentSignalHandler();
      if (signalParent) {
        return signalParent._doFireAncestors(name, args);
      }
    }
  }
  static collectSubComponents(subs, element) {
    if (element.hasChildren()) {
      const childList = element.__childList;
      for (let i = 0, n = childList.length; i < n; i++) {
        const child = childList.getAt(i);
        if (child.isComponent) {
          subs.push(child);
        } else {
          Component.collectSubComponents(subs, child);
        }
      }
    }
  }
  static getComponent(element) {
    let parent = element;
    while (parent && !parent.isComponent) {
      parent = parent.parent;
    }
    return parent;
  }
  static getParent(element) {
    return Component.getComponent(element.parent);
  }
}
Component.prototype.isComponent = true;
class CoreQuadList {
  constructor(ctx) {
    this.ctx = ctx;
    this.quadTextures = [];
    this.quadElements = [];
  }
  get length() {
    return this.quadTextures.length;
  }
  reset() {
    this.quadTextures = [];
    this.quadElements = [];
    this.dataLength = 0;
  }
  getElement(index) {
    return this.quadElements[index]._element;
  }
  getElementCore(index) {
    return this.quadElements[index];
  }
  getTexture(index) {
    return this.quadTextures[index];
  }
  getTextureWidth(index) {
    let nativeTexture = this.quadTextures[index];
    if (nativeTexture.w) {
      return nativeTexture.w;
    } else {
      return this.quadElements[index]._displayedTextureSource.w;
    }
  }
  getTextureHeight(index) {
    let nativeTexture = this.quadTextures[index];
    if (nativeTexture.h) {
      return nativeTexture.h;
    } else {
      return this.quadElements[index]._displayedTextureSource.h;
    }
  }
}
class WebGLCoreQuadList extends CoreQuadList {
  constructor(ctx) {
    super(ctx);
    const byteSize = ctx.stage.getOption("bufferMemory");
    this.dataLength = 0;
    this.data = new ArrayBuffer(byteSize);
    this.floats = new Float32Array(this.data);
    this.uints = new Uint32Array(this.data);
  }
  getAttribsDataByteOffset(index) {
    return index * 80;
  }
  getQuadContents() {
    let floats = this.floats;
    let uints = this.uints;
    let lines = [];
    for (let i = 1; i <= this.length; i++) {
      let str = "entry " + i + ": ";
      for (let j = 0; j < 4; j++) {
        let b = i * 20 + j * 4;
        str += floats[b] + "," + floats[b + 1] + ":" + floats[b + 2] + "," + floats[b + 3] + "[" + uints[b + 4].toString(16) + "] ";
      }
      lines.push(str);
    }
    return lines;
  }
}
class CoreQuadOperation {
  constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {
    this.ctx = ctx;
    this.shader = shader;
    this.shaderOwner = shaderOwner;
    this.renderTextureInfo = renderTextureInfo;
    this.scissor = scissor;
    this.index = index;
    this.length = 0;
  }
  get quads() {
    return this.ctx.renderState.quads;
  }
  getTexture(index) {
    return this.quads.getTexture(this.index + index);
  }
  getElementCore(index) {
    return this.quads.getElementCore(this.index + index);
  }
  getElement(index) {
    return this.quads.getElement(this.index + index);
  }
  getElementWidth(index) {
    return this.getElement(index).renderWidth;
  }
  getElementHeight(index) {
    return this.getElement(index).renderHeight;
  }
  getTextureWidth(index) {
    return this.quads.getTextureWidth(this.index + index);
  }
  getTextureHeight(index) {
    return this.quads.getTextureHeight(this.index + index);
  }
  getRenderWidth() {
    if (this.renderTextureInfo) {
      return this.renderTextureInfo.w;
    } else {
      return this.ctx.stage.w;
    }
  }
  getRenderHeight() {
    if (this.renderTextureInfo) {
      return this.renderTextureInfo.h;
    } else {
      return this.ctx.stage.h;
    }
  }
}
class WebGLCoreQuadOperation extends CoreQuadOperation {
  constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {
    super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);
    this.extraAttribsDataByteOffset = 0;
  }
  getAttribsDataByteOffset(index) {
    return this.quads.getAttribsDataByteOffset(this.index + index);
  }
  getNormalRenderTextureCoords(x, y) {
    let coords = this.shaderOwner.getRenderTextureCoords(x, y);
    coords[0] /= this.getRenderWidth();
    coords[1] /= this.getRenderHeight();
    coords[0] = coords[0] * 2 - 1;
    coords[1] = 1 - coords[1] * 2;
    return coords;
  }
  getProjection() {
    if (this.renderTextureInfo === null) {
      return this.ctx.renderExec._projection;
    } else {
      return this.renderTextureInfo.nativeTexture.projection;
    }
  }
}
class CoreRenderExecutor {
  constructor(ctx) {
    this.ctx = ctx;
    this.renderState = ctx.renderState;
    this.gl = this.ctx.stage.gl;
  }
  destroy() {
    this.ctx = null;
    this.renderState = null;
    this.gl = null;
    delete this.ctx;
    delete this.renderState;
    delete this.gl;
  }
  _reset() {
    this._bindRenderTexture(null);
    this._setScissor(null);
    this._clearRenderTexture();
  }
  execute() {
    this._reset();
    let qops = this.renderState.quadOperations;
    let i = 0, n = qops.length;
    while (i < n) {
      this._processQuadOperation(qops[i]);
      i++;
    }
  }
  _processQuadOperation(quadOperation) {
    if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {
      return;
    }
    this._setupQuadOperation(quadOperation);
    this._execQuadOperation(quadOperation);
  }
  _setupQuadOperation(quadOperation) {
  }
  _execQuadOperation(op) {
    let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;
    if (this._renderTexture !== nativeTexture) {
      this._bindRenderTexture(nativeTexture);
    }
    if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {
      this._setScissor(null);
      this._clearRenderTexture();
      op.renderTextureInfo.cleared = true;
      this._setScissor(op.scissor);
    } else {
      this._setScissor(op.scissor);
    }
    this._renderQuadOperation(op);
  }
  _renderQuadOperation(op) {
  }
  _bindRenderTexture(renderTexture) {
    this._renderTexture = renderTexture;
  }
  _clearRenderTexture(renderTexture) {
  }
  _setScissor(area) {
  }
}
class WebGLCoreRenderExecutor extends CoreRenderExecutor {
  constructor(ctx) {
    super(ctx);
    this.gl = this.ctx.stage.gl;
    this.init();
  }
  init() {
    let gl = this.gl;
    this._attribsBuffer = gl.createBuffer();
    let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);
    let allIndices = new Uint16Array(maxQuads * 6);
    for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {
      allIndices[i] = j;
      allIndices[i + 1] = j + 1;
      allIndices[i + 2] = j + 2;
      allIndices[i + 3] = j;
      allIndices[i + 4] = j + 2;
      allIndices[i + 5] = j + 3;
    }
    this._quadsBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);
    this._projection = new Float32Array([2 / this.ctx.stage.coordsWidth, -2 / this.ctx.stage.coordsHeight]);
  }
  destroy() {
    super.destroy();
    this.gl.deleteBuffer(this._attribsBuffer);
    this.gl.deleteBuffer(this._quadsBuffer);
    this.gl = null;
    delete this.gl;
  }
  _reset() {
    super._reset();
    let gl = this.gl;
    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
    gl.enable(gl.BLEND);
    gl.disable(gl.DEPTH_TEST);
    this._stopShaderProgram();
    this._setupBuffers();
  }
  _setupBuffers() {
    let gl = this.gl;
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);
    let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);
    gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);
  }
  _setupQuadOperation(quadOperation) {
    super._setupQuadOperation(quadOperation);
    this._useShaderProgram(quadOperation.shader, quadOperation);
  }
  _renderQuadOperation(op) {
    let shader = op.shader;
    if (op.length || op.shader.addEmpty()) {
      shader.beforeDraw(op);
      shader.draw(op);
      shader.afterDraw(op);
    }
  }
  _useShaderProgram(shader, operation) {
    if (!shader.hasSameProgram(this._currentShaderProgram)) {
      if (this._currentShaderProgram) {
        this._currentShaderProgram.stopProgram();
      }
      shader.useProgram();
      this._currentShaderProgram = shader;
    }
    shader.setupUniforms(operation);
  }
  _stopShaderProgram() {
    if (this._currentShaderProgram) {
      this._currentShaderProgram.stopProgram();
      this._currentShaderProgram = null;
    }
  }
  _bindRenderTexture(renderTexture) {
    super._bindRenderTexture(renderTexture);
    let gl = this.gl;
    if (!this._renderTexture) {
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.viewport(0, 0, this.ctx.stage.w, this.ctx.stage.h);
    } else {
      gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);
      gl.viewport(0, 0, this._renderTexture.w, this._renderTexture.h);
    }
  }
  _clearRenderTexture() {
    super._clearRenderTexture();
    let gl = this.gl;
    if (!this._renderTexture) {
      let glClearColor = this.ctx.stage.getClearColor();
      if (glClearColor) {
        gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);
        gl.clear(gl.COLOR_BUFFER_BIT);
      }
    } else {
      gl.clearColor(0, 0, 0, 0);
      gl.clear(gl.COLOR_BUFFER_BIT);
    }
  }
  _setScissor(area) {
    super._setScissor(area);
    if (this._scissor === area) {
      return;
    }
    this._scissor = area;
    let gl = this.gl;
    if (!area) {
      gl.disable(gl.SCISSOR_TEST);
    } else {
      gl.enable(gl.SCISSOR_TEST);
      let precision = this.ctx.stage.getRenderPrecision();
      let y = area[1];
      if (this._renderTexture === null) {
        y = this.ctx.stage.h / precision - (area[1] + area[3]);
      }
      gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));
    }
  }
}
class CoreRenderState {
  constructor(ctx) {
    this.ctx = ctx;
    this.stage = ctx.stage;
    this.defaultShader = this.stage.renderer.getDefaultShader(ctx);
    this.renderer = ctx.stage.renderer;
    this.quads = this.renderer.createCoreQuadList(ctx);
  }
  reset() {
    this._renderTextureInfo = null;
    this._scissor = null;
    this._shader = null;
    this._shaderOwner = null;
    this._realShader = null;
    this._check = false;
    this.quadOperations = [];
    this._texturizer = null;
    this._texturizerTemporary = false;
    this._quadOperation = null;
    this.quads.reset();
    this._temporaryTexturizers = [];
    this._isCachingTexturizer = false;
  }
  get length() {
    return this.quads.quadTextures.length;
  }
  setShader(shader, owner) {
    if (this._shaderOwner !== owner || this._realShader !== shader) {
      this._realShader = shader;
      if (shader.useDefault()) {
        shader = this.defaultShader;
      }
      if (this._shader !== shader || this._shaderOwner !== owner) {
        this._shader = shader;
        this._shaderOwner = owner;
        this._check = true;
      }
    }
  }
  get renderTextureInfo() {
    return this._renderTextureInfo;
  }
  setScissor(area) {
    if (this._scissor !== area) {
      if (area) {
        this._scissor = area;
      } else {
        this._scissor = null;
      }
      this._check = true;
    }
  }
  getScissor() {
    return this._scissor;
  }
  setRenderTextureInfo(renderTextureInfo) {
    if (this._renderTextureInfo !== renderTextureInfo) {
      this._renderTextureInfo = renderTextureInfo;
      this._scissor = null;
      this._check = true;
    }
  }
  setTexturizer(texturizer, cache = false) {
    this._texturizer = texturizer;
    this._cacheTexturizer = cache;
  }
  set isCachingTexturizer(v) {
    this._isCachingTexturizer = v;
  }
  get isCachingTexturizer() {
    return this._isCachingTexturizer;
  }
  addQuad(elementCore) {
    if (!this._quadOperation) {
      this._createQuadOperation();
    } else if (this._check && this._hasChanges()) {
      this._finishQuadOperation();
      this._check = false;
    }
    let nativeTexture = null;
    if (this._texturizer) {
      nativeTexture = this._texturizer.getResultTexture();
      if (!this._cacheTexturizer) {
        this._temporaryTexturizers.push(this._texturizer);
      }
    }
    if (!nativeTexture) {
      nativeTexture = elementCore._displayedTextureSource.nativeTexture;
    }
    if (this._renderTextureInfo) {
      if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {
        this._renderTextureInfo.nativeTexture = nativeTexture;
        this._renderTextureInfo.offset = this.length;
      } else {
        this._renderTextureInfo.nativeTexture = null;
      }
      this._renderTextureInfo.empty = false;
    }
    this.quads.quadTextures.push(nativeTexture);
    this.quads.quadElements.push(elementCore);
    this._quadOperation.length++;
    this.renderer.addQuad(this, this.quads, this.length - 1);
  }
  finishedRenderTexture() {
    if (this._renderTextureInfo.nativeTexture) {
      if (!this._isRenderTextureReusable()) {
        this._renderTextureInfo.nativeTexture = null;
      }
    }
  }
  _isRenderTextureReusable() {
    const offset = this._renderTextureInfo.offset;
    return this.quads.quadTextures[offset].w === this._renderTextureInfo.w && this.quads.quadTextures[offset].h === this._renderTextureInfo.h && this.renderer.isRenderTextureReusable(this, this._renderTextureInfo);
  }
  _hasChanges() {
    let q = this._quadOperation;
    if (this._shader !== q.shader)
      return true;
    if (this._shaderOwner !== q.shaderOwner)
      return true;
    if (this._renderTextureInfo !== q.renderTextureInfo)
      return true;
    if (this._scissor !== q.scissor) {
      if (this._scissor[0] !== q.scissor[0] || this._scissor[1] !== q.scissor[1] || this._scissor[2] !== q.scissor[2] || this._scissor[3] !== q.scissor[3]) {
        return true;
      }
    }
    return false;
  }
  _finishQuadOperation(create = true) {
    if (this._quadOperation) {
      if (this._quadOperation.length || this._shader.addEmpty()) {
        if (!this._quadOperation.scissor || this._quadOperation.scissor[2] > 0 && this._quadOperation.scissor[3] > 0) {
          this.quadOperations.push(this._quadOperation);
        }
      }
      if (this._temporaryTexturizers.length) {
        for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {
          this._temporaryTexturizers[i].releaseRenderTexture();
        }
        this._temporaryTexturizers = [];
      }
      this._quadOperation = null;
    }
    if (create) {
      this._createQuadOperation();
    }
  }
  _createQuadOperation() {
    this._quadOperation = this.renderer.createCoreQuadOperation(
      this.ctx,
      this._shader,
      this._shaderOwner,
      this._renderTextureInfo,
      this._scissor,
      this.length
    );
    this._check = false;
  }
  finish() {
    if (this._quadOperation) {
      this._finishQuadOperation(false);
    }
    this.renderer.finishRenderState(this);
  }
}
class WebGLShaderProgram {
  constructor(vertexShaderSource, fragmentShaderSource) {
    this.vertexShaderSource = vertexShaderSource;
    this.fragmentShaderSource = fragmentShaderSource;
    this._program = null;
    this.gl = null;
    this._uniformLocations = /* @__PURE__ */ new Map();
    this._attributeLocations = /* @__PURE__ */ new Map();
    this._currentUniformValues = {};
  }
  compile(gl) {
    if (this._program)
      return;
    this.gl = gl;
    this._program = gl.createProgram();
    let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);
    let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);
    gl.attachShader(this._program, glVertShader);
    gl.attachShader(this._program, glFragShader);
    gl.linkProgram(this._program);
    if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {
      console.error("[Lightning] Error: Could not initialize shader.");
      console.error("[Lightning] gl.VALIDATE_STATUS", gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));
      console.error("[Lightning] gl.getError()", gl.getError());
      if (gl.getProgramInfoLog(this._program) !== "") {
        console.warn("[Lightning] Warning: gl.getProgramInfoLog()", gl.getProgramInfoLog(this._program));
      }
      gl.deleteProgram(this._program);
      this._program = null;
    }
    gl.deleteShader(glVertShader);
    gl.deleteShader(glFragShader);
  }
  _glCompile(type, src) {
    let shader = this.gl.createShader(type);
    this.gl.shaderSource(shader, src);
    this.gl.compileShader(shader);
    if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
      console.error("[Lightning]", this.constructor.name, "Type: " + (type === this.gl.VERTEX_SHADER ? "vertex shader" : "fragment shader"));
      console.error("[Lightning]", this.gl.getShaderInfoLog(shader));
      let idx = 0;
      console.error("[Lightning]", "========== source ==========\n" + src.split("\n").map((line) => "" + ++idx + ": " + line).join("\n"));
      return null;
    }
    return shader;
  }
  getUniformLocation(name) {
    let location = this._uniformLocations.get(name);
    if (location === void 0) {
      location = this.gl.getUniformLocation(this._program, name);
      this._uniformLocations.set(name, location);
    }
    return location;
  }
  getAttribLocation(name) {
    let location = this._attributeLocations.get(name);
    if (location === void 0) {
      location = this.gl.getAttribLocation(this._program, name);
      this._attributeLocations.set(name, location);
    }
    return location;
  }
  destroy() {
    if (this._program) {
      this.gl.deleteProgram(this._program);
    }
    this._attributeLocations = null;
    this._currentUniformValues = null;
    this.fragmentShaderSource = null;
    this._program = null;
    this.gl = null;
    this._uniformLocations = null;
    this.vertexShaderSource = null;
    delete this.vertexShaderSource;
    delete this._program;
    delete this._currentUniformValues;
    delete this.fragmentShaderSource;
    delete this.gl;
    delete this._uniformLocations;
    delete this._attributeLocations;
  }
  get glProgram() {
    return this._program;
  }
  get compiled() {
    return !!this._program;
  }
  _valueEquals(v1, v2) {
    if (v1.length && v2.length) {
      for (let i = 0, n = v1.length; i < n; i++) {
        if (v1[i] !== v2[i])
          return false;
      }
      return true;
    } else {
      return v1 === v2;
    }
  }
  _valueClone(v) {
    if (v.length) {
      return v.slice(0);
    } else {
      return v;
    }
  }
  setUniformValue(name, value, glFunction) {
    let v = this._currentUniformValues[name];
    if (v === void 0 || !this._valueEquals(v, value)) {
      let clonedValue = this._valueClone(value);
      this._currentUniformValues[name] = clonedValue;
      let loc = this.getUniformLocation(name);
      if (loc) {
        let isMatrix = glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv;
        if (isMatrix) {
          glFunction.call(this.gl, loc, false, clonedValue);
        } else {
          glFunction.call(this.gl, loc, clonedValue);
        }
      }
    }
  }
}
class WebGLShader extends Shader {
  constructor(ctx) {
    super(ctx);
    const stage = ctx.stage;
    this._program = stage.renderer.shaderPrograms.get(this.constructor);
    if (!this._program) {
      this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);
      stage.renderer.shaderPrograms.set(this.constructor, this._program);
    }
    this.gl = stage.gl;
  }
  get glProgram() {
    return this._program.glProgram;
  }
  _init() {
    if (!this._initialized) {
      this.initialize();
      this._initialized = true;
    }
  }
  initialize() {
    this._program.compile(this.gl);
  }
  get initialized() {
    return this._initialized;
  }
  _uniform(name) {
    return this._program.getUniformLocation(name);
  }
  _attrib(name) {
    return this._program.getAttribLocation(name);
  }
  _setUniform(name, value, glFunction) {
    this._program.setUniformValue(name, value, glFunction);
  }
  useProgram() {
    this._init();
    this.gl.useProgram(this.glProgram);
    this.beforeUsage();
    this.enableAttribs();
  }
  stopProgram() {
    this.afterUsage();
    this.disableAttribs();
  }
  hasSameProgram(other) {
    return other && (other === this || other._program === this._program);
  }
  beforeUsage() {
  }
  afterUsage() {
  }
  enableAttribs() {
  }
  disableAttribs() {
  }
  getExtraAttribBytesPerVertex() {
    return 0;
  }
  getVertexAttribPointerOffset(operation) {
    return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();
  }
  setExtraAttribsInBuffer(operation) {
  }
  setupUniforms(operation) {
  }
  _getProjection(operation) {
    return operation.getProjection();
  }
  getFlipY(operation) {
    return this._getProjection(operation)[1] < 0;
  }
  beforeDraw(operation) {
  }
  draw(operation) {
  }
  afterDraw(operation) {
  }
  cleanup() {
    this._initialized = false;
  }
}
let DefaultShader$1 = class DefaultShader extends WebGLShader {
  enableAttribs() {
    let gl = this.gl;
    gl.vertexAttribPointer(this._attrib("aVertexPosition"), 2, gl.FLOAT, false, 20, 0);
    gl.enableVertexAttribArray(this._attrib("aVertexPosition"));
    if (this._attrib("aTextureCoord") !== -1) {
      gl.vertexAttribPointer(this._attrib("aTextureCoord"), 2, gl.FLOAT, false, 20, 2 * 4);
      gl.enableVertexAttribArray(this._attrib("aTextureCoord"));
    }
    if (this._attrib("aColor") !== -1) {
      gl.vertexAttribPointer(this._attrib("aColor"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);
      gl.enableVertexAttribArray(this._attrib("aColor"));
    }
  }
  disableAttribs() {
    let gl = this.gl;
    gl.disableVertexAttribArray(this._attrib("aVertexPosition"));
    if (this._attrib("aTextureCoord") !== -1) {
      gl.disableVertexAttribArray(this._attrib("aTextureCoord"));
    }
    if (this._attrib("aColor") !== -1) {
      gl.disableVertexAttribArray(this._attrib("aColor"));
    }
  }
  setupUniforms(operation) {
    this._setUniform("projection", this._getProjection(operation), this.gl.uniform2fv, false);
  }
  draw(operation) {
    let gl = this.gl;
    let length = operation.length;
    if (length) {
      let glTexture = operation.getTexture(0);
      let pos = 0;
      for (let i = 0; i < length; i++) {
        let tx = operation.getTexture(i);
        if (glTexture !== tx) {
          gl.bindTexture(gl.TEXTURE_2D, glTexture);
          gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);
          glTexture = tx;
          pos = i;
        }
      }
      gl.bindTexture(gl.TEXTURE_2D, glTexture);
      gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);
    }
  }
};
DefaultShader$1.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
DefaultShader$1.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    void main(void){
        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;
    }
`;
class Renderer {
  constructor(stage) {
    this.stage = stage;
    this._defaultShader = void 0;
  }
  gc(aggressive) {
  }
  destroy() {
  }
  getDefaultShader(ctx = this.stage.ctx) {
    if (!this._defaultShader) {
      this._defaultShader = this._createDefaultShader(ctx);
    }
    return this._defaultShader;
  }
  _createDefaultShader(ctx) {
  }
  isValidShaderType(shaderType) {
    return shaderType.prototype instanceof this._getShaderBaseType();
  }
  createShader(ctx, settings) {
    const shaderType = settings.type;
    if (!this.isValidShaderType(shaderType)) {
      const convertedShaderType = this._getShaderAlternative(shaderType);
      if (!convertedShaderType) {
        console.warn("[Lightning] Shader has no implementation for render target: " + shaderType.name);
        return this._createDefaultShader(ctx);
      }
      return new convertedShaderType(ctx);
    } else {
      const shader = new shaderType(ctx);
      Base.patchObject(this, settings);
      return shader;
    }
  }
  _getShaderBaseType() {
  }
  _getShaderAlternative(shaderType) {
    return this.getDefaultShader();
  }
  copyRenderTexture(renderTexture, nativeTexture, options) {
    console.warn("[Lightning] copyRenderTexture not supported by renderer");
  }
}
class WebGLRenderer extends Renderer {
  constructor(stage) {
    super(stage);
    this.shaderPrograms = /* @__PURE__ */ new Map();
    this._compressedTextureExtensions = {
      astc: stage.gl.getExtension("WEBGL_compressed_texture_astc"),
      etc1: stage.gl.getExtension("WEBGL_compressed_texture_etc1"),
      s3tc: stage.gl.getExtension("WEBGL_compressed_texture_s3tc"),
      pvrtc: stage.gl.getExtension("WEBGL_compressed_texture_pvrtc")
    };
  }
  getCompressedTextureExtensions() {
    return this._compressedTextureExtensions;
  }
  destroy() {
    this.shaderPrograms.forEach((shaderProgram) => shaderProgram.destroy());
    this.shaderPrograms = null;
    this._compressedTextureExtensions = null;
    delete this.shaderPrograms;
    delete this._compressedTextureExtensions;
  }
  _createDefaultShader(ctx) {
    return new DefaultShader$1(ctx);
  }
  _getShaderBaseType() {
    return WebGLShader;
  }
  _getShaderAlternative(shaderType) {
    return shaderType.getWebGL && shaderType.getWebGL();
  }
  createCoreQuadList(ctx) {
    return new WebGLCoreQuadList(ctx);
  }
  createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {
    return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);
  }
  createCoreRenderExecutor(ctx) {
    return new WebGLCoreRenderExecutor(ctx);
  }
  createCoreRenderState(ctx) {
    return new CoreRenderState(ctx);
  }
  createRenderTexture(w, h, pw, ph) {
    const gl = this.stage.gl;
    const glTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, glTexture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    glTexture.params = {};
    glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;
    glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;
    glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;
    glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;
    glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };
    glTexture.framebuffer = gl.createFramebuffer();
    glTexture.projection = new Float32Array([2 / w, 2 / h]);
    gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);
    return glTexture;
  }
  freeRenderTexture(glTexture) {
    let gl = this.stage.gl;
    gl.deleteFramebuffer(glTexture.framebuffer);
    gl.deleteTexture(glTexture);
  }
  _getBytesPerPixel(fmt, type) {
    const gl = this.stage.gl;
    if (fmt === gl.RGBA) {
      switch (type) {
        case gl.UNSIGNED_BYTE:
          return 4;
        case gl.UNSIGNED_SHORT_4_4_4_4:
          return 2;
        case gl.UNSIGNED_SHORT_5_5_5_1:
          return 2;
        default:
          throw new Error("Invalid type specified for GL_RGBA format");
      }
    } else if (fmt === gl.RGB) {
      switch (type) {
        case gl.UNSIGNED_BYTE:
          return 3;
        case gl.UNSIGNED_BYTE_5_6_5:
          return 2;
        default:
          throw new Error("Invalid type specified for GL_RGB format");
      }
    } else {
      throw new Error("Invalid format specified in call to _getBytesPerPixel()");
    }
  }
  uploadTextureSource(textureSource, options) {
    const gl = this.stage.gl;
    const source = options.source;
    let compressed = false;
    if (options.renderInfo) {
      compressed = options.renderInfo.compressed || false;
    }
    const format = {
      premultiplyAlpha: true,
      hasAlpha: true
    };
    if (options && options.hasOwnProperty("premultiplyAlpha")) {
      format.premultiplyAlpha = options.premultiplyAlpha;
    }
    if (options && options.hasOwnProperty("flipBlueRed")) {
      format.flipBlueRed = options.flipBlueRed;
    }
    if (options && options.hasOwnProperty("hasAlpha")) {
      format.hasAlpha = options.hasAlpha;
    }
    if (!format.hasAlpha) {
      format.premultiplyAlpha = false;
    }
    format.texParams = options.texParams || {};
    format.texOptions = options.texOptions || {};
    let glTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, glTexture);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);
    if (Utils$1.isNode) {
      gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);
    }
    const texParams = format.texParams;
    if (!texParams[gl.TEXTURE_MAG_FILTER])
      texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;
    if (!texParams[gl.TEXTURE_MIN_FILTER])
      texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;
    if (!texParams[gl.TEXTURE_WRAP_S])
      texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;
    if (!texParams[gl.TEXTURE_WRAP_T])
      texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;
    Object.keys(texParams).forEach((key) => {
      const value = texParams[key];
      gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);
    });
    if (compressed) {
      this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);
      return glTexture;
    }
    const texOptions = format.texOptions;
    texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);
    texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;
    texOptions.internalFormat = texOptions.internalFormat || texOptions.format;
    if (options && options.imageRef) {
      texOptions.imageRef = options.imageRef;
    }
    this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);
    glTexture.params = Utils$1.cloneObjShallow(texParams);
    glTexture.options = Utils$1.cloneObjShallow(texOptions);
    glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);
    return glTexture;
  }
  freeTextureSource(textureSource) {
    this.stage.gl.deleteTexture(textureSource.nativeTexture);
  }
  addQuad(renderState, quads, index) {
    let offset = index * 20;
    const elementCore = quads.quadElements[index];
    let r = elementCore._renderContext;
    let floats = renderState.quads.floats;
    let uints = renderState.quads.uints;
    const mca = StageUtils.mergeColorAlpha;
    if (r.tb !== 0 || r.tc !== 0) {
      floats[offset++] = r.px;
      floats[offset++] = r.py;
      floats[offset++] = elementCore._ulx;
      floats[offset++] = elementCore._uly;
      uints[offset++] = mca(elementCore._colorUl, r.alpha);
      floats[offset++] = r.px + elementCore._w * r.ta;
      floats[offset++] = r.py + elementCore._w * r.tc;
      floats[offset++] = elementCore._brx;
      floats[offset++] = elementCore._uly;
      uints[offset++] = mca(elementCore._colorUr, r.alpha);
      floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;
      floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;
      floats[offset++] = elementCore._brx;
      floats[offset++] = elementCore._bry;
      uints[offset++] = mca(elementCore._colorBr, r.alpha);
      floats[offset++] = r.px + elementCore._h * r.tb;
      floats[offset++] = r.py + elementCore._h * r.td;
      floats[offset++] = elementCore._ulx;
      floats[offset++] = elementCore._bry;
      uints[offset] = mca(elementCore._colorBl, r.alpha);
    } else {
      let cx = r.px + elementCore._w * r.ta;
      let cy = r.py + elementCore._h * r.td;
      floats[offset++] = r.px;
      floats[offset++] = r.py;
      floats[offset++] = elementCore._ulx;
      floats[offset++] = elementCore._uly;
      uints[offset++] = mca(elementCore._colorUl, r.alpha);
      floats[offset++] = cx;
      floats[offset++] = r.py;
      floats[offset++] = elementCore._brx;
      floats[offset++] = elementCore._uly;
      uints[offset++] = mca(elementCore._colorUr, r.alpha);
      floats[offset++] = cx;
      floats[offset++] = cy;
      floats[offset++] = elementCore._brx;
      floats[offset++] = elementCore._bry;
      uints[offset++] = mca(elementCore._colorBr, r.alpha);
      floats[offset++] = r.px;
      floats[offset++] = cy;
      floats[offset++] = elementCore._ulx;
      floats[offset++] = elementCore._bry;
      uints[offset] = mca(elementCore._colorBl, r.alpha);
    }
  }
  isRenderTextureReusable(renderState, renderTextureInfo) {
    let offset = renderState._renderTextureInfo.offset * 80 / 4;
    let floats = renderState.quads.floats;
    let uints = renderState.quads.uints;
    return floats[offset] === 0 && floats[offset + 1] === 0 && floats[offset + 2] === 0 && floats[offset + 3] === 0 && uints[offset + 4] === 4294967295 && floats[offset + 5] === renderTextureInfo.w && floats[offset + 6] === 0 && floats[offset + 7] === 1 && floats[offset + 8] === 0 && uints[offset + 9] === 4294967295 && floats[offset + 10] === renderTextureInfo.w && floats[offset + 11] === renderTextureInfo.h && floats[offset + 12] === 1 && floats[offset + 13] === 1 && uints[offset + 14] === 4294967295 && floats[offset + 15] === 0 && floats[offset + 16] === renderTextureInfo.h && floats[offset + 17] === 0 && floats[offset + 18] === 1 && uints[offset + 19] === 4294967295;
  }
  finishRenderState(renderState) {
    let offset = renderState.length * 80;
    for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {
      renderState.quadOperations[i].extraAttribsDataByteOffset = offset;
      let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;
      offset += extra;
      if (extra) {
        renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);
      }
    }
    renderState.quads.dataLength = offset;
  }
  copyRenderTexture(renderTexture, nativeTexture, options) {
    const gl = this.stage.gl;
    gl.bindTexture(gl.TEXTURE_2D, nativeTexture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);
    const precision = renderTexture.precision;
    gl.copyTexSubImage2D(
      gl.TEXTURE_2D,
      0,
      precision * (options.sx || 0),
      precision * (options.sy || 0),
      precision * (options.x || 0),
      precision * (options.y || 0),
      precision * (options.w || renderTexture.ow),
      precision * (options.h || renderTexture.oh)
    );
  }
}
class C2dCoreQuadList extends CoreQuadList {
  constructor(ctx) {
    super(ctx);
    this.renderContexts = [];
    this.modes = [];
  }
  setRenderContext(index, v) {
    this.renderContexts[index] = v;
  }
  setSimpleTc(index, v) {
    if (v) {
      this.modes[index] |= 1;
    } else {
      this.modes[index] -= this.modes[index] & 1;
    }
  }
  setWhite(index, v) {
    if (v) {
      this.modes[index] |= 2;
    } else {
      this.modes[index] -= this.modes[index] & 2;
    }
  }
  getRenderContext(index) {
    return this.renderContexts[index];
  }
  getSimpleTc(index) {
    return this.modes[index] & 1;
  }
  getWhite(index) {
    return this.modes[index] & 2;
  }
}
class C2dCoreQuadOperation extends CoreQuadOperation {
  getRenderContext(index) {
    return this.quads.getRenderContext(this.index + index);
  }
  getSimpleTc(index) {
    return this.quads.getSimpleTc(this.index + index);
  }
  getWhite(index) {
    return this.quads.getWhite(this.index + index);
  }
}
class C2dCoreRenderExecutor extends CoreRenderExecutor {
  init() {
    this._mainRenderTexture = this.ctx.stage.getCanvas();
  }
  _renderQuadOperation(op) {
    let shader = op.shader;
    if (op.length || op.shader.addEmpty()) {
      const target = this._renderTexture || this._mainRenderTexture;
      shader.beforeDraw(op, target);
      shader.draw(op, target);
      shader.afterDraw(op, target);
    }
  }
  _clearRenderTexture() {
    const ctx = this._getContext();
    let clearColor = [0, 0, 0, 0];
    if (this._mainRenderTexture.ctx === ctx) {
      clearColor = this.ctx.stage.getClearColor();
    }
    const renderTexture = ctx.canvas;
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {
      ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);
    } else {
      ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);
      ctx.globalCompositeOperation = "copy";
      ctx.beginPath();
      ctx.rect(0, 0, renderTexture.width, renderTexture.height);
      ctx.closePath();
      ctx.fill();
      ctx.globalCompositeOperation = "source-over";
    }
  }
  _getContext() {
    if (this._renderTexture) {
      return this._renderTexture.ctx;
    } else {
      return this._mainRenderTexture.ctx;
    }
  }
  _restoreContext() {
    const ctx = this._getContext();
    ctx.restore();
    ctx.save();
    ctx._scissor = null;
  }
  _setScissor(area) {
    const ctx = this._getContext();
    if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {
      this._restoreContext();
      let precision = this.ctx.stage.getRenderPrecision();
      if (area) {
        ctx.beginPath();
        ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));
        ctx.closePath();
        ctx.clip();
      }
      ctx._scissor = area;
    }
  }
  static _equalScissorAreas(canvas, area, current) {
    if (!area) {
      area = [0, 0, canvas.width, canvas.height];
    }
    if (!current) {
      current = [0, 0, canvas.width, canvas.height];
    }
    return Utils$1.equalValues(area, current);
  }
}
class C2dShader extends Shader {
  beforeDraw(operation) {
  }
  draw(operation) {
  }
  afterDraw(operation) {
  }
}
class DefaultShader2 extends C2dShader {
  constructor(ctx) {
    super(ctx);
    this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;
    this._tintManager = this.ctx.stage.renderer.tintManager;
  }
  draw(operation, target) {
    const ctx = target.ctx;
    let length = operation.length;
    for (let i = 0; i < length; i++) {
      const tx = operation.getTexture(i);
      const vc = operation.getElementCore(i);
      const rc = operation.getRenderContext(i);
      const white = operation.getWhite(i);
      const stc = operation.getSimpleTc(i);
      const precision = this.ctx.stage.getRenderPrecision();
      ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);
      const rect = tx === this._rectangleTexture;
      const info = { operation, target, index: i, rect };
      if (rect) {
        if (white) {
          ctx.fillStyle = "white";
        } else {
          this._setColorGradient(ctx, vc);
        }
        ctx.globalAlpha = rc.alpha;
        this._beforeDrawEl(info);
        ctx.fillRect(0, 0, vc.w, vc.h);
        this._afterDrawEl(info);
        ctx.globalAlpha = 1;
      } else {
        ctx.globalAlpha = rc.alpha;
        this._beforeDrawEl(info);
        const sourceX = stc ? 0 : vc._ulx * tx.w;
        const sourceY = stc ? 0 : vc._uly * tx.h;
        const sourceW = (stc ? 1 : vc._brx - vc._ulx) * tx.w;
        const sourceH = (stc ? 1 : vc._bry - vc._uly) * tx.h;
        let colorize = !white;
        if (colorize) {
          let color = vc._colorUl;
          if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {
            color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);
          }
          const alpha = (color / 16777216 | 0) / 255;
          ctx.globalAlpha *= alpha;
          const rgb = color & 16777215;
          const tintTexture = this._tintManager.getTintTexture(tx, rgb);
          ctx.fillStyle = "white";
          ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);
        } else {
          ctx.fillStyle = "white";
          ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);
        }
        this._afterDrawEl(info);
        ctx.globalAlpha = 1;
      }
    }
  }
  _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {
    let color = vc._colorUl;
    let gradient;
    if (vc._colorUl === vc._colorUr) {
      if (vc._colorBl === vc._colorBr) {
        if (vc._colorUl === vc.colorBl)
          ;
        else {
          gradient = ctx.createLinearGradient(0, 0, 0, h);
          if (transparency) {
            gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));
            gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));
          } else {
            gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));
            gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));
          }
        }
      }
    } else {
      if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {
        gradient = ctx.createLinearGradient(0, 0, w, 0);
        if (transparency) {
          gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));
          gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));
        } else {
          gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));
          gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));
        }
      }
    }
    if (gradient) {
      ctx.fillStyle = gradient;
    } else {
      ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);
    }
  }
  _beforeDrawEl(info) {
  }
  _afterDrawEl(info) {
  }
}
class C2dTextureTintManager {
  constructor(stage) {
    this.stage = stage;
    this._usedMemory = 0;
    this._cachedNativeTextures = /* @__PURE__ */ new Set();
  }
  destroy() {
    this.gc(true);
    this.stage = null;
    delete this.stage;
  }
  _addMemoryUsage(delta) {
    this._usedMemory += delta;
    this.stage.addMemoryUsage(delta);
  }
  delete(nativeTexture) {
    if (this._hasCache(nativeTexture)) {
      const cache = this._getCache(nativeTexture);
      const prevMemUsage = cache.memoryUsage;
      cache.clear();
      this._cachedNativeTextures.delete(nativeTexture);
      this._addMemoryUsage(cache.memoryUsage - prevMemUsage);
    }
  }
  getTintTexture(nativeTexture, color) {
    const frame = this.stage.frameCounter;
    this._cachedNativeTextures.add(nativeTexture);
    const cache = this._getCache(nativeTexture);
    const item = cache.get(color);
    item.lf = frame;
    if (item.tx) {
      if (nativeTexture.update > item.u) {
        this._tintTexture(item.tx, nativeTexture, color);
      }
      return item.tx;
    } else {
      const before = cache.memoryUsage;
      let target = cache.reuseTexture(frame);
      if (target) {
        target.ctx.clearRect(0, 0, target.width, target.height);
      } else {
        target = document.createElement("canvas");
        target.width = nativeTexture.w;
        target.height = nativeTexture.h;
        target.ctx = target.getContext("2d");
      }
      this._tintTexture(target, nativeTexture, color);
      cache.set(color, target, frame);
      const after = cache.memoryUsage;
      if (after !== before) {
        this._addMemoryUsage(after - before);
      }
      return target;
    }
  }
  _tintTexture(target, source, color) {
    let col = color.toString(16);
    while (col.length < 6) {
      col = "0" + col;
    }
    target.ctx.fillStyle = "#" + col;
    target.ctx.globalCompositeOperation = "copy";
    target.ctx.fillRect(0, 0, source.w, source.h);
    target.ctx.globalCompositeOperation = "multiply";
    target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);
    target.ctx.globalCompositeOperation = "destination-in";
    target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);
  }
  _hasCache(nativeTexture) {
    return !!nativeTexture._tintCache;
  }
  _getCache(nativeTexture) {
    if (!nativeTexture._tintCache) {
      nativeTexture._tintCache = new C2dTintCache(nativeTexture);
    }
    return nativeTexture._tintCache;
  }
  gc(aggressive = false) {
    const frame = this.stage.frameCounter;
    let delta = 0;
    this._cachedNativeTextures.forEach((texture) => {
      const cache = this._getCache(texture);
      if (aggressive) {
        delta += cache.memoryUsage;
        cache.clear();
      } else {
        const before = cache.memoryUsage;
        cache.cleanup(frame);
        cache.releaseBlancoTextures();
        delta += cache.memoryUsage - before;
      }
    });
    if (aggressive) {
      this._cachedNativeTextures.clear();
    }
    if (delta) {
      this._addMemoryUsage(delta);
    }
  }
}
class C2dTintCache {
  constructor(nativeTexture) {
    this._tx = nativeTexture;
    this._colors = /* @__PURE__ */ new Map();
    this._blancoTextures = null;
    this._lastCleanupFrame = 0;
    this._memTextures = 0;
  }
  get memoryUsage() {
    return this._memTextures * this._tx.w * this._tx.h;
  }
  releaseBlancoTextures() {
    this._memTextures -= this._blancoTextures.length;
    this._blancoTextures = [];
  }
  clear() {
    this._blancoTextures = null;
    this._colors.clear();
    this._memTextures = 0;
  }
  get(color) {
    let item = this._colors.get(color);
    if (!item) {
      item = { lf: -1, tx: void 0, u: -1 };
      this._colors.set(color, item);
    }
    return item;
  }
  set(color, texture, frame) {
    const item = this.get(color);
    item.lf = frame;
    item.tx = texture;
    item.u = frame;
    this._memTextures++;
  }
  cleanup(frame) {
    if (this._lastCleanupFrame !== frame) {
      this._blancoTextures = [];
      this._colors.forEach((item, color) => {
        if (item.lf < frame - 1) {
          if (item.tx) {
            this._blancoTextures.push(item.tx);
          }
          this._colors.delete(color);
        }
      });
      this._lastCleanupFrame = frame;
    }
  }
  reuseTexture(frame) {
    this.cleanup(frame);
    if (this._blancoTextures && this._blancoTextures.length) {
      this._memTextures--;
      return this._blancoTextures.pop();
    }
  }
}
class C2dRenderer extends Renderer {
  constructor(stage) {
    super(stage);
    this.tintManager = new C2dTextureTintManager(stage);
    this.setupC2d(this.stage.c2d.canvas);
  }
  destroy() {
    this.tintManager.destroy();
    this.tintManager = null;
    delete this.tintManager;
  }
  _createDefaultShader(ctx) {
    return new DefaultShader2(ctx);
  }
  _getShaderBaseType() {
    return C2dShader;
  }
  _getShaderAlternative(shaderType) {
    return shaderType.getC2d && shaderType.getC2d();
  }
  createCoreQuadList(ctx) {
    return new C2dCoreQuadList(ctx);
  }
  createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {
    return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);
  }
  createCoreRenderExecutor(ctx) {
    return new C2dCoreRenderExecutor(ctx);
  }
  createCoreRenderState(ctx) {
    return new CoreRenderState(ctx);
  }
  createRenderTexture(w, h, pw, ph) {
    const canvas = document.createElement("canvas");
    canvas.width = pw;
    canvas.height = ph;
    this.setupC2d(canvas);
    return canvas;
  }
  freeRenderTexture(nativeTexture) {
    this.tintManager.delete(nativeTexture);
  }
  gc(aggressive) {
    this.tintManager.gc(aggressive);
  }
  uploadTextureSource(textureSource, options) {
    if (options.source.buffer) {
      const canvas = document.createElement("canvas");
      canvas.width = options.w;
      canvas.height = options.h;
      const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);
      canvas.getContext("2d").putImageData(imageData, 0, 0);
      return canvas;
    }
    return options.source;
  }
  freeTextureSource(textureSource) {
    this.tintManager.delete(textureSource.nativeTexture);
  }
  addQuad(renderState, quads, index) {
    const elementCore = quads.quadElements[index];
    quads.setRenderContext(index, elementCore._renderContext);
    quads.setWhite(index, elementCore.isWhite());
    quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());
  }
  isRenderTextureReusable(renderState, renderTextureInfo) {
    return false;
  }
  finishRenderState(renderState) {
  }
  setupC2d(canvas) {
    const ctx = canvas.getContext("2d");
    canvas.ctx = ctx;
    ctx._scissor = null;
    canvas.ctx.save();
  }
}
class SparkShader extends WebGLShader {
  enableAttribs() {
    let gl = this.gl;
    gl.vertexAttribPointer(this._attrib("aVertexPosition"), 2, gl.FLOAT, false, 20, 0);
    gl.enableVertexAttribArray(this._attrib("aVertexPosition"));
    if (this._attrib("aTextureCoord") !== -1) {
      gl.vertexAttribPointer(this._attrib("aTextureCoord"), 2, gl.FLOAT, false, 20, 2 * 4);
      gl.enableVertexAttribArray(this._attrib("aTextureCoord"));
    }
    if (this._attrib("aColor") !== -1) {
      gl.vertexAttribPointer(this._attrib("aColor"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);
      gl.enableVertexAttribArray(this._attrib("aColor"));
    }
  }
  disableAttribs() {
    let gl = this.gl;
    gl.disableVertexAttribArray(this._attrib("aVertexPosition"));
    if (this._attrib("aTextureCoord") !== -1) {
      gl.disableVertexAttribArray(this._attrib("aTextureCoord"));
    }
    if (this._attrib("aColor") !== -1) {
      gl.disableVertexAttribArray(this._attrib("aColor"));
    }
  }
  setupUniforms(operation) {
    this._setUniform("projection", this._getProjection(operation), this.gl.uniform2fv, false);
  }
  draw(operation) {
    let gl = this.gl;
    let length = operation.length;
    if (length) {
      let glTexture = operation.getTexture(0);
      let pos = 0;
      for (let i = 0; i < length; i++) {
        let tx = operation.getTexture(i);
        if (glTexture !== tx) {
          if (glTexture.options && glTexture.options.imageRef) {
            let elementPostion = i > 0 ? i - 1 : i;
            const precision = this.ctx.stage.getOption("precision");
            let vc = operation.getElementCore(elementPostion);
            this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px * precision, vc._worldContext.py * precision, vc._colorUl, vc);
          } else {
            gl.bindTexture(gl.TEXTURE_2D, glTexture);
            gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);
          }
          glTexture = tx;
          pos = i;
        }
      }
      if (pos < length) {
        if (glTexture.options && glTexture.options.imageRef) {
          const precision = this.ctx.stage.getOption("precision");
          let vc = operation.getElementCore(pos);
          this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px * precision, vc._worldContext.py * precision, vc._colorUl, vc);
        } else {
          gl.bindTexture(gl.TEXTURE_2D, glTexture);
          gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);
        }
      }
    }
  }
}
SparkShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
SparkShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    void main(void){
        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;
    }
`;
class SparkRenderer extends WebGLRenderer {
  constructor(stage) {
    super(stage);
  }
  _createDefaultShader(ctx) {
    return new SparkShader(ctx);
  }
  createCoreRenderExecutor(ctx) {
    __webpack_require__.g.beginDrawing();
    let ret = super.createCoreRenderExecutor(ctx);
    __webpack_require__.g.endDrawing();
    return ret;
  }
}
class ImageWorker {
  constructor(options = {}) {
    this._items = /* @__PURE__ */ new Map();
    this._id = 0;
    this._initWorker();
  }
  destroy() {
    if (this._worker) {
      this._worker.terminate();
    }
    this._items = null;
    this._worker = null;
    delete this._items;
    delete this._worker;
  }
  _initWorker() {
    const code = `(${createWorker.toString()})()`;
    const blob = new Blob([code.replace('"use strict";', "")]);
    const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {
      type: "application/javascript; charset=utf-8"
    });
    this._worker = new Worker(blobURL);
    this._worker.postMessage({ type: "config", config: { path: window.location.href, protocol: window.location.protocol } });
    this._worker.onmessage = (e) => {
      if (e.data && e.data.id) {
        const id = e.data.id;
        const item = this._items.get(id);
        if (item) {
          if (e.data.type == "data") {
            this.finish(item, e.data.info);
          } else {
            this.error(item, e.data.info);
          }
        }
      }
    };
  }
  create(src) {
    const id = ++this._id;
    const item = new ImageWorkerImage(this, id, src);
    this._items.set(id, item);
    this._worker.postMessage({ type: "add", id, src });
    return item;
  }
  cancel(image) {
    this._worker.postMessage({ type: "cancel", id: image.id });
    this._items.delete(image.id);
  }
  error(image, info) {
    image.error(info);
    this._items.delete(image.id);
  }
  finish(image, info) {
    image.load(info);
    this._items.delete(image.id);
  }
}
class ImageWorkerImage {
  constructor(manager, id, src) {
    this._manager = manager;
    this._id = id;
    this._src = src;
    this._onError = null;
    this._onLoad = null;
  }
  get id() {
    return this._id;
  }
  get src() {
    return this._src;
  }
  set onError(f) {
    this._onError = f;
  }
  set onLoad(f) {
    this._onLoad = f;
  }
  cancel() {
    this._manager.cancel(this);
  }
  load(info) {
    if (this._onLoad) {
      this._onLoad(info);
    }
  }
  error(info) {
    if (this._onError) {
      this._onError(info);
    }
  }
}
const createWorker = function() {
  function ImageWorkerServer() {
    this.items = /* @__PURE__ */ new Map();
    var t = this;
    onmessage = function(e) {
      t._receiveMessage(e);
    };
  }
  ImageWorkerServer.isPathAbsolute = function(path) {
    return /^(?:\/|[a-z]+:\/\/)/.test(path) || path.substr(0, 5) == "data:";
  };
  ImageWorkerServer.prototype._receiveMessage = function(e) {
    if (e.data.type === "config") {
      this.config = e.data.config;
      var base = this.config.path;
      var hasHashPath = /#.*?\//;
      if (hasHashPath.test(base)) {
        base = base.replace(/#.*$/, "");
      }
      var parts = base.split("/");
      parts.pop();
      this._relativeBase = parts.join("/") + "/";
    } else if (e.data.type === "add") {
      this.add(e.data.id, e.data.src);
    } else if (e.data.type === "cancel") {
      this.cancel(e.data.id);
    }
  };
  ImageWorkerServer.prototype.add = function(id, src) {
    if (!ImageWorkerServer.isPathAbsolute(src)) {
      src = this._relativeBase + src;
    }
    if (src.substr(0, 2) === "//") {
      src = this.config.protocol + src;
    }
    var item = new ImageWorkerServerItem(id, src);
    var t = this;
    item.onFinish = function(result) {
      t.finish(item, result);
    };
    item.onError = function(info) {
      t.error(item, info);
    };
    this.items.set(id, item);
    item.start();
  };
  ImageWorkerServer.prototype.cancel = function(id) {
    var item = this.items.get(id);
    if (item) {
      item.cancel();
      this.items.delete(id);
    }
  };
  ImageWorkerServer.prototype.finish = function(item, { imageBitmap, hasAlphaChannel }) {
    postMessage({
      type: "data",
      id: item.id,
      info: {
        imageBitmap,
        hasAlphaChannel
      }
    }, [imageBitmap]);
    this.items.delete(item.id);
  };
  ImageWorkerServer.prototype.error = function(item, { type, message }) {
    postMessage({
      type: "error",
      id: item.id,
      info: {
        type,
        message
      }
    });
    this.items.delete(item.id);
  };
  ImageWorkerServer.isWPEBrowser = function() {
    return navigator.userAgent.indexOf("WPE") !== -1;
  };
  function ImageWorkerServerItem(id, src) {
    this._onError = void 0;
    this._onFinish = void 0;
    this._id = id;
    this._src = src;
    this._xhr = void 0;
    this._mimeType = void 0;
    this._canceled = false;
  }
  Object.defineProperty(ImageWorkerServerItem.prototype, "id", {
    get: function() {
      return this._id;
    }
  });
  Object.defineProperty(ImageWorkerServerItem.prototype, "onFinish", {
    get: function() {
      return this._onFinish;
    },
    set: function(f) {
      this._onFinish = f;
    }
  });
  Object.defineProperty(ImageWorkerServerItem.prototype, "onError", {
    get: function() {
      return this._onError;
    },
    set: function(f) {
      this._onError = f;
    }
  });
  ImageWorkerServerItem.prototype.start = function() {
    this._xhr = new XMLHttpRequest();
    this._xhr.open("GET", this._src, true);
    this._xhr.responseType = "blob";
    var t = this;
    this._xhr.onerror = function(oEvent) {
      t.error({ type: "connection", message: "Connection error" });
    };
    this._xhr.onload = function(oEvent) {
      var blob = t._xhr.response;
      t._mimeType = blob.type;
      t._createImageBitmap(blob);
    };
    this._xhr.send();
  };
  ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {
    var t = this;
    createImageBitmap(blob, { premultiplyAlpha: "premultiply", colorSpaceConversion: "none", imageOrientation: "none" }).then(function(imageBitmap) {
      t.finish({
        imageBitmap,
        hasAlphaChannel: t._hasAlphaChannel()
      });
    }).catch(function(e) {
      t.error({ type: "parse", message: "Error parsing image data" });
    });
  };
  ImageWorkerServerItem.prototype._hasAlphaChannel = function() {
    if (ImageWorkerServer.isWPEBrowser()) {
      return true;
    } else {
      return this._mimeType.indexOf("image/png") !== -1;
    }
  };
  ImageWorkerServerItem.prototype.cancel = function() {
    if (this._canceled)
      return;
    if (this._xhr) {
      this._xhr.abort();
    }
    this._canceled = true;
  };
  ImageWorkerServerItem.prototype.error = function(type, message) {
    if (!this._canceled && this._onError) {
      this._onError({ type, message });
    }
  };
  ImageWorkerServerItem.prototype.finish = function(info) {
    if (!this._canceled && this._onFinish) {
      this._onFinish(info);
    }
  };
  new ImageWorkerServer();
};
class WebPlatform {
  init(stage) {
    this.stage = stage;
    this._looping = false;
    this._awaitingLoop = false;
    this._loopHandler = null;
    this._idleLoopCounter = 0;
    this._idleLoopDelay = 60;
    if (this.stage.getOption("useImageWorker")) {
      if (!window.createImageBitmap || !window.Worker) {
        console.warn("[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support");
      } else {
        this._imageWorker = new ImageWorker();
      }
    }
    this._registerVisibilityChangeHandler();
  }
  destroy() {
    if (this._imageWorker) {
      this._imageWorker.destroy();
    }
    clearInterval(this._loopHandler);
    this._removeKeyHandler();
    this._removeClickHandler();
    this._removeHoverHandler();
    this._removeScrollWheelHandler();
    this._removeVisibilityChangeHandler();
    this.stage = null;
    delete this.stage;
  }
  startLoop() {
    this._looping = true;
    if (!this._awaitingLoop) {
      this.loop();
    }
  }
  stopLoop() {
    this._looping = false;
  }
  switchLoop() {
    if (this._idleLoopCounter < this._idleLoopDelay) {
      this._idleLoopCounter++;
      return;
    }
    if (!this.stage.ctx.hasRenderUpdates()) {
      this.stopLoop();
      this._loopHandler = setInterval(() => {
        this.stage.updateFrame();
        this.stage.idleFrame();
        if (this.stage.ctx.hasRenderUpdates()) {
          clearInterval(this._loopHandler);
          this.startLoop();
        }
      }, 1e3 / 60);
    } else {
      this._idleLoopCounter = 0;
    }
  }
  loop() {
    let self = this;
    let lp = function() {
      self._awaitingLoop = false;
      if (self._looping) {
        self.stage.updateFrame();
        if (self.stage.getOption("pauseRafLoopOnIdle")) {
          self.switchLoop();
        }
        self.stage.renderFrame();
        requestAnimationFrame(lp);
        self._awaitingLoop = true;
      }
    };
    requestAnimationFrame(lp);
  }
  uploadCompressedGlTexture(gl, textureSource, source, options) {
    const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];
    gl.compressedTexImage2D(
      gl.TEXTURE_2D,
      0,
      source.glInternalFormat,
      source.pixelWidth,
      source.pixelHeight,
      0,
      view
    );
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }
  uploadGlTexture(gl, textureSource, source, options) {
    if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || window.ImageBitmap && source instanceof ImageBitmap) {
      gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);
    } else if (source instanceof HTMLCanvasElement) {
      if (Utils$1.isZiggo || this.stage.getOption("forceTxCanvasSource")) {
        gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);
      } else if (source.width > 0 && source.height > 0) {
        const ctx = source.getContext("2d");
        gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));
      }
    } else {
      gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);
    }
  }
  handleKtxLoad(cb, src) {
    var self = this;
    return function() {
      var arraybuffer = this.response;
      var view = new DataView(arraybuffer);
      var targetIdentifier = 3632701469;
      if (targetIdentifier !== view.getUint32(0) + view.getUint32(4) + view.getUint32(8)) {
        cb("Parsing failed: identifier ktx mismatch:", src);
      }
      var littleEndian = view.getUint32(12) === 16909060 ? true : false;
      var data = {
        glType: view.getUint32(16, littleEndian),
        glTypeSize: view.getUint32(20, littleEndian),
        glFormat: view.getUint32(24, littleEndian),
        glInternalFormat: view.getUint32(28, littleEndian),
        glBaseInternalFormat: view.getUint32(32, littleEndian),
        pixelWidth: view.getUint32(36, littleEndian),
        pixelHeight: view.getUint32(40, littleEndian),
        pixelDepth: view.getUint32(44, littleEndian),
        numberOfArrayElements: view.getUint32(48, littleEndian),
        numberOfFaces: view.getUint32(52, littleEndian),
        numberOfMipmapLevels: view.getUint32(56, littleEndian),
        bytesOfKeyValueData: view.getUint32(60, littleEndian),
        kvps: [],
        mipmaps: [],
        get width() {
          return this.pixelWidth;
        },
        get height() {
          return this.pixelHeight;
        }
      };
      const props = (obj) => {
        const p = [];
        for (let v in obj) {
          p.push(obj[v]);
        }
        return p;
      };
      const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions()).filter((obj) => obj != null).map((obj) => props(obj)).reduce((prev, current) => prev.concat(current));
      if (!formats.includes(data.glInternalFormat)) {
        console.warn("[Lightning] Unrecognized texture extension format:", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());
      }
      var offset = 64;
      offset += data.bytesOfKeyValueData;
      for (var i = 0; i < data.numberOfMipmapLevels; i++) {
        var imageSize = view.getUint32(offset);
        offset += 4;
        data.mipmaps.push(view.buffer.slice(offset, imageSize));
        offset += imageSize;
      }
      cb(null, {
        source: data,
        renderInfo: { src, compressed: true }
      });
    };
  }
  handlePvrLoad(cb, src) {
    return function() {
      const pvrHeaderLength = 13;
      const pvrFormatEtc1 = 36196;
      const pvrWidth = 7;
      const pvrHeight = 6;
      const pvrMipmapCount = 11;
      const pvrMetadata = 12;
      const arrayBuffer = this.response;
      const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);
      const dataOffset = header[pvrMetadata] + 52;
      const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);
      var data = {
        glInternalFormat: pvrFormatEtc1,
        pixelWidth: header[pvrWidth],
        pixelHeight: header[pvrHeight],
        numberOfMipmapLevels: header[pvrMipmapCount],
        mipmaps: [],
        pvr: true,
        get width() {
          return this.pixelWidth;
        },
        get height() {
          return this.pixelHeight;
        }
      };
      let offset = 0;
      let width = data.pixelWidth;
      let height = data.pixelHeight;
      for (var i = 0; i < data.numberOfMipmapLevels; i++) {
        const level = (width + 3 >> 2) * (height + 3 >> 2) * 8;
        const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);
        data.mipmaps.push(view);
        offset += level;
        width = width >> 1;
        height = height >> 1;
      }
      cb(null, {
        source: data,
        renderInfo: { src, compressed: true }
      });
    };
  }
  loadSrcTexture({ src, hasAlpha }, cb) {
    let cancelCb = void 0;
    let isPng = src.toLowerCase().indexOf(".png") >= 0 || src.substr(0, 21) == "data:image/png;base64";
    let isKtx = src.indexOf(".ktx") >= 0;
    let isPvr = src.indexOf(".pvr") >= 0;
    if (isKtx || isPvr) {
      let request = new XMLHttpRequest();
      request.addEventListener(
        "load",
        isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)
      );
      request.open("GET", src);
      request.responseType = "arraybuffer";
      request.send();
      cancelCb = function() {
        request.abort();
      };
    } else if (this._imageWorker) {
      const image = this._imageWorker.create(src);
      image.onError = function(err) {
        return cb("Image load error");
      };
      image.onLoad = function({ imageBitmap, hasAlphaChannel }) {
        cb(null, {
          source: imageBitmap,
          renderInfo: { src, compressed: false },
          hasAlpha: hasAlphaChannel,
          premultiplyAlpha: true
        });
      };
      cancelCb = function() {
        image.cancel();
      };
    } else {
      let image = new Image();
      if (!(src.substr(0, 5) == "data:") && !Utils$1.isPS4) {
        image.crossOrigin = "Anonymous";
      }
      image.onerror = function(err) {
        if (image.src) {
          return cb("Image load error");
        }
      };
      image.onload = function() {
        cb(null, {
          source: image,
          renderInfo: { src, compressed: false },
          hasAlpha: isPng || hasAlpha
        });
      };
      image.src = src;
      cancelCb = function() {
        image.onerror = null;
        image.onload = null;
        image.removeAttribute("src");
      };
    }
    return cancelCb;
  }
  createWebGLContext(w, h) {
    let canvas = this.stage.getOption("canvas") || document.createElement("canvas");
    if (w && h) {
      canvas.width = w;
      canvas.height = h;
    }
    let opts = {
      alpha: true,
      antialias: false,
      premultipliedAlpha: true,
      stencil: true,
      preserveDrawingBuffer: false
    };
    let gl = canvas.getContext("webgl", opts) || canvas.getContext("experimental-webgl", opts) || canvas.getContext("webgl2", opts);
    if (!gl) {
      throw new Error("This browser does not support webGL.");
    }
    return gl;
  }
  createCanvasContext(w, h) {
    let canvas = this.stage.getOption("canvas") || document.createElement("canvas");
    if (w && h) {
      canvas.width = w;
      canvas.height = h;
    }
    let c2d = canvas.getContext("2d");
    if (!c2d) {
      throw new Error("This browser does not support 2d canvas.");
    }
    return c2d;
  }
  getHrTime() {
    return window.performance ? window.performance.now() : new Date().getTime();
  }
  getDrawingCanvas() {
    return document.createElement("canvas");
  }
  getTextureOptionsForDrawingCanvas(canvas) {
    let options = {};
    options.source = canvas;
    return options;
  }
  nextFrame(changes) {
  }
  registerKeydownHandler(keyhandler) {
    this._keydownListener = (e) => {
      keyhandler(e);
    };
    window.addEventListener("keydown", this._keydownListener);
  }
  registerKeyupHandler(keyhandler) {
    this._keyupListener = (e) => {
      keyhandler(e);
    };
    window.addEventListener("keyup", this._keyupListener);
  }
  _removeKeyHandler() {
    if (this._keydownListener) {
      window.removeEventListener("keydown", this._keydownListener);
    }
    if (this._keyupListener) {
      window.removeEventListener("keyup", this._keyupListener);
    }
  }
  registerClickHandler(clickHandler) {
    this._clickListener = (e) => {
      clickHandler(e);
    };
    window.addEventListener("mousedown", this._clickListener);
  }
  _removeClickHandler() {
    if (this._clickListener) {
      window.removeEventListener("mousedown", this._clickListener);
    }
  }
  registerHoverHandler(hoverHandler) {
    this._hoverListener = (e) => {
      hoverHandler(e);
    };
    window.addEventListener("mousemove", this._hoverListener);
  }
  _removeHoverHandler() {
    if (this._hoverListener) {
      window.removeEventListener("mousemove", this._hoverListener);
    }
  }
  registerScrollWheelHandler(registerScrollWheelHandler) {
    this._scrollWheelListener = (e) => {
      registerScrollWheelHandler(e);
    };
    window.addEventListener("wheel", this._scrollWheelListener);
  }
  _removeScrollWheelHandler() {
    if (this._scrollWheelListener) {
      window.removeEventListener("wheel", this._scrollWheelListener);
    }
  }
  _registerVisibilityChangeHandler() {
    this._visibilityChangeHandler = () => {
      if (document.visibilityState === "visible") {
        this.stage.root.core.setHasRenderUpdates(2);
        this.stage.renderFrame();
      }
    };
    document.addEventListener("visibilitychange", this._visibilityChangeHandler);
  }
  _removeVisibilityChangeHandler() {
    if (this._visibilityChangeHandler) {
      document.removeEventListener("visibilitychange", this._visibilityChangeHandler);
    }
  }
}
class PlatformLoader {
  static load(options) {
    if (options.platform) {
      return options.platform;
    } else {
      return WebPlatform;
    }
  }
}
class Utils2 {
  static isFunction(value) {
    return typeof value === "function";
  }
  static isNumber(value) {
    return typeof value === "number";
  }
  static isInteger(value) {
    return typeof value === "number" && value % 1 === 0;
  }
  static isBoolean(value) {
    return value === true || value === false;
  }
  static isString(value) {
    return typeof value == "string";
  }
  static isObject(value) {
    let type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  static isPlainObject(value) {
    let type = typeof value;
    return !!value && type == "object";
  }
  static isObjectLiteral(value) {
    return typeof value === "object" && value && value.constructor === Object;
  }
  static getArrayIndex(index, arr) {
    return Utils2.getModuloIndex(index, arr.length);
  }
  static equalValues(v1, v2) {
    if (typeof v1 !== typeof v2)
      return false;
    if (Utils2.isObjectLiteral(v1)) {
      return Utils2.isObjectLiteral(v2) && Utils2.equalObjectLiterals(v1, v2);
    } else if (Array.isArray(v1)) {
      return Array.isArray(v2) && Utils2.equalArrays(v1, v2);
    } else {
      return v1 === v2;
    }
  }
  static equalObjectLiterals(obj1, obj2) {
    let keys1 = Object.keys(obj1);
    let keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (let i = 0, n = keys1.length; i < n; i++) {
      const k1 = keys1[i];
      const k2 = keys2[i];
      if (k1 !== k2) {
        return false;
      }
      const v1 = obj1[k1];
      const v2 = obj2[k2];
      if (!Utils2.equalValues(v1, v2)) {
        return false;
      }
    }
    return true;
  }
  static equalArrays(v1, v2) {
    if (v1.length !== v2.length) {
      return false;
    }
    for (let i = 0, n = v1.length; i < n; i++) {
      if (!this.equalValues(v1[i], v2[i])) {
        return false;
      }
    }
    return true;
  }
}
class WebGLState {
  constructor(id, gl) {
    this._id = id;
    this._gl = gl;
    this._program = void 0;
    this._buffers = /* @__PURE__ */ new Map();
    this._framebuffers = /* @__PURE__ */ new Map();
    this._renderbuffers = /* @__PURE__ */ new Map();
    this._vertexAttribs = new Array(16);
    this._nonDefaultFlags = /* @__PURE__ */ new Set();
    this._settings = /* @__PURE__ */ new Map();
    this._textures = new Array(8);
    this._maxTexture = 0;
    this._activeTexture = gl.TEXTURE0;
    this._pixelStorei = new Array(5);
  }
  _getDefaultFlag(cap) {
    return cap === this._gl.DITHER;
  }
  setFlag(cap, v) {
    const def = this._getDefaultFlag(cap);
    if (v === def) {
      return this._nonDefaultFlags.delete(cap);
    } else {
      if (!this._nonDefaultFlags.has(cap)) {
        this._nonDefaultFlags.add(cap);
        return true;
      } else {
        return false;
      }
    }
  }
  setBuffer(target, buffer) {
    const change = this._buffers.get(target) !== buffer;
    this._buffers.set(target, buffer);
    if (change && target === this._gl.ARRAY_BUFFER) {
      this._vertexAttribs = [];
    }
    return change;
  }
  setFramebuffer(target, buffer) {
    const change = this._framebuffers.get(target) !== buffer;
    this._framebuffers.set(target, buffer);
    return change;
  }
  setRenderbuffer(target, buffer) {
    const change = this._renderbuffers.get(target) !== buffer;
    this._renderbuffers.set(target, buffer);
    return change;
  }
  setProgram(program) {
    const change = this._program !== program;
    this._program = program;
    return change;
  }
  setSetting(func, v) {
    const s = this._settings.get(func);
    const change = !s || !Utils2.equalValues(s, v);
    this._settings.set(func, v);
    return change;
  }
  disableVertexAttribArray(index) {
    const va = this._vertexAttribs[index];
    if (va && va[5]) {
      va[5] = false;
      return true;
    }
    return false;
  }
  enableVertexAttribArray(index) {
    const va = this._vertexAttribs[index];
    if (va) {
      if (!va[0]) {
        va[0] = true;
        return true;
      }
    } else {
      this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];
      return true;
    }
    return false;
  }
  vertexAttribPointer(index, props) {
    let va = this._vertexAttribs[index];
    let equal = false;
    if (va) {
      equal = va[0] === props[0] && va[1] === props[1] && va[2] === props[2] && va[3] === props[3] && va[4] === props[4];
    }
    if (equal) {
      return false;
    } else {
      props[5] = va ? va[5] : false;
      return true;
    }
  }
  setActiveTexture(texture) {
    const changed = this._activeTexture !== texture;
    this._activeTexture = texture;
    return changed;
  }
  bindTexture(target, texture) {
    const activeIndex = WebGLState._getTextureIndex(this._activeTexture);
    this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);
    const current = this._textures[activeIndex];
    const targetIndex = WebGLState._getTextureTargetIndex(target);
    if (current) {
      if (current[targetIndex] === texture) {
        return false;
      }
      current[targetIndex] = texture;
      return true;
    } else {
      if (texture) {
        this._textures[activeIndex] = [];
        this._textures[activeIndex][targetIndex] = texture;
        return true;
      } else {
        return false;
      }
    }
  }
  setPixelStorei(pname, param) {
    const i = WebGLState._getPixelStoreiIndex(pname);
    const change = !Utils2.equalValues(this._pixelStorei[i], param);
    this._pixelStorei[i] = param;
    return change;
  }
  migrate(s) {
    const t = this;
    this._migrateFlags(t, s);
    if (s._program !== t._program) {
      this._gl._useProgram(s._program);
    }
    this._migrateFramebuffers(t, s);
    this._migrateRenderbuffers(t, s);
    const buffersChanged = this._migrateBuffers(t, s);
    this._migrateAttributes(t, s, buffersChanged);
    this._migrateFlags(t, s);
    this._migrateSettings(t, s);
    this._migratePixelStorei(t, s);
    this._migrateTextures(t, s);
  }
  _migratePixelStorei(t, s) {
    for (let i = 0, n = t._pixelStorei.length; i < n; i++) {
      if (t._pixelStorei[i] !== s._pixelStorei[i]) {
        const value = s._pixelStorei[i] !== void 0 ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);
        this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);
      }
    }
  }
  _migrateTextures(t, s) {
    const max = Math.max(t._maxTexture, s._maxTexture);
    let activeTexture = t._activeTexture;
    for (let i = 0; i < max; i++) {
      const sTargets = s._textures[i];
      const tTargets = t._textures[i];
      const textureNumb = WebGLState._getTextureByIndex(i);
      const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);
      for (let j = 0, n = targetMax; j < n; j++) {
        const target = WebGLState._getTextureTargetByIndex(j);
        if (activeTexture !== textureNumb) {
          this._gl._activeTexture(textureNumb);
          activeTexture = textureNumb;
        }
        const texture = sTargets && sTargets[j] || null;
        this._gl._bindTexture(target, texture);
      }
    }
    if (s._activeTexture !== activeTexture) {
      this._gl._activeTexture(s._activeTexture);
    }
  }
  _migrateBuffers(t, s) {
    s._buffers.forEach((framebuffer, target) => {
      if (t._buffers.get(target) !== framebuffer) {
        this._gl._bindBuffer(target, framebuffer);
      }
    });
    t._buffers.forEach((buffer, target) => {
      const b = s._buffers.get(target);
      if (b === void 0) {
        this._gl._bindBuffer(target, null);
      }
    });
    return s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER);
  }
  _migrateFramebuffers(t, s) {
    s._framebuffers.forEach((framebuffer, target) => {
      if (t._framebuffers.get(target) !== framebuffer) {
        this._gl._bindFramebuffer(target, framebuffer);
      }
    });
    t._framebuffers.forEach((framebuffer, target) => {
      const fb = s._framebuffers.get(target);
      if (fb === void 0) {
        this._gl._bindFramebuffer(target, null);
      }
    });
  }
  _migrateRenderbuffers(t, s) {
    s._renderbuffers.forEach((renderbuffer, target) => {
      if (t._renderbuffers.get(target) !== renderbuffer) {
        this._gl._bindRenderbuffer(target, renderbuffer);
      }
    });
    t._renderbuffers.forEach((renderbuffer, target) => {
      const fb = s._renderbuffers.get(target);
      if (fb === void 0) {
        this._gl._bindRenderbuffer(target, null);
      }
    });
  }
  _migrateAttributes(t, s, buffersChanged) {
    if (!buffersChanged) {
      t._vertexAttribs.forEach((attrib, index) => {
        if (!s._vertexAttribs[index]) {
          this._gl._disableVertexAttribArray(index);
        }
      });
      s._vertexAttribs.forEach((attrib, index) => {
        this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);
        if (attrib[5]) {
          this._gl._enableVertexAttribArray(index);
        } else {
          this._gl._disableVertexAttribArray(index);
        }
      });
    } else {
      s._vertexAttribs.forEach((attrib, index) => {
        if (attrib[0]) {
          this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);
        }
        if (attrib[5]) {
          this._gl._enableVertexAttribArray(index);
        }
      });
    }
  }
  _migrateSettings(t, s) {
    const defaults = this.constructor.getDefaultSettings();
    t._settings.forEach((value, func) => {
      const name = func.name || func.xname;
      if (!s._settings.has(func)) {
        let args = defaults.get(name);
        if (Utils2.isFunction(args)) {
          args = args(this._gl);
        }
        s._settings.set(func, args);
        func.apply(this._gl, args);
      }
    });
    s._settings.forEach((value, func) => {
      const tValue = t._settings.get(func);
      if (!tValue || !Utils2.equalValues(tValue, value)) {
        func.apply(this._gl, value);
      }
    });
  }
  _migrateFlags(t, s) {
    t._nonDefaultFlags.forEach((setting) => {
      if (!s._nonDefaultFlags.has(setting)) {
        if (this._getDefaultFlag(setting)) {
          this._gl._enable(setting);
        } else {
          this._gl._disable(setting);
        }
      }
    });
    s._nonDefaultFlags.forEach((setting) => {
      if (!t._nonDefaultFlags.has(setting)) {
        if (this._getDefaultFlag(setting)) {
          this._gl._disable(setting);
        } else {
          this._gl._enable(setting);
        }
      }
    });
  }
  static getDefaultSettings() {
    if (!this._defaultSettings) {
      this._defaultSettings = /* @__PURE__ */ new Map();
      const d = this._defaultSettings;
      const g = WebGLRenderingContext.prototype;
      d.set("viewport", function(gl) {
        return [0, 0, gl.canvas.width, gl.canvas.height];
      });
      d.set("scissor", function(gl) {
        return [0, 0, gl.canvas.width, gl.canvas.height];
      });
      d.set("blendColor", [0, 0, 0, 0]);
      d.set("blendEquation", [g.FUNC_ADD]);
      d.set("blendEquationSeparate", [g.FUNC_ADD, g.FUNC_ADD]);
      d.set("blendFunc", [g.ONE, g.ZERO]);
      d.set("blendFuncSeparate", [g.ONE, g.ZERO, g.ONE, g.ZERO]);
      d.set("clearColor", [0, 0, 0, 0]);
      d.set("clearDepth", [1]);
      d.set("clearStencil", [0]);
      d.set("colorMask", [true, true, true, true]);
      d.set("cullFace", [g.BACK]);
      d.set("depthFunc", [g.LESS]);
      d.set("depthMask", [true]);
      d.set("depthRange", [0, 1]);
      d.set("frontFace", [g.CCW]);
      d.set("lineWidth", [1]);
      d.set("polygonOffset", [0, 0]);
      d.set("sampleCoverage", [1, false]);
      d.set("stencilFunc", [g.ALWAYS, 0, 1]);
      d.set("_stencilFuncSeparateFront", [g.ALWAYS, 0, 1]);
      d.set("_stencilFuncSeparateBack", [g.ALWAYS, 0, 1]);
      d.set("_stencilFuncSeparateFrontAndBack", [g.ALWAYS, 0, 1]);
      d.set("stencilMask", [1]);
      d.set("_stencilMaskSeparateFront", [1]);
      d.set("_stencilMaskSeparateBack", [1]);
      d.set("_stencilMaskSeparateFrontAndBack", [1]);
      d.set("stencilOp", [g.KEEP, g.KEEP, g.KEEP]);
      d.set("_stencilOpSeparateFront", [g.KEEP, g.KEEP, g.KEEP]);
      d.set("_stencilOpSeparateBack", [g.KEEP, g.KEEP, g.KEEP]);
      d.set("_stencilOpSeparateFrontAndBack", [g.KEEP, g.KEEP, g.KEEP]);
      d.set("vertexAttrib1f", []);
      d.set("vertexAttrib1fv", []);
      d.set("vertexAttrib2f", []);
      d.set("vertexAttrib2fv", []);
      d.set("vertexAttrib3f", []);
      d.set("vertexAttrib3fv", []);
      d.set("vertexAttrib4f", []);
      d.set("vertexAttrib4fv", []);
    }
    return this._defaultSettings;
  }
  static _getTextureTargetIndex(target) {
    switch (target) {
      case 3553:
        return 0;
      case 34067:
        return 1;
      default:
        throw new Error("Unknown texture target: " + target);
    }
  }
  static _getTextureTargetByIndex(index) {
    if (!this._textureTargetIndices) {
      this._textureTargetIndices = [3553, 34067];
    }
    return this._textureTargetIndices[index];
  }
  static _getTextureIndex(index) {
    return index - 33984;
  }
  static _getTextureByIndex(index) {
    return index + 33984;
  }
  static _getPixelStoreiIndex(pname) {
    switch (pname) {
      case 3333:
        return 0;
      case 3317:
        return 1;
      case 37440:
        return 2;
      case 37441:
        return 3;
      case 37443:
        return 4;
      case 37445:
        return 5;
      default:
        throw new Error("Unknown pixelstorei: " + pname);
    }
  }
  static _getPixelStoreiByIndex(index) {
    if (!this._pixelStoreiIndices) {
      this._pixelStoreiIndices = [3333, 3317, 37440, 37441, 37443];
    }
    return this._pixelStoreiIndices[index];
  }
  static _getDefaultPixelStoreiByIndex(index) {
    if (!this._pixelStoreiDefaults) {
      this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];
    }
    return this._pixelStoreiDefaults[index];
  }
}
class WebGLStateManager {
  _initStateManager(id = "default") {
    this._states = {};
    this._state = this._getState(id);
  }
  _getState(id) {
    if (!this._states[id]) {
      this._states[id] = new WebGLState(id, this);
    }
    return this._states[id];
  }
  switchState(id = "default") {
    if (this._state._id !== id) {
      const newState = this._getState(id);
      this._state.migrate(newState);
      this._state = newState;
    }
  }
  $useProgram(program) {
    if (this._state.setProgram(program))
      this._useProgram(program);
  }
  $bindBuffer(target, fb) {
    if (this._state.setBuffer(target, fb))
      this._bindBuffer(target, fb);
  }
  $bindFramebuffer(target, fb) {
    if (this._state.setFramebuffer(target, fb))
      this._bindFramebuffer(target, fb);
  }
  $bindRenderbuffer(target, fb) {
    if (this._state.setRenderbuffer(target, fb))
      this._bindRenderbuffer(target, fb);
  }
  $enable(cap) {
    if (this._state.setFlag(cap, true))
      this._enable(cap);
  }
  $disable(cap) {
    if (this._state.setFlag(cap, false))
      this._disable(cap);
  }
  $viewport(x, y, w, h) {
    if (this._state.setSetting(this._viewport, [x, y, w, h]))
      this._viewport(x, y, w, h);
  }
  $scissor(x, y, w, h) {
    if (this._state.setSetting(this._scissor, [x, y, w, h]))
      this._scissor(x, y, w, h);
  }
  $disableVertexAttribArray(index) {
    if (this._state.disableVertexAttribArray(index))
      this._disableVertexAttribArray(index);
  }
  $enableVertexAttribArray(index) {
    if (this._state.enableVertexAttribArray(index))
      this._enableVertexAttribArray(index);
  }
  $vertexAttribPointer(index, size, type, normalized, stride, offset) {
    if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))
      this._vertexAttribPointer(index, size, type, normalized, stride, offset);
  }
  $activeTexture(texture) {
    if (this._state.setActiveTexture(texture))
      this._activeTexture(texture);
  }
  $bindTexture(target, texture) {
    if (this._state.bindTexture(target, texture))
      this._bindTexture(target, texture);
  }
  $pixelStorei(pname, param) {
    if (this._state.setPixelStorei(pname, param)) {
      this._pixelStorei(pname, param);
    }
  }
  $stencilFuncSeparate(face, func, ref, mask) {
    let f;
    switch (face) {
      case this.FRONT:
        f = this._stencilFuncSeparateFront;
        break;
      case this.BACK:
        f = this._stencilFuncSeparateBack;
        break;
      case this.FRONT_AND_BACK:
        f = this._stencilFuncSeparateFrontAndBack;
        break;
    }
    if (this._state.setSetting(f, [func, ref, mask]))
      f.apply(this, [func, ref, mask]);
  }
  _stencilFuncSeparateFront(func, ref, mask) {
    this._stencilFuncSeparate(this.FRONT, func, ref, mask);
  }
  _stencilFuncSeparateBack(func, ref, mask) {
    this._stencilFuncSeparate(this.BACK, func, ref, mask);
  }
  _stencilFuncSeparateFrontAndBack(func, ref, mask) {
    this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);
  }
  $stencilMaskSeparate(face, mask) {
    let f;
    switch (face) {
      case this.FRONT:
        f = this._stencilMaskSeparateFront;
        break;
      case this.BACK:
        f = this._stencilMaskSeparateBack;
        break;
      case this.FRONT_AND_BACK:
        f = this._stencilMaskSeparateFrontAndBack;
        break;
    }
    if (this._state.setSetting(f, [mask]))
      f.apply(this, [mask]);
  }
  _stencilMaskSeparateFront(mask) {
    this._stencilMaskSeparate(this.FRONT, mask);
  }
  _stencilMaskSeparateBack(mask) {
    this._stencilMaskSeparate(this.BACK, mask);
  }
  _stencilMaskSeparateFrontAndBack(mask) {
    this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);
  }
  $stencilOpSeparate(face, fail, zfail, zpass) {
    let f;
    switch (face) {
      case this.FRONT:
        f = this._stencilOpSeparateFront;
        break;
      case this.BACK:
        f = this._stencilOpSeparateBack;
        break;
      case this.FRONT_AND_BACK:
        f = this._stencilOpSeparateFrontAndBack;
        break;
    }
    if (this._state.setSetting(f, [fail, zfail, zpass]))
      f.apply(this, [fail, zfail, zpass]);
  }
  _stencilOpSeparateFront(fail, zfail, zpass) {
    this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);
  }
  _stencilOpSeparateBack(fail, zfail, zpass) {
    this._stencilOpSeparate(this.BACK, fail, zfail, zpass);
  }
  _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {
    this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);
  }
  $blendColor(red, green, blue, alpha) {
    if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))
      this._blendColor(red, green, blue, alpha);
  }
  $blendEquation(mode) {
    if (this._state.setSetting(this._blendEquation, [mode]))
      this._blendEquation(mode);
  }
  $blendEquationSeparate(modeRGB, modeAlpha) {
    if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))
      this._blendEquationSeparate(modeRGB, modeAlpha);
  }
  $blendFunc(sfactor, dfactor) {
    if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))
      this._blendFunc(sfactor, dfactor);
  }
  $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {
    if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))
      this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
  }
  $clearColor(red, green, blue, alpha) {
    if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))
      this._clearColor(red, green, blue, alpha);
  }
  $clearDepth(depth) {
    if (this._state.setSetting(this._clearDepth, [depth]))
      this._clearDepth(depth);
  }
  $clearStencil(s) {
    if (this._state.setSetting(this._clearStencil, [s]))
      this._clearStencil(s);
  }
  $colorMask(red, green, blue, alpha) {
    if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))
      this._colorMask(red, green, blue, alpha);
  }
  $cullFace(mode) {
    if (this._state.setSetting(this._cullFace, [mode]))
      this._cullFace(mode);
  }
  $depthFunc(func) {
    if (this._state.setSetting(this._depthFunc, [func]))
      this._depthFunc(func);
  }
  $depthMask(flag) {
    if (this._state.setSetting(this._depthMask, [flag]))
      this._depthMask(flag);
  }
  $depthRange(zNear, zFar) {
    if (this._state.setSetting(this._depthRange, [zNear, zFar]))
      this._depthRange(zNear, zFar);
  }
  $frontFace(mode) {
    if (this._state.setSetting(this._frontFace, [mode]))
      this._frontFace(mode);
  }
  $lineWidth(width) {
    if (this._state.setSetting(this._lineWidth, [width]))
      this._lineWidth(width);
  }
  $polygonOffset(factor, units) {
    if (this._state.setSetting(this._polygonOffset, [factor, units]))
      this._polygonOffset(factor, units);
  }
  $sampleCoverage(value, invert) {
    if (this._state.setSetting(this._sampleCoverage, [value, invert]))
      this._sampleCoverage(value, invert);
  }
  $stencilFunc(func, ref, mask) {
    if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))
      this._stencilFunc(func, ref, mask);
  }
  $stencilMask(mask) {
    if (this._state.setSetting(this._stencilMask, [mask]))
      this._stencilMask(mask);
  }
  $stencilOp(fail, zfail, zpass) {
    if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))
      this._stencilOp(fail, zfail, zpass);
  }
  $vertexAttrib1f(indx, x) {
    if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))
      this._vertexAttrib1f(indx, x);
  }
  $vertexAttrib1fv(indx, values) {
    if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))
      this._vertexAttrib1fv(indx, values);
  }
  $vertexAttrib2f(indx, x, y) {
    if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))
      this._vertexAttrib2f(indx, x, y);
  }
  $vertexAttrib2fv(indx, values) {
    if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))
      this._vertexAttrib2fv(indx, values);
  }
  $vertexAttrib3f(indx, x, y, z) {
    if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))
      this._vertexAttrib3f(indx, x, y, z);
  }
  $vertexAttrib3fv(indx, values) {
    if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))
      this._vertexAttrib3fv(indx, values);
  }
  $vertexAttrib4f(indx, x, y, z, w) {
    if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))
      this._vertexAttrib4f(indx, x, y, z, w);
  }
  $vertexAttrib4fv(indx, values) {
    if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))
      this._vertexAttrib4fv(indx, values);
  }
  static enable(gl, id = "default") {
    const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);
    gl.__proto__;
    names.forEach((name) => {
      if (name !== "constructor") {
        const method = WebGLStateManager.prototype[name];
        if (name.charAt(0) === "$") {
          name = name.substr(1);
        }
        if (gl[name] !== method) {
          if (gl[name]) {
            if (!gl[name].name) {
              gl[name].xname = name;
            }
            gl["_" + name] = gl[name];
          }
          gl[name] = method;
        }
      }
    });
    WebGLStateManager.prototype._initStateManager.call(gl, id);
    return gl;
  }
}
class TextureManager {
  constructor(stage) {
    this.stage = stage;
    this._usedMemory = 0;
    this._uploadedTextureSources = [];
    this.textureSourceHashmap = /* @__PURE__ */ new Map();
  }
  get usedMemory() {
    return this._usedMemory;
  }
  destroy() {
    for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {
      this._nativeFreeTextureSource(this._uploadedTextureSources[i]);
    }
    this.textureSourceHashmap.clear();
    this._usedMemory = 0;
  }
  getReusableTextureSource(id) {
    return this.textureSourceHashmap.get(id);
  }
  getTextureSource(func, id) {
    let textureSource = id ? this.textureSourceHashmap.get(id) : null;
    if (!textureSource) {
      textureSource = new TextureSource(this, func);
      if (id) {
        textureSource.lookupId = id;
        this.textureSourceHashmap.set(id, textureSource);
      }
    }
    return textureSource;
  }
  uploadTextureSource(textureSource, options) {
    if (textureSource.isLoaded())
      return;
    this._addMemoryUsage(textureSource.w * textureSource.h);
    const nativeTexture = this._nativeUploadTextureSource(textureSource, options);
    textureSource._nativeTexture = nativeTexture;
    nativeTexture.w = textureSource.w;
    nativeTexture.h = textureSource.h;
    nativeTexture.update = this.stage.frameCounter;
    this._uploadedTextureSources.push(textureSource);
    this.addToLookupMap(textureSource);
    this._updateVramUsage(textureSource, 1);
  }
  _addMemoryUsage(delta) {
    this._usedMemory += delta;
    this.stage.addMemoryUsage(delta);
  }
  _updateVramUsage(textureSource, sign) {
    const nativeTexture = textureSource.nativeTexture;
    var usage;
    if (!Stage.isWebglSupported())
      return;
    if (!textureSource.isLoaded())
      return;
    if (!nativeTexture.hasOwnProperty("bytesPerPixel") || isNaN(nativeTexture.bytesPerPixel))
      return;
    usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);
    this.stage.addVramUsage(usage, textureSource.hasAlpha);
  }
  addToLookupMap(textureSource) {
    const lookupId = textureSource.lookupId;
    if (lookupId) {
      if (!this.textureSourceHashmap.has(lookupId)) {
        this.textureSourceHashmap.set(lookupId, textureSource);
      }
    }
  }
  gc() {
    this.freeUnusedTextureSources();
    this._cleanupLookupMap();
  }
  freeUnusedTextureSources() {
    let remainingTextureSources = [];
    for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {
      let ts = this._uploadedTextureSources[i];
      if (ts.allowCleanup()) {
        this._freeManagedTextureSource(ts);
      } else {
        remainingTextureSources.push(ts);
      }
    }
    this._uploadedTextureSources = remainingTextureSources;
    this._cleanupLookupMap();
  }
  _freeManagedTextureSource(textureSource) {
    if (textureSource.isLoaded()) {
      this._nativeFreeTextureSource(textureSource);
      this._addMemoryUsage(-textureSource.w * textureSource.h);
      this._updateVramUsage(textureSource, -1);
    }
    textureSource.loadingSince = null;
  }
  _cleanupLookupMap() {
    this.textureSourceHashmap.forEach((textureSource, lookupId) => {
      if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {
        this.textureSourceHashmap.delete(lookupId);
      }
    });
  }
  freeTextureSource(textureSource) {
    const index = this._uploadedTextureSources.indexOf(textureSource);
    const managed = index !== -1;
    if (textureSource.isLoaded()) {
      if (managed) {
        this._addMemoryUsage(-textureSource.w * textureSource.h);
        this._uploadedTextureSources.splice(index, 1);
      }
      this._nativeFreeTextureSource(textureSource);
    }
    textureSource.loadingSince = null;
  }
  _nativeUploadTextureSource(textureSource, options) {
    return this.stage.renderer.uploadTextureSource(textureSource, options);
  }
  _nativeFreeTextureSource(textureSource) {
    this.stage.renderer.freeTextureSource(textureSource);
    textureSource.clearNativeTexture();
  }
}
class TextureThrottler {
  constructor(stage) {
    this.stage = stage;
    this.genericCancelCb = (textureSource) => {
      this._remove(textureSource);
    };
    this._sources = [];
    this._data = [];
  }
  destroy() {
    this._sources = [];
    this._data = [];
    this.stage = null;
    delete this._sources;
    delete this._data;
    delete this.stage;
  }
  processSome() {
    if (this._sources.length) {
      const start = Date.now();
      do {
        this._processItem();
      } while (this._sources.length && Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME);
    }
  }
  _processItem() {
    const source = this._sources.pop();
    const data = this._data.pop();
    if (source.isLoading()) {
      source.processLoadedSource(data);
    }
  }
  add(textureSource, data) {
    this._sources.push(textureSource);
    this._data.push(data);
  }
  _remove(textureSource) {
    const index = this._sources.indexOf(textureSource);
    if (index >= 0) {
      this._sources.splice(index, 1);
      this._data.splice(index, 1);
    }
  }
}
TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;
class CoreContext {
  constructor(stage) {
    this.stage = stage;
    this.root = null;
    this.updateTreeOrder = 0;
    this.renderState = this.stage.renderer.createCoreRenderState(this);
    this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);
    this.renderExec.init();
    this._usedMemory = 0;
    this._renderTexturePool = [];
    this._renderTextureId = 1;
    this._zSorts = [];
    this.renderToTextureCount = 0;
  }
  get usedMemory() {
    return this._usedMemory;
  }
  destroy() {
    this._renderTexturePool.forEach((texture) => this._freeRenderTexture(texture));
    this._usedMemory = 0;
    this.stage = null;
    this.root = null;
    this.renderState = null;
    this.renderExec = null;
    this._renderTexturePool = null;
    this._zSorts = null;
    delete this.stage;
    delete this.root;
    delete this.renderState;
    delete this.renderExec;
    delete this._renderTexturePool;
    delete this._zSorts;
  }
  hasRenderUpdates() {
    return !!this.root._parent._hasRenderUpdates;
  }
  render() {
    this.root._parent._hasRenderUpdates = 0;
    this._render();
  }
  update() {
    this._update();
    if (this.root._hasUpdates) {
      this._update();
    }
    this._performForcedZSorts();
  }
  _performForcedZSorts() {
    const n = this._zSorts.length;
    if (n) {
      for (let i = 0, n2 = this._zSorts.length; i < n2; i++) {
        if (this._zSorts[i].zSort) {
          this._zSorts[i].sortZIndexedChildren();
        }
      }
      this._zSorts = [];
    }
  }
  _update() {
    this.updateTreeOrder = 0;
    this.root.update();
  }
  _render() {
    const debugFrame = this.stage.getOption("debugFrame");
    this._fillRenderState();
    if (this.stage.getOption("readPixelsBeforeDraw")) {
      this._readPixels();
    }
    this._performRender();
    if (debugFrame) {
      console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`);
    }
    if (this.stage.getOption("readPixelsAfterDraw") && this.renderToTextureCount >= this.stage.getOption("readPixelsAfterDrawThreshold")) {
      if (debugFrame) {
        console.log(`[Lightning] readPixelsAfterDraw behavior triggered`);
      }
      this._readPixels();
    }
    this.renderToTextureCount = 0;
  }
  _readPixels() {
    const pixels = new Uint8Array(4);
    const gl = this.stage.gl;
    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
  }
  _fillRenderState() {
    this.renderState.reset();
    this.root.render();
    this.renderState.finish();
  }
  _performRender() {
    this.renderExec.execute();
  }
  _addMemoryUsage(delta) {
    this._usedMemory += delta;
    this.stage.addMemoryUsage(delta);
  }
  allocateRenderTexture(w, h) {
    let prec = this.stage.getRenderPrecision();
    let pw = Math.max(1, Math.round(w * prec));
    let ph = Math.max(1, Math.round(h * prec));
    const n = this._renderTexturePool.length;
    for (let i = n - 1; i >= 0; i--) {
      const texture2 = this._renderTexturePool[i];
      if (texture2.w === pw && texture2.h === ph && texture2.update !== this.stage.frameCounter) {
        texture2.f = this.stage.frameCounter;
        this._renderTexturePool.splice(i, 1);
        return texture2;
      }
    }
    const texture = this._createRenderTexture(w, h, pw, ph);
    texture.precision = prec;
    return texture;
  }
  releaseRenderTexture(texture) {
    this._renderTexturePool.push(texture);
  }
  freeUnusedRenderTextures(maxAge = 60) {
    let limit = this.stage.frameCounter - maxAge;
    this._renderTexturePool = this._renderTexturePool.filter((texture) => {
      if (texture.f <= limit) {
        this._freeRenderTexture(texture);
        return false;
      }
      return true;
    });
  }
  _createRenderTexture(w, h, pw, ph) {
    this._addMemoryUsage(pw * ph);
    const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);
    texture.id = this._renderTextureId++;
    texture.f = this.stage.frameCounter;
    texture.ow = w;
    texture.oh = h;
    texture.w = pw;
    texture.h = ph;
    return texture;
  }
  _freeRenderTexture(nativeTexture) {
    this.stage.renderer.freeRenderTexture(nativeTexture);
    this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);
  }
  copyRenderTexture(renderTexture, nativeTexture, options) {
    this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);
  }
  forceZSort(elementCore) {
    this._zSorts.push(elementCore);
  }
}
class TransitionSettings {
  constructor(stage) {
    this.stage = stage;
    this._timingFunction = "ease";
    this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);
    this.delay = 0;
    this.duration = 0.2;
    this.merger = null;
  }
  get timingFunction() {
    return this._timingFunction;
  }
  set timingFunction(v) {
    this._timingFunction = v;
    this._timingFunctionImpl = StageUtils.getTimingFunction(v);
  }
  get timingFunctionImpl() {
    return this._timingFunctionImpl;
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
}
TransitionSettings.prototype.isTransitionSettings = true;
class TransitionManager {
  constructor(stage) {
    this.stage = stage;
    this.stage.on("frameStart", () => this.progress());
    this.active = /* @__PURE__ */ new Set();
    this.defaultTransitionSettings = new TransitionSettings(this.stage);
  }
  progress() {
    if (this.active.size) {
      let dt = this.stage.dt;
      let filter = false;
      this.active.forEach(function(a) {
        a.progress(dt);
        if (!a.isRunning()) {
          filter = true;
        }
      });
      if (filter) {
        this.active = new Set([...this.active].filter((t) => t.isRunning()));
      }
    }
  }
  createSettings(settings) {
    const transitionSettings = new TransitionSettings();
    Base.patchObject(transitionSettings, settings);
    return transitionSettings;
  }
  addActive(transition) {
    this.active.add(transition);
  }
  removeActive(transition) {
    this.active.delete(transition);
  }
}
class MultiSpline {
  constructor() {
    this._clear();
  }
  _clear() {
    this._p = [];
    this._pe = [];
    this._idp = [];
    this._f = [];
    this._v = [];
    this._lv = [];
    this._sm = [];
    this._s = [];
    this._ve = [];
    this._sme = [];
    this._se = [];
    this._length = 0;
  }
  parse(rgba, def) {
    let i, n;
    if (!Utils$1.isObjectLiteral(def)) {
      def = { 0: def };
    }
    let defaultSmoothness = 0.5;
    let items = [];
    for (let key in def) {
      if (def.hasOwnProperty(key)) {
        let obj = def[key];
        if (!Utils$1.isObjectLiteral(obj)) {
          obj = { v: obj };
        }
        let p = parseFloat(key);
        if (key === "sm") {
          defaultSmoothness = obj.v;
        } else if (!isNaN(p) && p >= 0 && p <= 2) {
          obj.p = p;
          obj.f = Utils$1.isFunction(obj.v);
          obj.lv = obj.f ? obj.v(0, 0) : obj.v;
          items.push(obj);
        }
      }
    }
    items = items.sort(function(a, b) {
      return a.p - b.p;
    });
    n = items.length;
    for (i = 0; i < n; i++) {
      let last = i === n - 1;
      if (!items[i].hasOwnProperty("pe")) {
        items[i].pe = last ? items[i].p <= 1 ? 1 : 2 : items[i + 1].p;
      } else {
        const max = i < n - 1 ? items[i + 1].p : 1;
        if (items[i].pe > max) {
          items[i].pe = max;
        }
      }
      if (items[i].pe === items[i].p) {
        items[i].idp = 0;
      } else {
        items[i].idp = 1 / (items[i].pe - items[i].p);
      }
    }
    for (i = 0; i < n; i++) {
      if (!items[i].hasOwnProperty("sm")) {
        items[i].sm = defaultSmoothness;
      }
      if (!items[i].hasOwnProperty("s")) {
        if (i === 0 || i === n - 1 || items[i].p === 1) {
          items[i].s = rgba ? [0, 0, 0, 0] : 0;
        } else {
          const pi = items[i - 1];
          const ni = items[i + 1];
          if (pi.p === ni.p) {
            items[i].s = rgba ? [0, 0, 0, 0] : 0;
          } else {
            if (rgba) {
              const nc = MultiSpline.getRgbaComponents(ni.lv);
              const pc = MultiSpline.getRgbaComponents(pi.lv);
              const d = 1 / (ni.p - pi.p);
              items[i].s = [
                d * (nc[0] - pc[0]),
                d * (nc[1] - pc[1]),
                d * (nc[2] - pc[2]),
                d * (nc[3] - pc[3])
              ];
            } else {
              items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);
            }
          }
        }
      }
    }
    for (i = 0; i < n - 1; i++) {
      if (!items[i].f) {
        let last = i === n - 1;
        if (!items[i].hasOwnProperty("ve")) {
          items[i].ve = last ? items[i].lv : items[i + 1].lv;
        }
        if (Utils$1.isNumber(items[i].v) && Utils$1.isNumber(items[i].lv)) {
          if (!items[i].hasOwnProperty("sme")) {
            items[i].sme = last ? defaultSmoothness : items[i + 1].sm;
          }
          if (!items[i].hasOwnProperty("se")) {
            items[i].se = last ? rgba ? [0, 0, 0, 0] : 0 : items[i + 1].s;
          }
          if (rgba) {
            items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);
          } else {
            items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);
          }
          items[i].f = true;
        }
      }
    }
    if (this.length) {
      this._clear();
    }
    for (i = 0, n = items.length; i < n; i++) {
      this._add(items[i]);
    }
  }
  _add(item) {
    this._p.push(item.p || 0);
    this._pe.push(item.pe || 0);
    this._idp.push(item.idp || 0);
    this._f.push(item.f || false);
    this._v.push(item.hasOwnProperty("v") ? item.v : 0);
    this._lv.push(item.lv || 0);
    this._sm.push(item.sm || 0);
    this._s.push(item.s || 0);
    this._ve.push(item.ve || 0);
    this._sme.push(item.sme || 0);
    this._se.push(item.se || 0);
    this._length++;
  }
  _getItem(p) {
    const n = this._length;
    if (!n) {
      return -1;
    }
    if (p < this._p[0]) {
      return 0;
    }
    for (let i = 0; i < n; i++) {
      if (this._p[i] <= p && p < this._pe[i]) {
        return i;
      }
    }
    return n - 1;
  }
  getValue(p) {
    const i = this._getItem(p);
    if (i === -1) {
      return void 0;
    } else {
      if (this._f[i]) {
        const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));
        return this._v[i](o);
      } else {
        return this._v[i];
      }
    }
  }
  get length() {
    return this._length;
  }
  static getRgbaComponents(argb) {
    let r = (argb / 65536 | 0) % 256;
    let g = (argb / 256 | 0) % 256;
    let b = argb % 256;
    let a = argb / 16777216 | 0;
    return [r, g, b, a];
  }
  static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {
    let dp = p2 - p1;
    s1 *= dp;
    s2 *= dp;
    let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);
    if (!helpers) {
      return function(p) {
        if (p === 0)
          return v1;
        if (p === 1)
          return v2;
        return v2 * p + v1 * (1 - p);
      };
    } else {
      return function(p) {
        if (p === 0)
          return v1;
        if (p === 1)
          return v2;
        return MultiSpline.calculateSpline(helpers, p);
      };
    }
  }
  static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {
    let dp = p2 - p1;
    s1[0] *= dp;
    s1[1] *= dp;
    s1[2] *= dp;
    s1[3] *= dp;
    s2[0] *= dp;
    s2[1] *= dp;
    s2[2] *= dp;
    s2[3] *= dp;
    let cv1 = MultiSpline.getRgbaComponents(v1);
    let cv2 = MultiSpline.getRgbaComponents(v2);
    let helpers = [
      MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),
      MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),
      MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),
      MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])
    ];
    if (!helpers[0]) {
      return function(p) {
        if (p === 0)
          return v1;
        if (p === 1)
          return v2;
        return MultiSpline.mergeColors(v2, v1, p);
      };
    } else {
      return function(p) {
        if (p === 0)
          return v1;
        if (p === 1)
          return v2;
        return MultiSpline.getArgbNumber([
          Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),
          Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),
          Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),
          Math.min(255, MultiSpline.calculateSpline(helpers[3], p))
        ]);
      };
    }
  }
  static getSplineHelpers(v1, v2, o1, i2, s1, s2) {
    if (!o1 && !i2) {
      return null;
    }
    let csx = o1;
    let csy = v1 + s1 * o1;
    let cex = 1 - i2;
    let cey = v2 - s2 * i2;
    let xa = 3 * csx - 3 * cex + 1;
    let xb = -6 * csx + 3 * cex;
    let xc = 3 * csx;
    let ya = 3 * csy - 3 * cey + v2 - v1;
    let yb = 3 * (cey + v1) - 6 * csy;
    let yc = 3 * (csy - v1);
    let yd = v1;
    return [xa, xb, xc, ya, yb, yc, yd];
  }
  static calculateSpline(helpers, p) {
    let xa = helpers[0];
    let xb = helpers[1];
    let xc = helpers[2];
    let ya = helpers[3];
    let yb = helpers[4];
    let yc = helpers[5];
    let yd = helpers[6];
    if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {
      return p;
    }
    let t = 0.5, cbx, dx;
    for (let it = 0; it < 20; it++) {
      cbx = t * (t * (t * xa + xb) + xc);
      dx = p - cbx;
      if (dx > -1e-8 && dx < 1e-8) {
        return t * (t * (t * ya + yb) + yc) + yd;
      }
      let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;
      if (cbxd > 1e-10 && cbxd < 1e-10) {
        break;
      }
      t += dx / cbxd;
    }
    let minT = 0;
    let maxT = 1;
    for (let it = 0; it < 20; it++) {
      t = 0.5 * (minT + maxT);
      cbx = t * (t * (t * xa + xb) + xc);
      dx = p - cbx;
      if (dx > -1e-8 && dx < 1e-8) {
        return t * (t * (t * ya + yb) + yc) + yd;
      }
      if (dx < 0) {
        maxT = t;
      } else {
        minT = t;
      }
    }
    return t;
  }
  static mergeColors(c1, c2, p) {
    let r1 = (c1 / 65536 | 0) % 256;
    let g1 = (c1 / 256 | 0) % 256;
    let b1 = c1 % 256;
    let a1 = c1 / 16777216 | 0;
    let r2 = (c2 / 65536 | 0) % 256;
    let g2 = (c2 / 256 | 0) % 256;
    let b2 = c2 % 256;
    let a2 = c2 / 16777216 | 0;
    let r = r1 * p + r2 * (1 - p);
    let g = g1 * p + g2 * (1 - p);
    let b = b1 * p + b2 * (1 - p);
    let a = a1 * p + a2 * (1 - p);
    return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);
  }
  static getArgbNumber(rgba) {
    rgba[0] = Math.max(0, Math.min(255, rgba[0]));
    rgba[1] = Math.max(0, Math.min(255, rgba[1]));
    rgba[2] = Math.max(0, Math.min(255, rgba[2]));
    rgba[3] = Math.max(0, Math.min(255, rgba[3]));
    let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);
    if (v < 0) {
      v = 4294967295 + v + 1;
    }
    return v;
  }
}
class AnimationActionSettings {
  constructor(animationSettings) {
    this.animationSettings = animationSettings;
    this._selector = "";
    this._items = new MultiSpline();
    this._props = [];
    this._propSetters = [];
    this._resetValue = void 0;
    this._hasResetValue = false;
    this._hasColorProperty = void 0;
  }
  getResetValue() {
    if (this._hasResetValue) {
      return this._resetValue;
    } else {
      return this._items.getValue(0);
    }
  }
  apply(element, p, factor) {
    const elements = this.getAnimatedElements(element);
    let v = this._items.getValue(p);
    if (v === void 0 || !elements.length) {
      return;
    }
    if (factor !== 1) {
      let sv = this.getResetValue();
      if (Utils$1.isNumber(v) && Utils$1.isNumber(sv)) {
        if (this.hasColorProperty()) {
          v = StageUtils.mergeColors(v, sv, factor);
        } else {
          v = StageUtils.mergeNumbers(v, sv, factor);
        }
      }
    }
    const n = this._propSetters.length;
    const m = elements.length;
    for (let j = 0; j < m; j++) {
      for (let i = 0; i < n; i++) {
        this._propSetters[i](elements[j], v);
      }
    }
  }
  getAnimatedElements(element) {
    return element.select(this._selector);
  }
  reset(element) {
    const elements = this.getAnimatedElements(element);
    let v = this.getResetValue();
    if (v === void 0 || !elements.length) {
      return;
    }
    const n = this._propSetters.length;
    const m = elements.length;
    for (let j = 0; j < m; j++) {
      for (let i = 0; i < n; i++) {
        this._propSetters[i](elements[j], v);
      }
    }
  }
  set selector(v) {
    this._selector = v;
  }
  set t(v) {
    this.selector = v;
  }
  get resetValue() {
    return this._resetValue;
  }
  set resetValue(v) {
    this._resetValue = v;
    this._hasResetValue = v !== void 0;
  }
  set rv(v) {
    this.resetValue = v;
  }
  set value(v) {
    this._items.parse(this.hasColorProperty(), v);
  }
  set v(v) {
    this.value = v;
  }
  set properties(v) {
    if (!Array.isArray(v)) {
      v = [v];
    }
    this._props = [];
    v.forEach((prop) => {
      this._props.push(prop);
      this._propSetters.push(Element.getSetter(prop));
    });
  }
  set property(v) {
    this._hasColorProperty = void 0;
    this.properties = v;
  }
  set p(v) {
    this.properties = v;
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
  hasColorProperty() {
    if (this._hasColorProperty === void 0) {
      this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;
    }
    return this._hasColorProperty;
  }
}
AnimationActionSettings.prototype.isAnimationActionSettings = true;
class AnimationSettings {
  constructor() {
    this._actions = [];
    this.delay = 0;
    this.duration = 1;
    this.repeat = 0;
    this.repeatOffset = 0;
    this.repeatDelay = 0;
    this.autostop = false;
    this.stopMethod = AnimationSettings.STOP_METHODS.FADE;
    this._stopTimingFunction = "ease";
    this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);
    this.stopDuration = 0;
    this.stopDelay = 0;
  }
  get actions() {
    return this._actions;
  }
  set actions(v) {
    this._actions = [];
    for (let i = 0, n = v.length; i < n; i++) {
      const e = v[i];
      if (!e.isAnimationActionSettings) {
        const aas = new AnimationActionSettings(this);
        aas.patch(e);
        this._actions.push(aas);
      } else {
        this._actions.push(e);
      }
    }
  }
  apply(element, p, factor = 1) {
    this._actions.forEach(function(action) {
      action.apply(element, p, factor);
    });
  }
  reset(element) {
    this._actions.forEach(function(action) {
      action.reset(element);
    });
  }
  get stopTimingFunction() {
    return this._stopTimingFunction;
  }
  set stopTimingFunction(v) {
    this._stopTimingFunction = v;
    this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);
  }
  get stopTimingFunctionImpl() {
    return this._stopTimingFunctionImpl;
  }
  patch(settings) {
    Base.patchObject(this, settings);
  }
}
AnimationSettings.STOP_METHODS = {
  FADE: "fade",
  REVERSE: "reverse",
  FORWARD: "forward",
  IMMEDIATE: "immediate",
  ONETOTWO: "onetotwo"
};
class Animation extends EventEmitter {
  constructor(manager, settings, element) {
    super();
    this.manager = manager;
    this._settings = settings;
    this._element = element;
    this._state = Animation.STATES.IDLE;
    this._p = 0;
    this._delayLeft = 0;
    this._repeatsLeft = 0;
    this._stopDelayLeft = 0;
    this._stopP = 0;
  }
  start() {
    if (this._element && this._element.attached) {
      this._p = 0;
      this._delayLeft = this.settings.delay;
      this._repeatsLeft = this.settings.repeat;
      this._state = Animation.STATES.PLAYING;
      this.emit("start");
      this.checkActive();
    } else {
      console.warn("[Lightning] Element must be attached before starting animation");
    }
  }
  play() {
    if (this._state === Animation.STATES.PAUSED) {
      this._state = Animation.STATES.PLAYING;
      this.checkActive();
      this.emit("resume");
    } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {
      this._state = Animation.STATES.PLAYING;
      this.emit("stopContinue");
    } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {
      this.start();
    }
  }
  pause() {
    if (this._state === Animation.STATES.PLAYING) {
      this._state = Animation.STATES.PAUSED;
      this.emit("pause");
    }
  }
  replay() {
    if (this._state == Animation.STATES.FINISHED) {
      this.start();
    } else {
      this.play();
    }
  }
  skipDelay() {
    this._delayLeft = 0;
    this._stopDelayLeft = 0;
  }
  finish() {
    if (this._state === Animation.STATES.PLAYING) {
      this._delayLeft = 0;
      this._p = 1;
    } else if (this._state === Animation.STATES.STOPPING) {
      this._stopDelayLeft = 0;
      this._p = 0;
    }
  }
  stop() {
    if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE)
      return;
    this._stopDelayLeft = this.settings.stopDelay || 0;
    if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE && !this._stopDelayLeft || this._delayLeft > 0) {
      this._state = Animation.STATES.STOPPING;
      this.emit("stop");
    } else {
      if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {
        this._stopP = 0;
      }
      this._state = Animation.STATES.STOPPING;
      this.emit("stop");
    }
    this.checkActive();
  }
  stopNow() {
    if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {
      this._state = Animation.STATES.STOPPING;
      this._p = 0;
      this.emit("stop");
      this.reset();
      this._state = Animation.STATES.STOPPED;
      this.emit("stopFinish");
    }
  }
  isPaused() {
    return this._state === Animation.STATES.PAUSED;
  }
  isPlaying() {
    return this._state === Animation.STATES.PLAYING;
  }
  isStopping() {
    return this._state === Animation.STATES.STOPPING;
  }
  isFinished() {
    return this._state === Animation.STATES.FINISHED;
  }
  checkActive() {
    if (this.isActive()) {
      this.manager.addActive(this);
    }
  }
  isActive() {
    return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;
  }
  progress(dt) {
    if (!this._element)
      return;
    this._progress(dt);
    this.apply();
  }
  _progress(dt) {
    if (this._state == Animation.STATES.STOPPING) {
      this._stopProgress(dt);
      return;
    }
    if (this._state != Animation.STATES.PLAYING) {
      return;
    }
    if (this._delayLeft > 0) {
      this._delayLeft -= dt;
      if (this._delayLeft < 0) {
        dt = -this._delayLeft;
        this._delayLeft = 0;
        this.emit("delayEnd");
      } else {
        return;
      }
    }
    if (this.settings.duration === 0) {
      this._p = 1;
    } else if (this.settings.duration > 0) {
      this._p += dt / this.settings.duration;
    }
    if (this._p >= 1) {
      if (this.settings.repeat == -1 || this._repeatsLeft > 0) {
        if (this._repeatsLeft > 0) {
          this._repeatsLeft--;
        }
        this._p = this.settings.repeatOffset;
        this.emit("progress", this._p);
        if (this.settings.repeatDelay) {
          this._delayLeft = this.settings.repeatDelay;
        }
        this.emit("repeat", this._repeatsLeft);
      } else {
        this._p = 1;
        this.emit("progress", this._p);
        this._state = Animation.STATES.FINISHED;
        this.emit("finish");
        if (this.settings.autostop) {
          this.stop();
        }
      }
    } else {
      this.emit("progress", this._p);
    }
  }
  _stopProgress(dt) {
    let duration = this._getStopDuration();
    if (this._stopDelayLeft > 0) {
      this._stopDelayLeft -= dt;
      if (this._stopDelayLeft < 0) {
        dt = -this._stopDelayLeft;
        this._stopDelayLeft = 0;
        this.emit("stopDelayEnd");
      } else {
        return;
      }
    }
    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {
      this._state = Animation.STATES.STOPPED;
      this.emit("stopFinish");
    } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {
      if (duration === 0) {
        this._p = 0;
      } else if (duration > 0) {
        this._p -= dt / duration;
      }
      if (this._p <= 0) {
        this._p = 0;
        this._state = Animation.STATES.STOPPED;
        this.emit("stopFinish");
      }
    } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {
      this._progressStopTransition(dt);
      if (this._stopP >= 1) {
        this._p = 0;
        this._state = Animation.STATES.STOPPED;
        this.emit("stopFinish");
      }
    } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {
      if (this._p < 2) {
        if (duration === 0) {
          this._p = 2;
        } else if (duration > 0) {
          if (this._p < 1) {
            this._p += dt / this.settings.duration;
          } else {
            this._p += dt / duration;
          }
        }
        if (this._p >= 2) {
          this._p = 2;
          this._state = Animation.STATES.STOPPED;
          this.emit("stopFinish");
        } else {
          this.emit("progress", this._p);
        }
      }
    } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {
      if (this._p < 1) {
        if (this.settings.duration == 0) {
          this._p = 1;
        } else {
          this._p += dt / this.settings.duration;
        }
        if (this._p >= 1) {
          if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {
            this._p = 1;
            this._state = Animation.STATES.STOPPED;
            this.emit("stopFinish");
          } else {
            if (this._repeatsLeft > 0) {
              this._repeatsLeft--;
              this._p = 0;
              this.emit("repeat", this._repeatsLeft);
            } else {
              this._p = 1;
              this._state = Animation.STATES.STOPPED;
              this.emit("stopFinish");
            }
          }
        } else {
          this.emit("progress", this._p);
        }
      }
    }
  }
  _progressStopTransition(dt) {
    if (this._stopP < 1) {
      if (this._stopDelayLeft > 0) {
        this._stopDelayLeft -= dt;
        if (this._stopDelayLeft < 0) {
          dt = -this._stopDelayLeft;
          this._stopDelayLeft = 0;
          this.emit("delayEnd");
        } else {
          return;
        }
      }
      const duration = this._getStopDuration();
      if (duration == 0) {
        this._stopP = 1;
      } else {
        this._stopP += dt / duration;
      }
      if (this._stopP >= 1) {
        this._stopP = 1;
      }
    }
  }
  _getStopDuration() {
    return this.settings.stopDuration || this.settings.duration;
  }
  apply() {
    if (this._state === Animation.STATES.STOPPED) {
      this.reset();
    } else {
      let factor = 1;
      if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {
        factor = 1 - this.settings.stopTimingFunctionImpl(this._stopP);
      }
      this._settings.apply(this._element, this._p, factor);
    }
  }
  reset() {
    this._settings.reset(this._element);
  }
  get state() {
    return this._state;
  }
  get p() {
    return this._p;
  }
  get delayLeft() {
    return this._delayLeft;
  }
  get element() {
    return this._element;
  }
  get frame() {
    return Math.round(this._p * this._settings.duration * 60);
  }
  get settings() {
    return this._settings;
  }
}
Animation.STATES = {
  IDLE: 0,
  PLAYING: 1,
  STOPPING: 2,
  STOPPED: 3,
  FINISHED: 4,
  PAUSED: 5
};
class AnimationManager {
  constructor(stage) {
    this.stage = stage;
    this.stage.on("frameStart", () => this.progress());
    this.active = /* @__PURE__ */ new Set();
  }
  progress() {
    if (this.active.size) {
      let dt = this.stage.dt;
      let filter = false;
      this.active.forEach(function(a) {
        if (a.isActive()) {
          a.progress(dt);
        } else {
          filter = true;
        }
      });
      if (filter) {
        this.active = new Set([...this.active].filter((t) => t.isActive()));
      }
    }
  }
  createAnimation(element, settings) {
    if (Utils$1.isObjectLiteral(settings)) {
      settings = this.createSettings(settings);
    }
    return new Animation(
      this,
      settings,
      element
    );
  }
  createSettings(settings) {
    const animationSettings = new AnimationSettings();
    Base.patchObject(animationSettings, settings);
    return animationSettings;
  }
  addActive(transition) {
    this.active.add(transition);
  }
}
class RectangleTexture extends Texture {
  _getLookupId() {
    return "__whitepix";
  }
  _getSourceLoader() {
    return function(cb) {
      var whitePixel = new Uint8Array([255, 255, 255, 255]);
      cb(null, { source: whitePixel, w: 1, h: 1, permanent: true });
    };
  }
  isAutosizeTexture() {
    return false;
  }
}
class Stage extends EventEmitter {
  constructor(options = {}) {
    super();
    this._setOptions(options);
    this._usedMemory = 0;
    this._lastGcFrame = 0;
    this._usedVramAlpha = 0;
    this._usedVramNonAlpha = 0;
    const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);
    this.platform = new platformType();
    if (this.platform.init) {
      this.platform.init(this);
    }
    this.gl = null;
    this.c2d = null;
    const context = this.getOption("context");
    if (context) {
      if (context.useProgram) {
        this.gl = context;
      } else {
        this.c2d = context;
      }
    } else {
      if (Utils$1.isWeb && (!Stage.isWebglSupported() || this.getOption("canvas2d"))) {
        this.c2d = this.platform.createCanvasContext(this.getOption("w"), this.getOption("h"));
      } else {
        this.gl = this.platform.createWebGLContext(this.getOption("w"), this.getOption("h"));
      }
    }
    if (this.gl) {
      WebGLStateManager.enable(this.gl, "lightning");
    }
    this._mode = this.gl ? 0 : 1;
    if (this.getCanvas()) {
      if (this.getOption("devicePixelRatio") !== 1) {
        const ratio = this.getOption("devicePixelRatio");
        this.getCanvas().style.width = this._options["w"] / ratio + "px";
        this.getCanvas().style.height = this._options["h"] / ratio + "px";
      }
      this._options.w = this.getCanvas().width;
      this._options.h = this.getCanvas().height;
    }
    if (this._mode === 0) {
      if (Utils$1.isSpark) {
        this._renderer = new SparkRenderer(this);
      } else {
        this._renderer = new WebGLRenderer(this);
      }
    } else {
      this._renderer = new C2dRenderer(this);
    }
    this.setClearColor(this.getOption("clearColor"));
    this.frameCounter = 0;
    this.transitions = new TransitionManager(this);
    this.animations = new AnimationManager(this);
    this.textureManager = new TextureManager(this);
    this.textureThrottler = new TextureThrottler(this);
    this.startTime = 0;
    this.currentTime = 0;
    this.dt = 0;
    this.rectangleTexture = new RectangleTexture(this);
    this.rectangleTexture.load();
    this.rectangleTexture.source.permanent = true;
    this.ctx = new CoreContext(this);
    this._updateSourceTextures = /* @__PURE__ */ new Set();
  }
  get renderer() {
    return this._renderer;
  }
  static isWebglSupported() {
    if (Utils$1.isNode) {
      return true;
    }
    try {
      return !!window.WebGLRenderingContext;
    } catch (e) {
      return false;
    }
  }
  get mode() {
    return this._mode;
  }
  isWebgl() {
    return this.mode === 0;
  }
  isC2d() {
    return this.mode === 1;
  }
  getOption(name) {
    return this._options[name];
  }
  _setOptions(o) {
    this._options = {};
    let opt = (name, def) => {
      let value = o[name];
      if (value === void 0) {
        this._options[name] = def;
      } else {
        this._options[name] = value;
      }
    };
    opt("canvas", null);
    opt("context", null);
    opt("w", 1920);
    opt("h", 1080);
    opt("srcBasePath", null);
    opt("memoryPressure", 24e6);
    opt("bufferMemory", 2e6);
    opt("textRenderIssueMargin", 0);
    opt("fontSharp", { precision: 0.6666666667, fontSize: 24 });
    opt("clearColor", [0, 0, 0, 0]);
    opt("defaultFontFace", "sans-serif");
    opt("fixedDt", 0);
    opt("useImageWorker", true);
    opt("autostart", true);
    opt("precision", 1);
    opt("canvas2d", false);
    opt("platform", null);
    opt("readPixelsBeforeDraw", false);
    opt("devicePixelRatio", 1);
    opt("readPixelsAfterDraw", false);
    opt("readPixelsAfterDrawThreshold", 0);
    opt("debugFrame", false);
    opt("forceTxCanvasSource", false);
    opt("pauseRafLoopOnIdle", false);
    if (o["devicePixelRatio"] != null && o["devicePixelRatio"] !== 1) {
      this._options["precision"] *= o["devicePixelRatio"];
      this._options["w"] *= o["devicePixelRatio"];
      this._options["h"] *= o["devicePixelRatio"];
    }
  }
  setApplication(app) {
    this.application = app;
  }
  init() {
    if (this.application.getOption("debug") && this.platform._imageWorker) {
      console.log("[Lightning] Using image worker!");
    }
    if (this.application.getOption("debug") && this.c2d) {
      console.log("[Lightning] Using canvas2d renderer");
    }
    this.application.setAsRoot();
    if (this.getOption("autostart")) {
      this.platform.startLoop();
    }
  }
  destroy() {
    this.platform.stopLoop();
    this.platform.destroy();
    this.ctx.destroy();
    this.textureManager.destroy();
    this._renderer.destroy();
    if (this.gl) {
      this.gl.clearColor(0, 0, 0, 0);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT);
    } else if (this.c2d) {
      this.c2d.clearRect(
        0,
        0,
        this.c2d.canvas.width,
        this.c2d.canvas.height
      );
    }
    this.gl = null;
    this.c2d = null;
    this.ctx = null;
    this._options = null;
    this.platform = null;
    this.textureManager = null;
    this._renderer = null;
    delete this.gl;
    delete this.c2d;
    delete this.ctx;
    delete this._options;
    delete this.platform;
    delete this.textureManager;
    delete this._renderer;
  }
  stop() {
    this.platform.stopLoop();
  }
  resume() {
    this.platform.startLoop();
  }
  get root() {
    return this.application;
  }
  getCanvas() {
    return this._mode ? this.c2d.canvas : this.gl.canvas;
  }
  getRenderPrecision() {
    return this._options.precision;
  }
  addUpdateSourceTexture(texture) {
    if (this._updatingFrame) {
      texture._performUpdateSource();
    } else {
      this._updateSourceTextures.add(texture);
    }
  }
  removeUpdateSourceTexture(texture) {
    if (this._updateSourceTextures) {
      this._updateSourceTextures.delete(texture);
    }
  }
  hasUpdateSourceTexture(texture) {
    return this._updateSourceTextures && this._updateSourceTextures.has(texture);
  }
  _performUpdateSource() {
    if (this._updateSourceTextures.size) {
      this._updateSourceTextures.forEach((texture) => {
        texture._performUpdateSource();
      });
      this._updateSourceTextures = /* @__PURE__ */ new Set();
    }
  }
  _calculateDt() {
    this.startTime = this.currentTime;
    this.currentTime = this.platform.getHrTime();
    if (this._options.fixedDt) {
      this.dt = this._options.fixedDt;
    } else {
      this.dt = !this.startTime ? 0.02 : 1e-3 * (this.currentTime - this.startTime);
    }
  }
  updateFrame() {
    this._calculateDt();
    this.emit("frameStart");
    this._performUpdateSource();
    this.emit("update");
  }
  idleFrame() {
    this.textureThrottler.processSome();
    this.emit("frameEnd");
    this.frameCounter++;
  }
  renderFrame() {
    const changes = this.ctx.hasRenderUpdates();
    this.textureThrottler.processSome();
    if (changes) {
      this._updatingFrame = true;
      this.ctx.update();
      this.ctx.render();
      this._updatingFrame = false;
    }
    this.platform.nextFrame(changes);
    this.emit("frameEnd");
    this.frameCounter++;
  }
  isUpdatingFrame() {
    return this._updatingFrame;
  }
  drawFrame() {
    this.updateFrame();
    this.renderFrame();
  }
  forceRenderUpdate() {
    if (this.root) {
      this.root.core._parent.setHasRenderUpdates(1);
    }
  }
  setClearColor(clearColor) {
    this.forceRenderUpdate();
    if (clearColor === null) {
      this._clearColor = null;
    } else if (Array.isArray(clearColor)) {
      this._clearColor = clearColor;
    } else {
      this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);
    }
  }
  getClearColor() {
    return this._clearColor;
  }
  createElement(settings) {
    if (settings) {
      return this.element(settings);
    } else {
      return new Element(this);
    }
  }
  createShader(settings) {
    return Shader.create(this, settings);
  }
  element(settings) {
    if (settings.isElement)
      return settings;
    let element;
    if (settings.type) {
      element = new settings.type(this);
    } else {
      element = new Element(this);
    }
    element.patch(settings);
    return element;
  }
  c(settings) {
    return this.element(settings);
  }
  get w() {
    return this._options.w;
  }
  get h() {
    return this._options.h;
  }
  get coordsWidth() {
    return this.w / this._options.precision;
  }
  get coordsHeight() {
    return this.h / this._options.precision;
  }
  addMemoryUsage(delta) {
    this._usedMemory += delta;
    if (this._lastGcFrame !== this.frameCounter) {
      if (this._usedMemory > this.getOption("memoryPressure")) {
        this.gc(false);
        if (this._usedMemory > this.getOption("memoryPressure") - 2e6) {
          this.gc(true);
        }
      }
    }
  }
  get usedMemory() {
    return this._usedMemory;
  }
  addVramUsage(delta, alpha) {
    if (alpha) {
      this._usedVramAlpha += delta;
    } else {
      this._usedVramNonAlpha += delta;
    }
  }
  get usedVramAlpha() {
    return this._usedVramAlpha;
  }
  get usedVramNonAlpha() {
    return this._usedVramNonAlpha;
  }
  get usedVram() {
    return this._usedVramAlpha + this._usedVramNonAlpha;
  }
  gc(aggressive) {
    if (this._lastGcFrame !== this.frameCounter) {
      this._lastGcFrame = this.frameCounter;
      const memoryUsageBefore = this._usedMemory;
      this.gcTextureMemory(aggressive);
      this.gcRenderTextureMemory(aggressive);
      this.renderer.gc(aggressive);
      if (this.application.getOption("debug")) {
        console.log(`[Lightning] GC${aggressive ? "[aggressive]" : ""}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);
        const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;
        console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);
      }
    }
  }
  gcTextureMemory(aggressive = false) {
    if (aggressive && this.ctx.root.visible) {
      this.ctx.root.visible = false;
      this.textureManager.gc();
      this.ctx.root.visible = true;
    } else {
      this.textureManager.gc();
    }
  }
  gcRenderTextureMemory(aggressive = false) {
    if (aggressive && this.root.visible) {
      this.root.visible = false;
      this.ctx.freeUnusedRenderTextures(0);
      this.root.visible = true;
    } else {
      this.ctx.freeUnusedRenderTextures(0);
    }
  }
  getDrawingCanvas() {
    return this.platform.getDrawingCanvas();
  }
  update() {
    this.ctx.update();
  }
  addServiceProvider(serviceprovider) {
    if (Utils$1.isSpark) {
      this.platform.addServiceProvider(serviceprovider);
    }
  }
  getChildrenByPosition(x, y) {
    const children = [];
    this.root.core.update();
    this.root.core.collectAtCoord(x, y, children);
    return children;
  }
}
class Application extends Component {
  constructor(options = {}, properties) {
    Application._temp_options = options;
    Application.booting = true;
    const stage = new Stage(options.stage);
    super(stage, properties);
    Application.booting = false;
    this.__updateFocusCounter = 0;
    this.__keypressTimers = /* @__PURE__ */ new Map();
    this.__hoveredChild = null;
    this.stage.init();
    this.updateFocusSettings();
    this.__keymap = this.getOption("keys");
    if (this.__keymap) {
      this.stage.platform.registerKeydownHandler((e) => {
        this._receiveKeydown(e);
      });
      this.stage.platform.registerKeyupHandler((e) => {
        this._receiveKeyup(e);
      });
    }
    if (this.getOption("enablePointer")) {
      this.stage.platform.registerClickHandler((e) => {
        this._receiveClick(e);
      });
      this.stage.platform.registerHoverHandler((e) => {
        this._receiveHover(e);
      });
      this.stage.platform.registerScrollWheelHandler((e) => {
        this._recieveScrollWheel(e);
      });
      this.cursor = "default";
    }
  }
  getOption(name) {
    return this.__options[name];
  }
  _setOptions(o) {
    this.__options = {};
    let opt = (name, def) => {
      let value = o[name];
      if (value === void 0) {
        this.__options[name] = def;
      } else {
        this.__options[name] = value;
      }
    };
    opt("debug", false);
    opt("keys", {
      38: "Up",
      40: "Down",
      37: "Left",
      39: "Right",
      13: "Enter",
      8: "Back",
      27: "Exit"
    });
    opt("enablePointer", false);
  }
  __construct() {
    this.stage.setApplication(this);
    this._setOptions(Application._temp_options);
    delete Application._temp_options;
    super.__construct();
  }
  __init() {
    super.__init();
    this.__updateFocus();
  }
  updateFocusPath() {
    this.__updateFocus();
  }
  __updateFocus() {
    const notOverridden = this.__updateFocusRec();
    if (!Application.booting && notOverridden) {
      this.updateFocusSettings();
    }
  }
  __updateFocusRec() {
    const updateFocusId = ++this.__updateFocusCounter;
    this.__updateFocusId = updateFocusId;
    const newFocusPath = this.__getFocusPath();
    const newFocusedComponent = newFocusPath[newFocusPath.length - 1];
    const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : void 0;
    if (!prevFocusedComponent) {
      this._focusPath = [];
      for (let i = 0, n = newFocusPath.length; i < n; i++) {
        this._focusPath.push(newFocusPath[i]);
        this._focusPath[i]._focus(newFocusedComponent, void 0);
        const focusOverridden = this.__updateFocusId !== updateFocusId;
        if (focusOverridden) {
          return false;
        }
      }
      return true;
    } else {
      let m = Math.min(this._focusPath.length, newFocusPath.length);
      let index;
      for (index = 0; index < m; index++) {
        if (this._focusPath[index] !== newFocusPath[index]) {
          break;
        }
      }
      if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {
        if (this.getOption("debug")) {
          console.log("[Lightning] Focus changed: " + newFocusedComponent.getLocationString());
        }
        for (let i = this._focusPath.length - 1; i >= index; i--) {
          const unfocusedElement = this._focusPath.pop();
          unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);
          const focusOverridden = this.__updateFocusId !== updateFocusId;
          if (focusOverridden) {
            return false;
          }
        }
        for (let i = index, n = newFocusPath.length; i < n; i++) {
          this._focusPath.push(newFocusPath[i]);
          this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);
          const focusOverridden = this.__updateFocusId !== updateFocusId;
          if (focusOverridden) {
            return false;
          }
        }
        for (let i = 0; i < index; i++) {
          this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);
        }
      }
    }
    return true;
  }
  updateFocusSettings() {
    const focusedComponent = this._focusPath[this._focusPath.length - 1];
    const focusSettings = {};
    const defaultSetFocusSettings = Component.prototype._setFocusSettings;
    for (let i = 0, n = this._focusPath.length; i < n; i++) {
      if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {
        this._focusPath[i]._setFocusSettings(focusSettings);
      }
    }
    const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;
    for (let i = 0, n = this._focusPath.length; i < n; i++) {
      if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {
        this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);
      }
    }
    this.__prevFocusSettings = focusSettings;
  }
  _handleFocusSettings(settings, prevSettings, focused, prevFocused) {
  }
  __getFocusPath() {
    const path = [this];
    let current = this;
    do {
      const nextFocus = current._getFocused();
      if (!nextFocus || nextFocus === current) {
        break;
      }
      let ptr = nextFocus.cparent;
      if (ptr === current) {
        path.push(nextFocus);
      } else {
        const newParts = [nextFocus];
        do {
          if (!ptr) {
            current._throwError("Return value for _getFocused must be an attached descendant component but its '" + nextFocus.getLocationString() + "'");
          }
          newParts.push(ptr);
          ptr = ptr.cparent;
        } while (ptr !== current);
        for (let i = 0, n = newParts.length; i < n; i++) {
          path.push(newParts[n - i - 1]);
        }
      }
      current = nextFocus;
    } while (true);
    return path;
  }
  get focusPath() {
    return this._focusPath;
  }
  focusTopDownEvent(events, ...args) {
    const path = this.focusPath;
    const n = path.length;
    for (let i = 0; i < n; i++) {
      const event = path[i]._getMostSpecificHandledMember(events);
      if (event !== void 0) {
        const returnValue = path[i][event](...args);
        if (returnValue !== false) {
          return true;
        }
      }
    }
    return false;
  }
  focusBottomUpEvent(events, ...args) {
    const path = this.focusPath;
    const n = path.length;
    for (let i = n - 1; i >= 0; i--) {
      const event = path[i]._getMostSpecificHandledMember(events);
      if (event !== void 0) {
        const returnValue = path[i][event](...args);
        if (returnValue !== false) {
          return true;
        }
      }
    }
    return false;
  }
  _receiveKeydown(e) {
    const obj = e;
    const key = this.__keymap[e.keyCode];
    const path = this.focusPath;
    let keys;
    if (key) {
      keys = Array.isArray(key) ? key : [key];
    }
    if (keys) {
      for (let i = 0, n = keys.length; i < n; i++) {
        const hasTimer = this.__keypressTimers.has(keys[i]);
        if (path[path.length - 1].longpress && hasTimer) {
          return;
        }
        if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, "_captureKey"], obj)) {
          this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, "_handleKey"], obj);
        }
      }
    } else {
      if (!this.stage.application.focusTopDownEvent(["_captureKey"], obj)) {
        this.stage.application.focusBottomUpEvent(["_handleKey"], obj);
      }
    }
    this.updateFocusPath();
    const consumer = path[path.length - 1];
    if (keys && consumer.longpress) {
      for (let i = 0, n = keys.length; i < n; i++) {
        this._startLongpressTimer(keys[i], consumer);
      }
    }
  }
  _receiveKeyup(e) {
    const obj = e;
    const key = this.__keymap[e.keyCode];
    let keys;
    if (key) {
      keys = Array.isArray(key) ? key : [key];
    }
    if (keys) {
      for (let i = 0, n = keys.length; i < n; i++) {
        if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, "_captureKeyRelease"], obj)) {
          this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, "_handleKeyRelease"], obj);
        }
      }
    } else {
      if (!this.stage.application.focusTopDownEvent(["_captureKeyRelease"], obj)) {
        this.stage.application.focusBottomUpEvent(["_handleKeyRelease"], obj);
      }
    }
    this.updateFocusPath();
    if (keys) {
      for (let i = 0, n = keys.length; i < n; i++) {
        if (this.__keypressTimers.has(keys[i])) {
          clearTimeout(this.__keypressTimers.get(keys[i]));
          this.__keypressTimers.delete(keys[i]);
        }
      }
    }
  }
  _startLongpressTimer(key, element) {
    const config = element.longpress;
    const lookup = key.toLowerCase();
    if (config[lookup]) {
      const timeout = config[lookup];
      if (!Utils$1.isNumber(timeout)) {
        element._throwError("config value for longpress must be a number");
      } else {
        this.__keypressTimers.set(key, setTimeout(() => {
          if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, "_captureKey"], {})) {
            this.stage.application.focusBottomUpEvent([`_handle${key}Long`, "_handleKey"], {});
          }
          this.__keypressTimers.delete(key);
        }, timeout || 500));
      }
    }
    return;
  }
  _recieveScrollWheel(e) {
    const obj = e;
    const { clientX, clientY } = obj;
    if (clientX <= this.stage.w && clientY <= this.stage.h) {
      if (!this.fireTopDownScrollWheelHandler("_captureScroll", obj)) {
        this.fireBottomUpScrollWheelHandler("_handleScroll", obj);
      }
    }
  }
  fireTopDownScrollWheelHandler(event, obj) {
    let children = this.stage.application.children;
    let affected = this._findChildren([], children).reverse();
    let n = affected.length;
    while (n--) {
      const child = affected[n];
      if (child && child[event]) {
        child._captureScroll(obj);
        return true;
      }
    }
    return false;
  }
  fireBottomUpScrollWheelHandler(event, obj) {
    const { clientX, clientY } = obj;
    const target = this._getTargetChild(clientX, clientY);
    let child = target;
    while (child !== null) {
      if (child && child[event]) {
        child._handleScroll(obj);
        return true;
      }
      child = child.parent;
    }
    return false;
  }
  _receiveClick(e) {
    const obj = e;
    const { clientX, clientY } = obj;
    if (clientX <= this.stage.w && clientY <= this.stage.h) {
      this.stage.application.fireBottomUpClickHandler(obj);
    }
  }
  fireBottomUpClickHandler(obj) {
    const { clientX, clientY } = obj;
    const target = this._getTargetChild(clientX, clientY);
    const precision = this.stage.getRenderPrecision() / this.stage.getOption("devicePixelRatio");
    let child = target;
    while (child !== null) {
      if (child && child["_handleClick"]) {
        const { px, py } = child.core._worldContext;
        const cx = px * precision;
        const cy = py * precision;
        const localCoords = {
          x: clientX - cx,
          y: clientY - cy
        };
        const returnValue = child._handleClick(target, localCoords);
        if (returnValue !== false) {
          break;
        }
      }
      child = child.parent;
    }
  }
  _receiveHover(e) {
    const obj = e;
    const { clientX, clientY } = obj;
    if (clientX <= this.stage.w && clientY <= this.stage.h) {
      this.stage.application.fireBottomUpHoverHandler(obj);
    }
  }
  fireBottomUpHoverHandler(obj) {
    const { clientX, clientY } = obj;
    const target = this._getTargetChild(clientX, clientY);
    if (target !== this.__hoveredChild) {
      let hoveredBranch = /* @__PURE__ */ new Set();
      let newHoveredBranch = /* @__PURE__ */ new Set();
      if (target) {
        newHoveredBranch = new Set(target.getAncestors());
      }
      if (this.__hoveredChild) {
        hoveredBranch = new Set(this.__hoveredChild.getAncestors());
        for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {
          const c = Component.getComponent(elem);
          if (c["_handleUnhover"]) {
            c._handleUnhover(elem);
          }
          if (elem.parent && elem.parent.cursor) {
            this.stage.getCanvas().style.cursor = elem.parent.cursor;
          }
        }
      }
      this.__hoveredChild = target;
      const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e));
      for (const elem of diffBranch) {
        const c = Component.getComponent(elem);
        if (c["_handleHover"]) {
          c._handleHover(elem);
        }
      }
      const lastElement = diffBranch[0];
      if (lastElement && lastElement.cursor) {
        this.stage.getCanvas().style.cursor = lastElement.cursor;
      }
      if (diffBranch.length === 0 && target) {
        const c = Component.getComponent(target);
        if (c["_handleHover"]) {
          c._handleHover(target);
        }
      }
    }
  }
  _getTargetChild(clientX, clientY) {
    let children = this.stage.application.children;
    let affected = this._findChildren([], children);
    let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);
    hoverableChildren.sort((a, b) => {
      if (a.zIndex > b.zIndex) {
        return 1;
      } else if (a.zIndex < b.zIndex) {
        return -1;
      } else {
        return a.id > b.id ? 1 : -1;
      }
    });
    if (hoverableChildren.length) {
      return hoverableChildren.slice(-1)[0];
    } else {
      return null;
    }
  }
  _findChildren(bucket, children) {
    let n = children.length;
    while (n--) {
      const child = children[n];
      if (child.__active && child.collision) {
        if (child.collision === true) {
          bucket.push(child);
        }
        if (child.hasChildren()) {
          this._findChildren(bucket, child.children);
        }
      }
    }
    return bucket;
  }
  _withinClickableRange(affectedChildren, cursorX, cursorY) {
    let n = affectedChildren.length;
    const candidates = [];
    while (n--) {
      const child = affectedChildren[n];
      const precision = this.stage.getRenderPrecision() / this.stage.getOption("devicePixelRatio");
      const ctx = child.core._worldContext;
      const cx = ctx.px * precision;
      const cy = ctx.py * precision;
      const cw = child.finalW * ctx.ta * precision;
      const ch = child.finalH * ctx.td * precision;
      if (cx > this.stage.w || cy > this.stage.h) {
        continue;
      }
      if (child.parent.core._scissor) {
        const scissor = child.parent.core._scissor.map((v) => v * precision);
        if (!this._testCollision(cursorX, cursorY, ...scissor))
          continue;
      }
      if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {
        candidates.push(child);
      }
    }
    return candidates;
  }
  _testCollision(px, py, cx, cy, cw, ch) {
    if (px >= cx && px <= cx + cw && py >= cy && py <= cy + ch) {
      return true;
    }
    return false;
  }
  destroy() {
    if (!this._destroyed) {
      this._destroy();
      this.stage.destroy();
      this._destroyed = true;
    }
  }
  _destroy() {
    this.stage.setApplication(void 0);
    this._updateAttachedFlag();
    this._updateEnabledFlag();
    if (this.__keypressTimers.size) {
      for (const timer of this.__keypressTimers.values()) {
        clearTimeout(timer);
      }
      this.__keypressTimers.clear();
    }
  }
  getCanvas() {
    return this.stage.getCanvas();
  }
}
class StaticCanvasTexture extends Texture {
  constructor(stage) {
    super(stage);
    this._factory = void 0;
    this._lookupId = void 0;
  }
  set content({ factory, lookupId = void 0 }) {
    this._factory = factory;
    this._lookupId = lookupId;
    this._changed();
  }
  _getIsValid() {
    return !!this._factory;
  }
  _getLookupId() {
    return this._lookupId;
  }
  _getSourceLoader() {
    const f = this._factory;
    return (cb) => {
      return f((err, canvas) => {
        if (err) {
          return cb(err);
        }
        cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));
      }, this.stage);
    };
  }
}
class Tools {
  static getCanvasTexture(canvasFactory, lookupId) {
    return { type: StaticCanvasTexture, content: { factory: canvasFactory, lookupId } };
  }
  static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {
    if (!Array.isArray(radius)) {
      radius = [radius, radius, radius, radius];
    }
    let factory = (cb, stage) => {
      if (Utils$1.isSpark) {
        stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);
      } else {
        cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));
      }
    };
    let id = "rect" + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(",");
    return Tools.getCanvasTexture(factory, id);
  }
  static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {
    if (fill === void 0)
      fill = true;
    if (strokeWidth === void 0)
      strokeWidth = 0;
    let canvas = stage.platform.getDrawingCanvas();
    let ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    canvas.width = w + strokeWidth + 2;
    canvas.height = h + strokeWidth + 2;
    ctx.beginPath();
    let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;
    ctx.moveTo(x + radius[0], y);
    ctx.lineTo(x + w - radius[1], y);
    ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);
    ctx.lineTo(x + w, y + h - radius[2]);
    ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);
    ctx.lineTo(x + radius[3], y + h);
    ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);
    ctx.lineTo(x, y + radius[0]);
    ctx.arcTo(x, y, x + radius[0], y, radius[0]);
    ctx.closePath();
    if (fill) {
      if (Utils$1.isNumber(fillColor)) {
        ctx.fillStyle = StageUtils.getRgbaString(fillColor);
      } else {
        ctx.fillStyle = "white";
      }
      ctx.fill();
    }
    if (strokeWidth) {
      if (Utils$1.isNumber(strokeColor)) {
        ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);
      } else {
        ctx.strokeStyle = "white";
      }
      ctx.lineWidth = strokeWidth;
      ctx.stroke();
    }
    return canvas;
  }
  static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {
    if (!Array.isArray(radius)) {
      radius = [radius, radius, radius, radius];
    }
    let factory = (cb, stage) => {
      if (Utils$1.isSpark) {
        stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);
      } else {
        cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));
      }
    };
    let id = "shadow" + [w, h, blur, margin].concat(radius).join(",");
    return Tools.getCanvasTexture(factory, id);
  }
  static createShadowRect(stage, w, h, radius, blur, margin) {
    let canvas = stage.platform.getDrawingCanvas();
    let ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    canvas.width = w + margin * 2;
    canvas.height = h + margin * 2;
    ctx.globalAlpha = 0.01;
    ctx.fillRect(0, 0, 0.01, 0.01);
    ctx.globalAlpha = 1;
    ctx.shadowColor = StageUtils.getRgbaString(4294967295);
    ctx.fillStyle = StageUtils.getRgbaString(4294967295);
    ctx.shadowBlur = blur;
    ctx.shadowOffsetX = w + 10 + margin;
    ctx.shadowOffsetY = margin;
    ctx.beginPath();
    const x = -(w + 10);
    const y = 0;
    ctx.moveTo(x + radius[0], y);
    ctx.lineTo(x + w - radius[1], y);
    ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);
    ctx.lineTo(x + w, y + h - radius[2]);
    ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);
    ctx.lineTo(x + radius[3], y + h);
    ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);
    ctx.lineTo(x, y + radius[0]);
    ctx.arcTo(x, y, x + radius[0], y, radius[0]);
    ctx.closePath();
    ctx.fill();
    return canvas;
  }
  static getSvgTexture(url, w, h) {
    let factory = (cb, stage) => {
      if (Utils$1.isSpark) {
        stage.platform.createSvg(cb, stage, url, w, h);
      } else {
        this.createSvg(cb, stage, url, w, h);
      }
    };
    let id = "svg" + [w, h, url].join(",");
    return Tools.getCanvasTexture(factory, id);
  }
  static createSvg(cb, stage, url, w, h) {
    let canvas = stage.platform.getDrawingCanvas();
    let ctx = canvas.getContext("2d");
    ctx.imageSmoothingEnabled = true;
    let img = new Image();
    img.onload = () => {
      canvas.width = w;
      canvas.height = h;
      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
      cb(null, canvas);
    };
    img.onError = (err) => {
      cb(err);
    };
    if (!Utils$1.isPS4) {
      img.crossOrigin = "Anonymous";
    }
    img.src = url;
  }
}
class ObjMerger {
  static isMf(f) {
    return Utils$1.isFunction(f) && f.__mf;
  }
  static mf(f) {
    f.__mf = true;
    return f;
  }
  static merge(a, b) {
    const aks = Object.keys(a);
    const bks = Object.keys(b);
    if (!bks.length) {
      return a;
    }
    const ai = {};
    const bi = {};
    for (let i = 0, n = bks.length; i < n; i++) {
      const key = bks[i];
      ai[key] = -1;
      bi[key] = i;
    }
    for (let i = 0, n = aks.length; i < n; i++) {
      const key = aks[i];
      ai[key] = i;
      if (bi[key] === void 0) {
        bi[key] = -1;
      }
    }
    const aksl = aks.length;
    const result = {};
    for (let i = 0, n = bks.length; i < n; i++) {
      const key = bks[i];
      const aIndex = ai[key];
      let curIndex2 = aIndex;
      while (--curIndex2 >= 0) {
        const akey = aks[curIndex2];
        if (bi[akey] !== -1) {
          break;
        }
      }
      while (++curIndex2 < aIndex) {
        const akey = aks[curIndex2];
        result[akey] = a[akey];
      }
      const bv = b[key];
      const av = a[key];
      let r;
      if (this.isMf(bv)) {
        r = bv(av);
      } else {
        if (!Utils$1.isObjectLiteral(av) || !Utils$1.isObjectLiteral(bv)) {
          r = bv;
        } else {
          r = ObjMerger.merge(av, bv);
        }
      }
      if (r !== void 0) {
        result[key] = r;
      }
    }
    let curIndex = aksl;
    while (--curIndex >= 0) {
      const akey = aks[curIndex];
      if (bi[akey] !== -1) {
        break;
      }
    }
    while (++curIndex < aksl) {
      const akey = aks[curIndex];
      result[akey] = a[akey];
    }
    return result;
  }
}
class ObjectListProxy extends ObjectList {
  constructor(target) {
    super();
    this._target = target;
  }
  onAdd(item, index) {
    this._target.addAt(item, index);
  }
  onRemove(item, index) {
    this._target.removeAt(index);
  }
  onSync(removed, added, order) {
    this._target._setByArray(order);
  }
  onSet(item, index) {
    this._target.setAt(item, index);
  }
  onMove(item, fromIndex, toIndex) {
    this._target.setAt(item, toIndex);
  }
  createItem(object) {
    return this._target.createItem(object);
  }
  isItem(object) {
    return this._target.isItem(object);
  }
}
class ObjectListWrapper extends ObjectListProxy {
  constructor(target, wrap) {
    super(target);
    this._wrap = wrap;
  }
  wrap(item) {
    let wrapper = this._wrap(item);
    item._wrapper = wrapper;
    return wrapper;
  }
  onAdd(item, index) {
    item = this.wrap(item);
    super.onAdd(item, index);
  }
  onRemove(item, index) {
    super.onRemove(item, index);
  }
  onSync(removed, added, order) {
    added.forEach((a) => this.wrap(a));
    order = order.map((a) => a._wrapper);
    super.onSync(removed, added, order);
  }
  onSet(item, index) {
    item = this.wrap(item);
    super.onSet(item, index);
  }
  onMove(item, fromIndex, toIndex) {
    super.onMove(item, fromIndex, toIndex);
  }
}
class NoiseTexture extends Texture {
  _getLookupId() {
    return "__noise";
  }
  _getSourceLoader() {
    const gl = this.stage.gl;
    return function(cb) {
      const noise = new Uint8Array(128 * 128 * 4);
      for (let i = 0; i < 128 * 128 * 4; i += 4) {
        const v = Math.floor(Math.random() * 256);
        noise[i] = v;
        noise[i + 1] = v;
        noise[i + 2] = v;
        noise[i + 3] = 255;
      }
      const texParams = {};
      if (gl) {
        texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;
        texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;
        texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;
        texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;
      }
      cb(null, { source: noise, w: 128, h: 128, texParams });
    };
  }
}
class HtmlTexture extends Texture {
  constructor(stage) {
    super(stage);
    this._htmlElement = void 0;
    this._scale = 1;
  }
  set htmlElement(v) {
    this._htmlElement = v;
    this._changed();
  }
  get htmlElement() {
    return this._htmlElement;
  }
  set scale(v) {
    this._scale = v;
    this._changed();
  }
  get scale() {
    return this._scale;
  }
  set html(v) {
    if (!v) {
      this.htmlElement = void 0;
    } else {
      const d = document.createElement("div");
      d.innerHTML = "<div>" + v + "</div>";
      this.htmlElement = d.firstElementChild;
    }
  }
  get html() {
    return this._htmlElement.innerHTML;
  }
  _getIsValid() {
    return this.htmlElement;
  }
  _getLookupId() {
    return this._scale + ":" + this._htmlElement.innerHTML;
  }
  _getSourceLoader() {
    const htmlElement = this._htmlElement;
    const scale = this._scale;
    return function(cb) {
      if (!window.html2canvas) {
        return cb(new Error("Please include html2canvas (https://html2canvas.hertzen.com/)"));
      }
      const area = HtmlTexture.getPreloadArea();
      area.appendChild(htmlElement);
      html2canvas(htmlElement, { backgroundColor: null, scale }).then(function(canvas) {
        area.removeChild(htmlElement);
        if (canvas.height === 0) {
          return cb(new Error("Canvas height is 0"));
        }
        cb(null, { source: canvas, width: canvas.width, height: canvas.height });
      }).catch((e) => {
        console.error("[Lightning]", e);
      });
    };
  }
  static getPreloadArea() {
    if (!this._preloadArea) {
      this._preloadArea = document.createElement("div");
      if (this._preloadArea.attachShadow) {
        this._preloadArea.attachShadow({ mode: "closed" });
      }
      this._preloadArea.style.opacity = 0;
      this._preloadArea.style.pointerEvents = "none";
      this._preloadArea.style.position = "fixed";
      this._preloadArea.style.display = "block";
      this._preloadArea.style.top = "100vh";
      this._preloadArea.style.overflow = "hidden";
      document.body.appendChild(this._preloadArea);
    }
    return this._preloadArea;
  }
}
class StaticTexture extends Texture {
  constructor(stage, options) {
    super(stage);
    this._options = options;
  }
  set options(v) {
    if (this._options !== v) {
      this._options = v;
      this._changed();
    }
  }
  get options() {
    return this._options;
  }
  _getIsValid() {
    return !!this._options;
  }
  _getSourceLoader() {
    return (cb) => {
      cb(null, this._options);
    };
  }
}
class ListComponent extends Component {
  constructor(stage) {
    super(stage);
    this._wrapper = super._children.a({});
    this._reloadVisibleElements = false;
    this._visibleItems = /* @__PURE__ */ new Set();
    this._index = 0;
    this._started = false;
    this._scrollTransitionSettings = this.stage.transitions.createSettings({});
    this._itemSize = 100;
    this._viewportScrollOffset = 0;
    this._itemScrollOffset = 0;
    this._roll = false;
    this._rollMin = 0;
    this._rollMax = 0;
    this._progressAnimation = null;
    this._invertDirection = false;
    this._horizontal = true;
    this.itemList = new ListItems(this);
  }
  _allowChildrenAccess() {
    return false;
  }
  get items() {
    return this.itemList.get();
  }
  set items(children) {
    this.itemList.patch(children);
  }
  start() {
    this._wrapper.transition(this.property, this._scrollTransitionSettings);
    this._scrollTransition = this._wrapper.transition(this.property);
    this._scrollTransition.on("progress", (p) => this.update());
    this.setIndex(0, true, true);
    this._started = true;
    this.update();
  }
  setIndex(index, immediate = false, closest = false) {
    let nElements = this.length;
    if (!nElements)
      return;
    this.emit("unfocus", this.getElement(this.realIndex), this._index, this.realIndex);
    if (closest) {
      let offset = Utils$1.getModuloIndex(index, nElements);
      let o = Utils$1.getModuloIndex(this.index, nElements);
      let diff = offset - o;
      if (diff > 0.5 * nElements) {
        diff -= nElements;
      } else if (diff < -0.5 * nElements) {
        diff += nElements;
      }
      this._index += diff;
    } else {
      this._index = index;
    }
    if (this._roll || this.viewportSize > this._itemSize * nElements) {
      this._index = Utils$1.getModuloIndex(this._index, nElements);
    }
    let direction = this._horizontal ^ this._invertDirection ? -1 : 1;
    let value = direction * this._index * this._itemSize;
    if (this._roll) {
      let min, max, scrollDelta;
      if (direction == 1) {
        max = (nElements - 1) * this._itemSize;
        scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;
        max -= scrollDelta;
        min = this.viewportSize - (this._itemSize + scrollDelta);
        if (this._rollMin)
          min -= this._rollMin;
        if (this._rollMax)
          max += this._rollMax;
        value = Math.max(Math.min(value, max), min);
      } else {
        max = nElements * this._itemSize - this.viewportSize;
        scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;
        max += scrollDelta;
        let min2 = scrollDelta;
        if (this._rollMin)
          min2 -= this._rollMin;
        if (this._rollMax)
          max += this._rollMax;
        value = Math.min(Math.max(-max, value), -min2);
      }
    }
    this._scrollTransition.start(value);
    if (immediate) {
      this._scrollTransition.finish();
    }
    this.emit("focus", this.getElement(this.realIndex), this._index, this.realIndex);
  }
  getAxisPosition() {
    let target = -this._scrollTransition._targetValue;
    let direction = this._horizontal ^ this._invertDirection ? -1 : 1;
    let value = -direction * this._index * this._itemSize;
    return this._viewportScrollOffset * this.viewportSize + (value - target);
  }
  update() {
    if (!this._started)
      return;
    let nElements = this.length;
    if (!nElements)
      return;
    let direction = this._horizontal ^ this._invertDirection ? -1 : 1;
    let v = this._horizontal ? this._wrapper.x : this._wrapper.y;
    let viewportSize = this.viewportSize;
    let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;
    v += scrollDelta;
    let s, e, ps, pe;
    if (direction == -1) {
      s = Math.floor(-v / this._itemSize);
      ps = 1 - (-v / this._itemSize - s);
      e = Math.floor((viewportSize - v) / this._itemSize);
      pe = (viewportSize - v) / this._itemSize - e;
    } else {
      s = Math.ceil(v / this._itemSize);
      ps = 1 + v / this._itemSize - s;
      e = Math.ceil((v - viewportSize) / this._itemSize);
      pe = e - (v - viewportSize) / this._itemSize;
    }
    if (this._roll || viewportSize > this._itemSize * nElements) {
      if (e >= nElements) {
        e = nElements - 1;
        pe = 1;
      }
      if (s >= nElements) {
        s = nElements - 1;
        ps = 1;
      }
      if (e <= -1) {
        e = 0;
        pe = 1;
      }
      if (s <= -1) {
        s = 0;
        ps = 1;
      }
    }
    let offset = -direction * s * this._itemSize;
    let item;
    for (let index = s; direction == -1 ? index <= e : index >= e; direction == -1 ? index++ : index--) {
      let realIndex = Utils$1.getModuloIndex(index, nElements);
      let element = this.getElement(realIndex);
      item = element.parent;
      this._visibleItems.delete(item);
      if (this._horizontal) {
        item.x = offset + scrollDelta;
      } else {
        item.y = offset + scrollDelta;
      }
      let wasVisible = item.visible;
      item.visible = true;
      if (!wasVisible || this._reloadVisibleElements) {
        this.emit("visible", index, realIndex);
      }
      if (this._progressAnimation) {
        let p = 1;
        if (index == s) {
          p = ps;
        } else if (index == e) {
          p = pe;
        }
        this._progressAnimation.apply(element, p);
      }
      offset += this._itemSize;
    }
    let self = this;
    this._visibleItems.forEach(function(invisibleItem) {
      invisibleItem.visible = false;
      self._visibleItems.delete(invisibleItem);
    });
    for (let index = s; direction == -1 ? index <= e : index >= e; direction == -1 ? index++ : index--) {
      let realIndex = Utils$1.getModuloIndex(index, nElements);
      this._visibleItems.add(this.getWrapper(realIndex));
    }
    this._reloadVisibleElements = false;
  }
  setPrevious() {
    this.setIndex(this._index - 1);
  }
  setNext() {
    this.setIndex(this._index + 1);
  }
  getWrapper(index) {
    return this._wrapper.children[index];
  }
  getElement(index) {
    let e = this._wrapper.children[index];
    return e ? e.children[0] : null;
  }
  reload() {
    this._reloadVisibleElements = true;
    this.update();
  }
  get element() {
    let e = this._wrapper.children[this.realIndex];
    return e ? e.children[0] : null;
  }
  get length() {
    return this._wrapper.children.length;
  }
  get property() {
    return this._horizontal ? "x" : "y";
  }
  get viewportSize() {
    return this._horizontal ? this.w : this.h;
  }
  get index() {
    return this._index;
  }
  get realIndex() {
    return Utils$1.getModuloIndex(this._index, this.length);
  }
  get itemSize() {
    return this._itemSize;
  }
  set itemSize(v) {
    this._itemSize = v;
    this.update();
  }
  get viewportScrollOffset() {
    return this._viewportScrollOffset;
  }
  set viewportScrollOffset(v) {
    this._viewportScrollOffset = v;
    this.update();
  }
  get itemScrollOffset() {
    return this._itemScrollOffset;
  }
  set itemScrollOffset(v) {
    this._itemScrollOffset = v;
    this.update();
  }
  get scrollTransitionSettings() {
    return this._scrollTransitionSettings;
  }
  set scrollTransitionSettings(v) {
    this._scrollTransitionSettings.patch(v);
  }
  set scrollTransition(v) {
    this._scrollTransitionSettings.patch(v);
  }
  get scrollTransition() {
    return this._scrollTransition;
  }
  get progressAnimation() {
    return this._progressAnimation;
  }
  set progressAnimation(v) {
    if (Utils$1.isObjectLiteral(v)) {
      this._progressAnimation = this.stage.animations.createSettings(v);
    } else {
      this._progressAnimation = v;
    }
    this.update();
  }
  get roll() {
    return this._roll;
  }
  set roll(v) {
    this._roll = v;
    this.update();
  }
  get rollMin() {
    return this._rollMin;
  }
  set rollMin(v) {
    this._rollMin = v;
    this.update();
  }
  get rollMax() {
    return this._rollMax;
  }
  set rollMax(v) {
    this._rollMax = v;
    this.update();
  }
  get invertDirection() {
    return this._invertDirection;
  }
  set invertDirection(v) {
    if (!this._started) {
      this._invertDirection = v;
    }
  }
  get horizontal() {
    return this._horizontal;
  }
  set horizontal(v) {
    if (v !== this._horizontal) {
      if (!this._started) {
        this._horizontal = v;
      }
    }
  }
}
class ListItems extends ObjectListWrapper {
  constructor(list) {
    let wrap = (item) => {
      let parent = item.stage.createElement();
      parent.add(item);
      parent.visible = false;
      return parent;
    };
    super(list._wrapper._children, wrap);
    this.list = list;
  }
  onAdd(item, index) {
    super.onAdd(item, index);
    this.checkStarted(index);
  }
  checkStarted(index) {
    this.list._reloadVisibleElements = true;
    if (!this.list._started) {
      this.list.start();
    } else {
      if (this.list.length === 1) {
        this.list.setIndex(0, true, true);
      } else {
        if (this.list._index >= this.list.length) {
          this.list.setIndex(0);
        }
      }
      this.list.update();
    }
  }
  onRemove(item, index) {
    super.onRemove(item, index);
    let ri = this.list.realIndex;
    if (ri === index) {
      if (ri === this.list.length) {
        ri--;
      }
      if (ri >= 0) {
        this.list.setIndex(ri);
      }
    } else if (ri > index) {
      this.list.setIndex(ri - 1);
    }
    this.list._reloadVisibleElements = true;
  }
  onSet(item, index) {
    super.onSet(item, index);
    this.checkStarted(index);
  }
  onSync(removed, added, order) {
    super.onSync(removed, added, order);
    this.checkStarted(0);
  }
  get _signalProxy() {
    return true;
  }
}
class LinearBlurShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._direction = new Float32Array([1, 0]);
    this._kernelRadius = 1;
  }
  get x() {
    return this._direction[0];
  }
  set x(v) {
    this._direction[0] = v;
    this.redraw();
  }
  get y() {
    return this._direction[1];
  }
  set y(v) {
    this._direction[1] = v;
    this.redraw();
  }
  get kernelRadius() {
    return this._kernelRadius;
  }
  set kernelRadius(v) {
    this._kernelRadius = v;
    this.redraw();
  }
  useDefault() {
    return this._kernelRadius === 0;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("direction", this._direction, this.gl.uniform2fv);
    this._setUniform("kernelRadius", this._kernelRadius, this.gl.uniform1i);
    const w = operation.getRenderWidth();
    const h = operation.getRenderHeight();
    this._setUniform("resolution", new Float32Array([w, h]), this.gl.uniform2fv);
  }
}
LinearBlurShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    uniform vec2 resolution;
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform vec2 direction;
    uniform int kernelRadius;
    
    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
        vec4 color = vec4(0.0);
        vec2 off1 = vec2(1.3333333333333333) * direction;
        color += texture2D(image, uv) * 0.29411764705882354;
        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;
        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;
        return color; 
    }
    
    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
        vec4 color = vec4(0.0);
        vec2 off1 = vec2(1.3846153846) * direction;
        vec2 off2 = vec2(3.2307692308) * direction;
        color += texture2D(image, uv) * 0.2270270270;
        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;
        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;
        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;
        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;
        return color;
    }
    
    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
        vec4 color = vec4(0.0);
        vec2 off1 = vec2(1.411764705882353) * direction;
        vec2 off2 = vec2(3.2941176470588234) * direction;
        vec2 off3 = vec2(5.176470588235294) * direction;
        color += texture2D(image, uv) * 0.1964825501511404;
        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;
        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;
        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;
        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;
        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;
        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;
        return color;
    }    

    void main(void){
        if (kernelRadius == 1) {
            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;
        } else if (kernelRadius == 2) {
            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;
        } else {
            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;
        }
    }
`;
class BoxBlurShader extends DefaultShader$1 {
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const dx = 1 / operation.getTextureWidth(0);
    const dy = 1 / operation.getTextureHeight(0);
    this._setUniform("stepTextureCoord", new Float32Array([dx, dy]), this.gl.uniform2fv);
  }
}
BoxBlurShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    uniform vec2 stepTextureCoord;
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec4 vColor;
    varying vec2 vTextureCoordUl;
    varying vec2 vTextureCoordUr;
    varying vec2 vTextureCoordBl;
    varying vec2 vTextureCoordBr;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoordUl = aTextureCoord - stepTextureCoord;
        vTextureCoordBr = aTextureCoord + stepTextureCoord;
        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);
        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
BoxBlurShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoordUl;
    varying vec2 vTextureCoordUr;
    varying vec2 vTextureCoordBl;
    varying vec2 vTextureCoordBr;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    void main(void){
        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));
        gl_FragColor = color * vColor;
    }
`;
class BlurShader extends DefaultShader2 {
  constructor(context) {
    super(context);
    this._kernelRadius = 1;
  }
  get kernelRadius() {
    return this._kernelRadius;
  }
  set kernelRadius(v) {
    this._kernelRadius = v;
    this.redraw();
  }
  useDefault() {
    return this._amount === 0;
  }
  _beforeDrawEl({ target }) {
    target.ctx.filter = "blur(" + this._kernelRadius + "px)";
  }
  _afterDrawEl({ target }) {
    target.ctx.filter = "none";
  }
}
class FastBlurComponent extends Component {
  static _template() {
    return {};
  }
  get wrap() {
    return this.tag("Wrap");
  }
  set content(v) {
    return this.wrap.content = v;
  }
  get content() {
    return this.wrap.content;
  }
  set padding(v) {
    this.wrap._paddingX = v;
    this.wrap._paddingY = v;
    this.wrap._updateBlurSize();
  }
  set paddingX(v) {
    this.wrap._paddingX = v;
    this.wrap._updateBlurSize();
  }
  set paddingY(v) {
    this.wrap._paddingY = v;
    this.wrap._updateBlurSize();
  }
  set amount(v) {
    return this.wrap.amount = v;
  }
  get amount() {
    return this.wrap.amount;
  }
  _onResize() {
    this.wrap.w = this.renderWidth;
    this.wrap.h = this.renderHeight;
  }
  get _signalProxy() {
    return true;
  }
  _build() {
    this.patch({
      Wrap: { type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent }
    });
  }
}
class C2dFastBlurComponent extends Component {
  static _template() {
    return {
      forceZIndexContext: true,
      rtt: true,
      Textwrap: { shader: { type: BlurShader }, Content: {} }
    };
  }
  constructor(stage) {
    super(stage);
    this._textwrap = this.sel("Textwrap");
    this._wrapper = this.sel("Textwrap>Content");
    this._amount = 0;
    this._paddingX = 0;
    this._paddingY = 0;
  }
  static getSpline() {
    if (!this._multiSpline) {
      this._multiSpline = new MultiSpline();
      this._multiSpline.parse(false, { 0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39 });
    }
    return this._multiSpline;
  }
  get content() {
    return this.sel("Textwrap>Content");
  }
  set content(v) {
    this.sel("Textwrap>Content").patch(v, true);
  }
  set padding(v) {
    this._paddingX = v;
    this._paddingY = v;
    this._updateBlurSize();
  }
  set paddingX(v) {
    this._paddingX = v;
    this._updateBlurSize();
  }
  set paddingY(v) {
    this._paddingY = v;
    this._updateBlurSize();
  }
  _updateBlurSize() {
    let w = this.renderWidth;
    let h = this.renderHeight;
    let paddingX = this._paddingX;
    let paddingY = this._paddingY;
    this._wrapper.x = paddingX;
    this._textwrap.x = -paddingX;
    this._wrapper.y = paddingY;
    this._textwrap.y = -paddingY;
    this._textwrap.w = w + paddingX * 2;
    this._textwrap.h = h + paddingY * 2;
  }
  get amount() {
    return this._amount;
  }
  set amount(v) {
    this._amount = v;
    this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);
  }
  static _amountToKernelRadius(v) {
    return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));
  }
  get _signalProxy() {
    return true;
  }
}
class WebGLFastBlurComponent extends Component {
  static _template() {
    const onUpdate = function(element, elementCore) {
      if (elementCore._recalc & 2 + 128) {
        const w = elementCore.w;
        const h = elementCore.h;
        let cur = elementCore;
        do {
          cur = cur._children[0];
          cur._element.w = w;
          cur._element.h = h;
        } while (cur._children);
      }
    };
    return {
      Textwrap: { rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {} },
      Layers: {
        L0: { rtt: true, onUpdate, renderOffscreen: true, visible: false, Content: { shader: { type: BoxBlurShader } } },
        L1: { rtt: true, onUpdate, renderOffscreen: true, visible: false, Content: { shader: { type: BoxBlurShader } } },
        L2: { rtt: true, onUpdate, renderOffscreen: true, visible: false, Content: { shader: { type: BoxBlurShader } } },
        L3: { rtt: true, onUpdate, renderOffscreen: true, visible: false, Content: { shader: { type: BoxBlurShader } } }
      },
      Result: { shader: { type: FastBlurOutputShader }, visible: false }
    };
  }
  get _signalProxy() {
    return true;
  }
  constructor(stage) {
    super(stage);
    this._textwrap = this.sel("Textwrap");
    this._wrapper = this.sel("Textwrap>Content");
    this._layers = this.sel("Layers");
    this._output = this.sel("Result");
    this._amount = 0;
    this._paddingX = 0;
    this._paddingY = 0;
  }
  _buildLayers() {
    const filterShaderSettings = [{ x: 1, y: 0, kernelRadius: 1 }, { x: 0, y: 1, kernelRadius: 1 }, { x: 1.5, y: 0, kernelRadius: 1 }, { x: 0, y: 1.5, kernelRadius: 1 }];
    const filterShaders = filterShaderSettings.map((s) => {
      const shader = Shader.create(this.stage, Object.assign({ type: LinearBlurShader }, s));
      return shader;
    });
    this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);
    this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);
    this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);
    this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);
  }
  _setLayerTexture(element, texture, steps) {
    if (!steps.length) {
      element.texture = texture;
    } else {
      const step = steps.pop();
      const child = element.stage.c({ rtt: true, shader: step });
      this._setLayerTexture(child, texture, steps);
      element.childList.add(child);
    }
    return element;
  }
  get content() {
    return this.sel("Textwrap>Content");
  }
  set content(v) {
    this.sel("Textwrap>Content").patch(v, true);
  }
  set padding(v) {
    this._paddingX = v;
    this._paddingY = v;
    this._updateBlurSize();
  }
  set paddingX(v) {
    this._paddingX = v;
    this._updateBlurSize();
  }
  set paddingY(v) {
    this._paddingY = v;
    this._updateBlurSize();
  }
  getLayer(i) {
    return this._layers.sel("L" + i);
  }
  getLayerContents(i) {
    return this.getLayer(i).sel("Content");
  }
  _onResize() {
    this._updateBlurSize();
  }
  _updateBlurSize() {
    let w = this.renderWidth;
    let h = this.renderHeight;
    let paddingX = this._paddingX;
    let paddingY = this._paddingY;
    let fw = w + paddingX * 2;
    let fh = h + paddingY * 2;
    this._textwrap.w = fw;
    this._wrapper.x = paddingX;
    this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;
    this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;
    this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;
    this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;
    this._output.x = -paddingX;
    this._textwrap.x = -paddingX;
    this._output.w = fw;
    this._textwrap.h = fh;
    this._wrapper.y = paddingY;
    this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;
    this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;
    this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;
    this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;
    this._output.y = -paddingY;
    this._textwrap.y = -paddingY;
    this._output.h = fh;
    this.w = w;
    this.h = h;
  }
  set amount(v) {
    this._amount = v;
    this._update();
  }
  get amount() {
    return this._amount;
  }
  _update() {
    let v = Math.min(4, Math.max(0, this._amount));
    if (v === 0) {
      this._textwrap.renderToTexture = false;
      this._output.shader.otherTextureSource = null;
      this._output.visible = false;
    } else {
      this._textwrap.renderToTexture = true;
      this._output.visible = true;
      this.getLayer(0).visible = v > 0;
      this.getLayer(1).visible = v > 1;
      this.getLayer(2).visible = v > 2;
      this.getLayer(3).visible = v > 3;
      if (v <= 1) {
        this._output.texture = this._textwrap.getTexture();
        this._output.shader.otherTextureSource = this.getLayer(0).getTexture();
        this._output.shader.a = v;
      } else if (v <= 2) {
        this._output.texture = this.getLayer(0).getTexture();
        this._output.shader.otherTextureSource = this.getLayer(1).getTexture();
        this._output.shader.a = v - 1;
      } else if (v <= 3) {
        this._output.texture = this.getLayer(1).getTexture();
        this._output.shader.otherTextureSource = this.getLayer(2).getTexture();
        this._output.shader.a = v - 2;
      } else if (v <= 4) {
        this._output.texture = this.getLayer(2).getTexture();
        this._output.shader.otherTextureSource = this.getLayer(3).getTexture();
        this._output.shader.a = v - 3;
      }
    }
  }
  set shader(s) {
    super.shader = s;
    if (!this.renderToTexture) {
      console.warn("[Lightning] Please enable renderToTexture to use with a shader.");
    }
  }
  _firstActive() {
    this._buildLayers();
  }
}
class FastBlurOutputShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._a = 0;
    this._otherTextureSource = null;
  }
  get a() {
    return this._a;
  }
  set a(v) {
    this._a = v;
    this.redraw();
  }
  set otherTextureSource(v) {
    this._otherTextureSource = v;
    this.redraw();
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("a", this._a, this.gl.uniform1f);
    this._setUniform("uSampler2", 1, this.gl.uniform1i);
  }
  beforeDraw(operation) {
    let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;
    let gl = this.gl;
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, glTexture);
    gl.activeTexture(gl.TEXTURE0);
  }
}
FastBlurOutputShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform sampler2D uSampler2;
    uniform float a;
    void main(void){
        if (a == 1.0) {
            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;
        } else {
            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;
        }
    }
`;
class BloomComponent extends Component {
  static _template() {
    const onUpdate = function(element, elementCore) {
      if (elementCore._recalc & 2 + 128) {
        const w = elementCore.w;
        const h = elementCore.h;
        let cur = elementCore;
        do {
          cur = cur._children[0];
          cur._element.w = w;
          cur._element.h = h;
        } while (cur._children);
      }
    };
    return {
      Textwrap: {
        rtt: true,
        forceZIndexContext: true,
        renderOffscreen: true,
        BloomBase: {
          shader: { type: BloomBaseShader },
          Content: {}
        }
      },
      Layers: {
        L0: { rtt: true, onUpdate, scale: 2, pivot: 0, visible: false, Content: { shader: { type: BoxBlurShader } } },
        L1: { rtt: true, onUpdate, scale: 4, pivot: 0, visible: false, Content: { shader: { type: BoxBlurShader } } },
        L2: { rtt: true, onUpdate, scale: 8, pivot: 0, visible: false, Content: { shader: { type: BoxBlurShader } } },
        L3: { rtt: true, onUpdate, scale: 16, pivot: 0, visible: false, Content: { shader: { type: BoxBlurShader } } }
      }
    };
  }
  get _signalProxy() {
    return true;
  }
  constructor(stage) {
    super(stage);
    this._textwrap = this.sel("Textwrap");
    this._wrapper = this.sel("Textwrap.Content");
    this._layers = this.sel("Layers");
    this._amount = 0;
    this._paddingX = 0;
    this._paddingY = 0;
  }
  _build() {
    const filterShaderSettings = [{ x: 1, y: 0, kernelRadius: 3 }, { x: 0, y: 1, kernelRadius: 3 }, { x: 1.5, y: 0, kernelRadius: 3 }, { x: 0, y: 1.5, kernelRadius: 3 }];
    const filterShaders = filterShaderSettings.map((s) => {
      const shader = this.stage.createShader(Object.assign({ type: LinearBlurShader }, s));
      return shader;
    });
    this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);
    this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);
    this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);
    this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);
  }
  _setLayerTexture(element, texture, steps) {
    if (!steps.length) {
      element.texture = texture;
    } else {
      const step = steps.pop();
      const child = element.stage.c({ rtt: true, shader: step });
      this._setLayerTexture(child, texture, steps);
      element.childList.add(child);
    }
    return element;
  }
  get content() {
    return this.sel("Textwrap.Content");
  }
  set content(v) {
    this.sel("Textwrap.Content").patch(v);
  }
  set padding(v) {
    this._paddingX = v;
    this._paddingY = v;
    this._updateBlurSize();
  }
  set paddingX(v) {
    this._paddingX = v;
    this._updateBlurSize();
  }
  set paddingY(v) {
    this._paddingY = v;
    this._updateBlurSize();
  }
  getLayer(i) {
    return this._layers.sel("L" + i);
  }
  getLayerContents(i) {
    return this.getLayer(i).sel("Content");
  }
  _onResize() {
    this._updateBlurSize();
  }
  _updateBlurSize() {
    let w = this.renderWidth;
    let h = this.renderHeight;
    let paddingX = this._paddingX;
    let paddingY = this._paddingY;
    let fw = w + paddingX * 2;
    let fh = h + paddingY * 2;
    this._textwrap.w = fw;
    this._wrapper.x = paddingX;
    this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;
    this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;
    this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;
    this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;
    this._textwrap.x = -paddingX;
    this._textwrap.h = fh;
    this._wrapper.y = paddingY;
    this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;
    this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;
    this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;
    this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;
    this._textwrap.y = -paddingY;
    this.w = w;
    this.h = h;
  }
  set amount(v) {
    this._amount = v;
    this._update();
  }
  get amount() {
    return this._amount;
  }
  _update() {
    let v = Math.min(4, Math.max(0, this._amount));
    if (v > 0) {
      this.getLayer(0).visible = v > 0;
      this.getLayer(1).visible = v > 1;
      this.getLayer(2).visible = v > 2;
      this.getLayer(3).visible = v > 3;
    }
  }
  set shader(s) {
    super.shader = s;
    if (!this.renderToTexture) {
      console.warn("[Lightning] Please enable renderToTexture to use with a shader.");
    }
  }
  _firstActive() {
    this._build();
  }
}
class BloomBaseShader extends DefaultShader$1 {
}
BloomBaseShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    void main(void){
        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;
        float m = max(max(color.r, color.g), color.b);
        float c = max(0.0, (m - 0.80)) * 5.0;
        color = color * c;
        gl_FragColor = color;
    }
`;
class SmoothScaleComponent extends Component {
  static _template() {
    return {
      ContentWrap: {
        renderOffscreen: true,
        forceZIndexContext: true,
        onAfterUpdate: SmoothScaleComponent._updateDimensions,
        Content: {}
      },
      Scale: { visible: false }
    };
  }
  constructor(stage) {
    super(stage);
    this._smoothScale = 1;
    this._iterations = 0;
  }
  get content() {
    return this.tag("Content");
  }
  set content(v) {
    this.tag("Content").patch(v, true);
  }
  get smoothScale() {
    return this._smoothScale;
  }
  set smoothScale(v) {
    if (this._smoothScale !== v) {
      let its = 0;
      while (v < 0.5 && its < 12) {
        its++;
        v = v * 2;
      }
      this.scale = v;
      this._setIterations(its);
      this._smoothScale = v;
    }
  }
  _setIterations(its) {
    if (this._iterations !== its) {
      const scalers = this.sel("Scale").childList;
      const content = this.sel("ContentWrap");
      while (scalers.length < its) {
        const first = scalers.length === 0;
        const texture = first ? content.getTexture() : scalers.last.getTexture();
        scalers.a({ rtt: true, renderOffscreen: true, texture });
      }
      SmoothScaleComponent._updateDimensions(this.tag("ContentWrap"), true);
      const useScalers = its > 0;
      this.patch({
        ContentWrap: { renderToTexture: useScalers },
        Scale: { visible: useScalers }
      });
      for (let i = 0, n = scalers.length; i < n; i++) {
        scalers.getAt(i).patch({
          visible: i < its,
          renderOffscreen: i !== its - 1
        });
      }
      this._iterations = its;
    }
  }
  static _updateDimensions(contentWrap, force) {
    const content = contentWrap.children[0];
    let w = content.renderWidth;
    let h = content.renderHeight;
    if (w !== contentWrap.w || h !== contentWrap.h || force) {
      contentWrap.w = w;
      contentWrap.h = h;
      const scalers = contentWrap.parent.tag("Scale").children;
      for (let i = 0, n = scalers.length; i < n; i++) {
        w = w * 0.5;
        h = h * 0.5;
        scalers[i].w = w;
        scalers[i].h = h;
      }
    }
  }
  get _signalProxy() {
    return true;
  }
}
class BorderComponent extends Component {
  static _template() {
    return {
      Content: {},
      Borders: {
        Top: { rect: true, visible: false, mountY: 1 },
        Right: { rect: true, visible: false },
        Bottom: { rect: true, visible: false },
        Left: { rect: true, visible: false, mountX: 1 }
      }
    };
  }
  get _signalProxy() {
    return true;
  }
  constructor(stage) {
    super(stage);
    this._borderTop = this.tag("Top");
    this._borderRight = this.tag("Right");
    this._borderBottom = this.tag("Bottom");
    this._borderLeft = this.tag("Left");
    this.onAfterUpdate = function(element) {
      const content = element.childList.first;
      let w = element.core.w || content.renderWidth;
      let h = element.core.h || content.renderHeight;
      element._borderTop.w = w;
      element._borderBottom.y = h;
      element._borderBottom.w = w;
      element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;
      element._borderLeft.y = -element._borderTop.h;
      element._borderRight.x = w;
      element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;
      element._borderRight.y = -element._borderTop.h;
    };
    this.borderWidth = 1;
  }
  get content() {
    return this.sel("Content");
  }
  set content(v) {
    this.sel("Content").patch(v, true);
  }
  get borderWidth() {
    return this.borderWidthTop;
  }
  get borderWidthTop() {
    return this._borderTop.h;
  }
  get borderWidthRight() {
    return this._borderRight.w;
  }
  get borderWidthBottom() {
    return this._borderBottom.h;
  }
  get borderWidthLeft() {
    return this._borderLeft.w;
  }
  set borderWidth(v) {
    this.borderWidthTop = v;
    this.borderWidthRight = v;
    this.borderWidthBottom = v;
    this.borderWidthLeft = v;
  }
  set borderWidthTop(v) {
    this._borderTop.h = v;
    this._borderTop.visible = v > 0;
  }
  set borderWidthRight(v) {
    this._borderRight.w = v;
    this._borderRight.visible = v > 0;
  }
  set borderWidthBottom(v) {
    this._borderBottom.h = v;
    this._borderBottom.visible = v > 0;
  }
  set borderWidthLeft(v) {
    this._borderLeft.w = v;
    this._borderLeft.visible = v > 0;
  }
  get colorBorder() {
    return this.colorBorderTop;
  }
  get colorBorderTop() {
    return this._borderTop.color;
  }
  get colorBorderRight() {
    return this._borderRight.color;
  }
  get colorBorderBottom() {
    return this._borderBottom.color;
  }
  get colorBorderLeft() {
    return this._borderLeft.color;
  }
  set colorBorder(v) {
    this.colorBorderTop = v;
    this.colorBorderRight = v;
    this.colorBorderBottom = v;
    this.colorBorderLeft = v;
  }
  set colorBorderTop(v) {
    this._borderTop.color = v;
  }
  set colorBorderRight(v) {
    this._borderRight.color = v;
  }
  set colorBorderBottom(v) {
    this._borderBottom.color = v;
  }
  set colorBorderLeft(v) {
    this._borderLeft.color = v;
  }
  get borderTop() {
    return this._borderTop;
  }
  set borderTop(settings) {
    this.borderTop.patch(settings);
  }
  get borderRight() {
    return this._borderRight;
  }
  set borderRight(settings) {
    this.borderRight.patch(settings);
  }
  get borderBottom() {
    return this._borderBottom;
  }
  set borderBottom(settings) {
    this.borderBottom.patch(settings);
  }
  get borderLeft() {
    return this._borderLeft;
  }
  set borderLeft(settings) {
    this.borderLeft.patch(settings);
  }
  set borders(settings) {
    this.borderTop = settings;
    this.borderLeft = settings;
    this.borderBottom = settings;
    this.borderRight = settings;
  }
}
class WebGLGrayscaleShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._amount = 1;
  }
  static getC2d() {
    return C2dGrayscaleShader;
  }
  set amount(v) {
    this._amount = v;
    this.redraw();
  }
  get amount() {
    return this._amount;
  }
  useDefault() {
    return this._amount === 0;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("amount", this._amount, this.gl.uniform1f);
  }
}
WebGLGrayscaleShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform float amount;
    void main(void){
        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;
        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;
        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);
    }
`;
class C2dGrayscaleShader extends DefaultShader2 {
  constructor(context) {
    super(context);
    this._amount = 1;
  }
  static getWebGL() {
    return WebGLGrayscaleShader;
  }
  set amount(v) {
    this._amount = v;
    this.redraw();
  }
  get amount() {
    return this._amount;
  }
  useDefault() {
    return this._amount === 0;
  }
  _beforeDrawEl({ target }) {
    target.ctx.filter = "grayscale(" + this._amount + ")";
  }
  _afterDrawEl({ target }) {
    target.ctx.filter = "none";
  }
}
class DitheringShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._noiseTexture = new NoiseTexture(ctx.stage);
    this._graining = 1 / 256;
    this._random = false;
  }
  set graining(v) {
    this._graining = v;
    this.redraw();
  }
  set random(v) {
    this._random = v;
    this.redraw();
  }
  setExtraAttribsInBuffer(operation) {
    this._noiseTexture.load();
    let offset = operation.extraAttribsDataByteOffset / 4;
    let floats = operation.quads.floats;
    let length = operation.length;
    for (let i = 0; i < length; i++) {
      let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();
      let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();
      let ulx = 0;
      let uly = 0;
      if (this._random) {
        ulx = Math.random();
        uly = Math.random();
        brx += ulx;
        bry += uly;
        if (Math.random() < 0.5) {
          const t = ulx;
          ulx = brx;
          brx = t;
        }
        if (Math.random() < 0.5) {
          const t = uly;
          uly = bry;
          bry = t;
        }
      }
      floats[offset] = ulx;
      floats[offset + 1] = uly;
      floats[offset + 2] = brx;
      floats[offset + 3] = uly;
      floats[offset + 4] = brx;
      floats[offset + 5] = bry;
      floats[offset + 6] = ulx;
      floats[offset + 7] = bry;
      offset += 8;
    }
  }
  beforeDraw(operation) {
    let gl = this.gl;
    gl.vertexAttribPointer(this._attrib("aNoiseTextureCoord"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));
    let glTexture = this._noiseTexture.source.nativeTexture;
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, glTexture);
    gl.activeTexture(gl.TEXTURE0);
  }
  getExtraAttribBytesPerVertex() {
    return 8;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("uNoiseSampler", 1, this.gl.uniform1i);
    this._setUniform("graining", 2 * this._graining, this.gl.uniform1f);
  }
  enableAttribs() {
    super.enableAttribs();
    let gl = this.gl;
    gl.enableVertexAttribArray(this._attrib("aNoiseTextureCoord"));
  }
  disableAttribs() {
    super.disableAttribs();
    let gl = this.gl;
    gl.disableVertexAttribArray(this._attrib("aNoiseTextureCoord"));
  }
  useDefault() {
    return this._graining === 0;
  }
  afterDraw(operation) {
    if (this._random) {
      this.redraw();
    }
  }
}
DitheringShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec2 aNoiseTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec2 vNoiseTextureCoord;
    varying vec4 vColor;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vNoiseTextureCoord = aNoiseTextureCoord;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
DitheringShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec2 vNoiseTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform sampler2D uNoiseSampler;
    uniform float graining;
    void main(void){
        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);
        vec4 color = texture2D(uSampler, vTextureCoord);
        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);
    }
`;
class CircularPushShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._inputValue = 0;
    this._maxDerivative = 0.01;
    this._normalizedValue = 0;
    this._offset = 0;
    this._amount = 0.1;
    this._aspectRatio = 1;
    this._offsetX = 0;
    this._offsetY = 0;
    this.buckets = 100;
  }
  get aspectRatio() {
    return this._aspectRatio;
  }
  set aspectRatio(v) {
    this._aspectRatio = v;
    this.redraw();
  }
  get offsetX() {
    return this._offsetX;
  }
  set offsetX(v) {
    this._offsetX = v;
    this.redraw();
  }
  get offsetY() {
    return this._offsetY;
  }
  set offsetY(v) {
    this._offsetY = v;
    this.redraw();
  }
  set amount(v) {
    this._amount = v;
    this.redraw();
  }
  get amount() {
    return this._amount;
  }
  set inputValue(v) {
    this._inputValue = v;
  }
  get inputValue() {
    return this._inputValue;
  }
  set maxDerivative(v) {
    this._maxDerivative = v;
  }
  get maxDerivative() {
    return this._maxDerivative;
  }
  set buckets(v) {
    if (v > 100) {
      console.warn("[Lightning] CircularPushShader: supports max 100 buckets");
      v = 100;
    }
    this._buckets = v;
    this._values = new Uint8Array(this._getValues(v));
    this.redraw();
  }
  get buckets() {
    return this._buckets;
  }
  _getValues(n) {
    const v = [];
    for (let i = 0; i < n; i++) {
      v.push(this._inputValue);
    }
    return v;
  }
  progress(o) {
    this._offset += o * this._buckets;
    const full = Math.floor(this._offset);
    this._offset -= full;
    this._shiftBuckets(full);
    this.redraw();
  }
  _shiftBuckets(n) {
    for (let i = this._buckets - 1; i >= 0; i--) {
      const targetIndex = i - n;
      if (targetIndex < 0) {
        this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));
        this._values[i] = 255 * this._normalizedValue;
      } else {
        this._values[i] = this._values[targetIndex];
      }
    }
  }
  set offset(v) {
    this._offset = v;
    this.redraw();
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("aspectRatio", this._aspectRatio, this.gl.uniform1f);
    this._setUniform("offsetX", this._offsetX, this.gl.uniform1f);
    this._setUniform("offsetY", this._offsetY, this.gl.uniform1f);
    this._setUniform("amount", this._amount, this.gl.uniform1f);
    this._setUniform("offset", this._offset, this.gl.uniform1f);
    this._setUniform("buckets", this._buckets, this.gl.uniform1f);
    this._setUniform("uValueSampler", 1, this.gl.uniform1i);
  }
  useDefault() {
    return this._amount === 0;
  }
  beforeDraw(operation) {
    const gl = this.gl;
    gl.activeTexture(gl.TEXTURE1);
    if (!this._valuesTexture) {
      this._valuesTexture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      if (Utils$1.isNode) {
        gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);
      }
      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
    } else {
      gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);
    }
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);
    gl.activeTexture(gl.TEXTURE0);
  }
  cleanup() {
    if (this._valuesTexture) {
      this.gl.deleteTexture(this._valuesTexture);
    }
  }
}
CircularPushShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    uniform float offsetX;
    uniform float offsetY;
    uniform float aspectRatio;
    varying vec2 vTextureCoord;
    varying vec2 vPos;
    varying vec4 vColor;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vPos = vTextureCoord * 2.0 - 1.0;
        vPos.y = vPos.y * aspectRatio;
        vPos.y = vPos.y + offsetY;
        vPos.x = vPos.x + offsetX;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
CircularPushShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    varying vec2 vPos;
    uniform float amount;
    uniform float offset;
    uniform float values[100];
    uniform float buckets;
    uniform sampler2D uSampler;
    uniform sampler2D uValueSampler;
    void main(void){
        float l = length(vPos);
        float m = (l * buckets * 0.678 - offset) / buckets;
        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;
        vec2 unit = vPos / l;
        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;
    }
`;
class InversionShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._amount = 1;
  }
  set amount(v) {
    this._amount = v;
    this.redraw();
  }
  get amount() {
    return this._amount;
  }
  useDefault() {
    return this._amount === 0;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("amount", this._amount, this.gl.uniform1f);
  }
}
InversionShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform float amount;
    void main(void){
        vec4 color = texture2D(uSampler, vTextureCoord);
        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); 
        gl_FragColor = color * vColor;
    }
`;
class OutlineShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._width = 5;
    this._col = 4294967295;
    this._color = [1, 1, 1, 1];
  }
  set width(v) {
    this._width = v;
    this.redraw();
  }
  get color() {
    return this._col;
  }
  set color(v) {
    if (this._col !== v) {
      const col = StageUtils.getRgbaComponentsNormalized(v);
      col[0] = col[0] * col[3];
      col[1] = col[1] * col[3];
      col[2] = col[2] * col[3];
      this._color = col;
      this.redraw();
      this._col = v;
    }
  }
  useDefault() {
    return this._width === 0 || this._col[3] === 0;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    let gl = this.gl;
    this._setUniform("color", new Float32Array(this._color), gl.uniform4fv);
  }
  enableAttribs() {
    super.enableAttribs();
    this.gl.enableVertexAttribArray(this._attrib("aCorner"));
  }
  disableAttribs() {
    super.disableAttribs();
    this.gl.disableVertexAttribArray(this._attrib("aCorner"));
  }
  setExtraAttribsInBuffer(operation) {
    let offset = operation.extraAttribsDataByteOffset / 4;
    let floats = operation.quads.floats;
    let length = operation.length;
    for (let i = 0; i < length; i++) {
      const elementCore = operation.getElementCore(i);
      const ddw = this._width / elementCore.w;
      const dw = ddw / (1 - 2 * ddw);
      const ddh = this._width / elementCore.h;
      const dh = ddh / (1 - 2 * ddh);
      floats[offset] = -dw;
      floats[offset + 1] = -dh;
      floats[offset + 2] = 1 + dw;
      floats[offset + 3] = -dh;
      floats[offset + 4] = 1 + dw;
      floats[offset + 5] = 1 + dh;
      floats[offset + 6] = -dw;
      floats[offset + 7] = 1 + dh;
      offset += 8;
    }
  }
  beforeDraw(operation) {
    let gl = this.gl;
    gl.vertexAttribPointer(this._attrib("aCorner"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));
  }
  getExtraAttribBytesPerVertex() {
    return 8;
  }
}
OutlineShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    attribute vec2 aCorner;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec2 vCorner;
    varying vec4 vColor;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vCorner = aCorner;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
OutlineShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    varying vec2 vCorner;
    uniform vec4 color;
    uniform sampler2D uSampler;
    void main(void){
        vec2 m = min(vCorner, 1.0 - vCorner);
        float value = step(0.0, min(m.x, m.y));
        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);
    }
`;
class PixelateShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._size = new Float32Array([4, 4]);
  }
  get x() {
    return this._size[0];
  }
  set x(v) {
    this._size[0] = v;
    this.redraw();
  }
  get y() {
    return this._size[1];
  }
  set y(v) {
    this._size[1] = v;
    this.redraw();
  }
  get size() {
    return this._size[0];
  }
  set size(v) {
    this._size[0] = v;
    this._size[1] = v;
    this.redraw();
  }
  useDefault() {
    return this._size[0] === 0 && this._size[1] === 0;
  }
  static getWebGLImpl() {
    return WebGLPixelateShaderImpl;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    let gl = this.gl;
    this._setUniform("size", new Float32Array(this._size), gl.uniform2fv);
  }
  getExtraAttribBytesPerVertex() {
    return 8;
  }
  enableAttribs() {
    super.enableAttribs();
    this.gl.enableVertexAttribArray(this._attrib("aTextureRes"));
  }
  disableAttribs() {
    super.disableAttribs();
    this.gl.disableVertexAttribArray(this._attrib("aTextureRes"));
  }
  setExtraAttribsInBuffer(operation) {
    let offset = operation.extraAttribsDataByteOffset / 4;
    let floats = operation.quads.floats;
    let length = operation.length;
    for (let i = 0; i < length; i++) {
      let w = operation.quads.getTextureWidth(operation.index + i);
      let h = operation.quads.getTextureHeight(operation.index + i);
      floats[offset] = w;
      floats[offset + 1] = h;
      floats[offset + 2] = w;
      floats[offset + 3] = h;
      floats[offset + 4] = w;
      floats[offset + 5] = h;
      floats[offset + 6] = w;
      floats[offset + 7] = h;
      offset += 8;
    }
  }
  beforeDraw(operation) {
    let gl = this.gl;
    gl.vertexAttribPointer(this._attrib("aTextureRes"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));
  }
}
PixelateShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    attribute vec2 aTextureRes;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    varying vec2 vTextureRes;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vColor = aColor;
        vTextureRes = aTextureRes;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
PixelateShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    varying vec2 vTextureRes;

    uniform vec2 size;
    uniform sampler2D uSampler;
    
    vec2 mapCoord( vec2 coord )
    {
        coord *= vTextureRes.xy;
        return coord;
    }
    
    vec2 unmapCoord( vec2 coord )
    {
        coord /= vTextureRes.xy;
        return coord;
    }
    
    vec2 pixelate(vec2 coord, vec2 size)
    {
        return floor( coord / size ) * size;
    }
    
    void main(void)
    {
        vec2 coord = mapCoord(vTextureCoord);
        coord = pixelate(coord, size);
        coord = unmapCoord(coord);
        gl_FragColor = texture2D(uSampler, coord) * vColor;
    }
`;
class RadialFilterShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._radius = 0;
    this._cutoff = 1;
  }
  set radius(v) {
    this._radius = v;
    this.redraw();
  }
  get radius() {
    return this._radius;
  }
  set cutoff(v) {
    this._cutoff = v;
    this.redraw();
  }
  get cutoff() {
    return this._cutoff;
  }
  useDefault() {
    return this._radius === 0;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("radius", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);
    this._setUniform("cutoff", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);
  }
}
RadialFilterShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 pos;
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
        pos = gl_Position.xy;
    }
`;
RadialFilterShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec2 pos;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform float radius;
    uniform float cutoff;
    void main(void){
        vec4 color = texture2D(uSampler, vTextureCoord);
        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));
        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;
    }
`;
class RoundedRectangleShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._blend = 0;
    this._radius = [1, 1, 1, 1];
    this._stroke = 0;
    this._fc = 16777215;
    this._fillColor = this._getNormalizedColor(4294967295);
    this._strokeColor = this._getNormalizedColor(16777215);
  }
  set blend(p) {
    this._blend = Math.min(Math.max(p, 0), 1);
  }
  set radius(v) {
    if (Array.isArray(v)) {
      if (v.length === 2) {
        this._radius = [v[0], v[1], v[0], v[1]];
      } else if (v.length === 3) {
        this._radius = [v[0], v[1], v[2], this._radius[3]];
      } else if (v.length === 4) {
        this._radius = v;
      } else {
        this._radius = [v[0], v[0], v[0], v[0]];
      }
    } else {
      this._radius = [v, v, v, v];
    }
    this.redraw();
  }
  get radius() {
    return this._radius;
  }
  set topLeft(num) {
    this._radius[0] = num;
    this.redraw();
  }
  get topLeft() {
    return this._radius[0];
  }
  set topRight(num) {
    this._radius[1] = num;
    this.redraw();
  }
  get topRight() {
    return this._radius[1];
  }
  set bottomRight(num) {
    this._radius[2] = num;
    this.redraw();
  }
  get bottomRight() {
    return this._radius[2];
  }
  set bottomLeft(num) {
    this._radius[3] = num;
    this.redraw();
  }
  get bottomLeft() {
    return this._radius[4];
  }
  set strokeColor(argb) {
    this._sc = argb;
    this._strokeColor = this._getNormalizedColor(argb);
    this.redraw();
  }
  get strokeColor() {
    return this._sc;
  }
  set fillColor(argb) {
    this._fc = argb;
    this._fillColor = this._getNormalizedColor(argb);
    this.redraw();
  }
  get fillColor() {
    return this._fc;
  }
  set stroke(num) {
    this._stroke = num;
    this.redraw();
  }
  get stroke() {
    return this._stroke;
  }
  _getNormalizedColor(color) {
    const col = StageUtils.getRgbaComponentsNormalized(color);
    col[0] *= col[3];
    col[1] *= col[3];
    col[2] *= col[3];
    return new Float32Array(col);
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    const renderPrecision = this.ctx.stage.getRenderPrecision();
    const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision);
    this._setUniform("radius", new Float32Array(_radius), this.gl.uniform4fv);
    this._setUniform("alpha", operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);
    this._setUniform("blend", this._blend, this.gl.uniform1f);
    this._setUniform("strokeColor", this._strokeColor, this.gl.uniform4fv);
    this._setUniform("fillColor", this._fillColor, this.gl.uniform4fv);
    this._setUniform("stroke", this._stroke * renderPrecision, this.gl.uniform1f);
    this._setUniform("resolution", new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);
  }
}
RoundedRectangleShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;

    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec4 vColor;

    void main(void){
        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);
        vTextureCoord = aTextureCoord;
        vColor = aColor;
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
RoundedRectangleShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif

    #define PI 3.14159265359

    varying vec2 vTextureCoord;
    varying vec4 vColor;

    uniform sampler2D uSampler;
    uniform vec2 resolution;
    uniform vec4 radius;
    uniform float stroke;
    uniform vec4 strokeColor;
    uniform vec4 fillColor;
    uniform float alpha;
    uniform float fill;
    uniform float blend;
    
    float boxDist(vec2 p, vec2 size, float radius){
        size -= vec2(radius);
        vec2 d = abs(p) - size;
        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;
    }
    
    float fillMask(float dist){
        return clamp(-dist, 0.0, 1.0);
    }
    
    float innerBorderMask(float dist, float width){
        float alpha1 = clamp(dist + width, 0.0, 1.0);
        float alpha2 = clamp(dist, 0.0, 1.0);
        return alpha1 - alpha2;
    }

    void main() {
        vec2 halfRes = 0.5 * resolution.xy;
        float r = 0.0;
        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {
            r = radius[0];
        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {
            r = radius[1];
        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {
            r = radius[2];
        } else {
            r = radius[3];
        }
        
        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);
        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;
        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     
        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));
        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b, stroke));
    }
`;
class FadeOutShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._fade = [0, 0, 0, 0];
  }
  set top(num) {
    this._fade[0] = num;
    this.redraw();
  }
  get top() {
    return this._fade[0];
  }
  set right(num) {
    this._fade[1] = num;
    this.redraw();
  }
  get right() {
    return this._fade[1];
  }
  set bottom(num) {
    this._fade[2] = num;
    this.redraw();
  }
  get bottom() {
    return this._fade[2];
  }
  set left(num) {
    this._fade[3] = num;
    this.redraw();
  }
  get left() {
    return this._fade[3];
  }
  set fade(v) {
    if (Array.isArray(v)) {
      if (v.length === 2) {
        this._fade = [v[0], v[1], v[0], v[1]];
      } else if (v.length === 3) {
        this._fade = [v[0], v[1], v[2], this._fade[3]];
      } else if (v.length === 4) {
        this._fade = v;
      } else {
        this._fade = [v[0], v[0], v[0], v[0]];
      }
    } else {
      this._fade = [v, v, v, v];
    }
    this.redraw();
  }
  get fade() {
    return this._fade;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    const renderPrecision = this.ctx.stage.getRenderPrecision();
    const fade = this._fade.map((f) => f * renderPrecision);
    this._setUniform("fade", new Float32Array(fade), this.gl.uniform4fv);
    this._setUniform("resolution", new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);
  }
}
FadeOutShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform vec2 resolution;
    uniform vec4 fade;
    
    void main() {
        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;
        vec2 halfRes = 0.5 * resolution.xy;
        vec2 point = vTextureCoord.xy * resolution.xy;
        
        vec2 pos1;
        vec2 pos2;
        vec2 d;
        float c;
        float t = 0.0;
             
        if(fade[0] > 0.0) {
            pos1 = vec2(point.x, point.y);
            pos2 = vec2(point.x, point.y + fade[0]);
            d = pos2 - pos1;
            c = dot(pos1, d) / dot(d, d);
            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));
            color = mix(vec4(0.0), color, t);
        }
        
        if(fade[1] > 0.0) {
            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);
            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);
            d = pos1 - pos2;
            c = dot(pos2, d) / dot(d, d);
            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));
            color = mix(vec4(0.0), color, t);
        }
        
        if(fade[2] > 0.0) {
            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);
            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);
            d = pos1 - pos2;
            c = dot(pos2, d) / dot(d, d);
            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));
            color = mix(vec4(0.0), color, t);
        }
        
        if(fade[3] > 0.0) {
            pos1 = vec2(point.x, point.y);
            pos2 = vec2(point.x + fade[3], point.y);
            d = pos2 - pos1;
            c = dot(pos1, d) / dot(d, d);
            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));
            color = mix(vec4(0.0), color, t);
        }
        
        gl_FragColor = color;
    }
`;
class VignetteShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._magnitude = 1.3;
    this._intensity = 0.7;
    this._pivot = [0.5, 0.5];
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    this._setUniform("magnitude", this._magnitude, this.gl.uniform1f);
    this._setUniform("intensity", this._intensity, this.gl.uniform1f);
    this._setUniform("pivot", new Float32Array(this._pivot), this.gl.uniform2fv);
    this.redraw();
  }
  set pivot(v) {
    if (Array.isArray(v)) {
      this._pivot = v;
    } else {
      this._pivot = [v, v];
    }
    this.redraw();
  }
  get pivotX() {
    return this._pivot[0];
  }
  set pivotX(v) {
    this._pivot[0] = v;
    this.redraw();
  }
  get pivotY() {
    return this._pivot[1];
  }
  set pivotY(v) {
    this._pivot[1] = v;
    this.redraw();
  }
  get intensity() {
    return this._intensity;
  }
  set intensity(v) {
    this._intensity = v;
    this.redraw();
  }
  get magnitude() {
    return this._magnitude;
  }
  set magnitude(v) {
    this._magnitude = v;
    this.redraw();
  }
}
VignetteShader.vertexShaderSource = DefaultShader$1.vertexShaderSource;
VignetteShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;

    uniform float magnitude;
    uniform float intensity;
    uniform vec2 pivot;

    void main() {
        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);
        uv.x = clamp(uv.x, 0.0, 1.0);
        uv.y = clamp(uv.y, 0.0, 1.0);
   
        uv *=  1.00 - uv.yx;
        float vig = uv.x * uv.y * 25.0 * intensity;
        vig = pow(vig, 0.45 * magnitude);
        vec4 fragColor = vec4(vig) * vColor;
        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;

    }
`;
class SpinnerShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._radius = 100;
    this._width = 50;
    this._period = 1;
    this._angle = 0.5;
    this._smooth = 5e-3;
    this._color = 4294967295;
    this._backgroundColor = 4278190080;
    this._time = Date.now();
  }
  set radius(v) {
    this._radius = v;
    this.redraw();
  }
  set width(v) {
    this._width = v;
    this.redraw();
  }
  set period(v) {
    this._period = v;
    this.redraw();
  }
  set angle(v) {
    this._angle = v;
    this.redraw();
  }
  set smooth(v) {
    this._smooth = v;
    this.redraw();
  }
  set color(v) {
    this._color = v;
    this.redraw();
  }
  set backgroundColor(v) {
    this._backgroundColor = v;
    this.redraw();
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    this._setUniform("iTime", Date.now() - this._time, this.gl.uniform1f);
    const renderPrecision = this.ctx.stage.getRenderPrecision();
    this._setUniform("radius", this._radius * renderPrecision, this.gl.uniform1f);
    this._setUniform("width", this._width * renderPrecision, this.gl.uniform1f);
    this._setUniform("period", this._period, this.gl.uniform1f);
    this._setUniform("angle", this._angle, this.gl.uniform1f);
    this._setUniform("smooth", this._smooth, this.gl.uniform1f);
    this._setUniform("color", new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);
    this._setUniform("backgroundColor", new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);
    this._setUniform("resolution", new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);
    this.redraw();
  }
}
SpinnerShader.vertexShaderSource = DefaultShader$1.vertexShaderSource;
SpinnerShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;

    uniform float iTime;
    uniform float radius;
    uniform float width;
    uniform float period;
    uniform float angle;
    uniform float smooth;
    uniform vec2 resolution;

    uniform vec4 color;
    uniform vec4 backgroundColor;

    float ratio = resolution.y / resolution.x;

    vec2 transpose_pos(vec2 pos) {
        if (ratio < 1.) {
            float diff = 0.5 - pos.x;
            pos.x = 0.5 - diff / ratio;
        } else {
            float diff = 0.5 - pos.y;
            pos.y = 0.5 - diff * ratio;
        }
        return pos;
    }

    float get_angle(vec2 pos) {
        pos = transpose_pos(pos);
        float a = atan(pos.y - 0.5, pos.x - 0.5);
        a = (1.0+a/3.14159)/2.0;
        
        return a;
    }

    float dist(vec2 pos1, vec2 pos2) {
        pos1 = transpose_pos(pos1);
        return distance(pos1, pos2);
    }

    void main()
    {
        vec2 fragCoord = vTextureCoord;
        vec4 fragColor = vColor;
        
        vec2 st = vTextureCoord;
        float pct = dist(st, vec2(0.5));

        float a = get_angle(st);
        float t = iTime / 1000.0 / period;

        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);
        float outer = max(radius / resolution.x, radius / resolution.y);

        float x1 = mod(t, 1.0);
        float x2 = mod(t + angle, 1.0);

        if (x1 < x2) {
            if (a > x1 && a < x2) {
                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));
                fragColor = mix(backgroundColor, color, val);
            } else {
                fragColor = backgroundColor;
            }
        } else {
            if (a < x2) {
                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));
                fragColor = mix(backgroundColor, color, val);
            } else if (a > x1) {
                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));
                fragColor = mix(backgroundColor, color, val);
            } else {
                fragColor = backgroundColor;
            }
        }

        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));
        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;
    }
`;
class HoleShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._x = 0;
    this._y = 0;
    this._w = 0;
    this._h = 0;
    this._radius = 0;
  }
  get x() {
    return this._x;
  }
  set x(v) {
    this._x = v;
    this.redraw();
  }
  get y() {
    return this._y;
  }
  set y(v) {
    this._y = v;
    this.redraw();
  }
  get w() {
    return this._w;
  }
  set w(v) {
    this._w = v;
    this.redraw();
  }
  get h() {
    return this._h;
  }
  set h(v) {
    this._h = v;
    this.redraw();
  }
  get radius() {
    return this._radius;
  }
  set radius(v) {
    this._radius = v;
    this.redraw();
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    const renderPrecision = this.ctx.stage.getRenderPrecision();
    this._setUniform("x", this._x * renderPrecision, this.gl.uniform1f);
    this._setUniform("y", this._y * renderPrecision, this.gl.uniform1f);
    this._setUniform("w", this._w * renderPrecision, this.gl.uniform1f);
    this._setUniform("h", this._h * renderPrecision, this.gl.uniform1f);
    this._setUniform("radius", (this._radius + 0.5) * renderPrecision, this.gl.uniform1f);
    this._setUniform("resolution", new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);
  }
  useDefault() {
    return this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0;
  }
}
HoleShader.vertexShaderSource = DefaultShader$1.vertexShaderSource;
HoleShader.fragmentShaderSource = `
   #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform float x;
    uniform float y;
    uniform float w;
    uniform float h;
    uniform vec2 resolution;
    uniform float radius;

    float roundBox(vec2 p, vec2 b, float r) {
        float d = length(max(abs(p)-b+r, 0.1))-r;
        return smoothstep(1.0, 0.0, d);
    }

    void main(void){
        vec4 color = texture2D(uSampler, vTextureCoord);
        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;
        vec2 size = vec2(w, h) / 2.0;
        float b = roundBox(pos, size, radius);
        gl_FragColor = mix(color, vec4(0.0), b) * vColor;
    }
`;
class RadialGradientShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._pivot = [0, 0];
    this._ic = 4294967295;
    this._normalizedIC = this._getNormalizedColor(this._ic);
    this._oc = 16777215;
    this._normalizedOC = this._getNormalizedColor(this._oc);
    this._radius = 0;
  }
  set radiusX(v) {
    this.radius = v;
  }
  get radiusX() {
    return this._radius;
  }
  set radiusY(v) {
    this._radiusY = v;
    this.redraw();
  }
  get radiusY() {
    return this._radiusY;
  }
  set radius(v) {
    this._radius = v;
    this.redraw();
  }
  set innerColor(argb) {
    this._ic = argb;
    this._normalizedIC = this._getNormalizedColor(argb);
    this.redraw();
  }
  get innerColor() {
    return this._ic;
  }
  set outerColor(argb) {
    this._oc = argb;
    this._normalizedOC = this._getNormalizedColor(argb);
    this.redraw();
  }
  set color(argb) {
    this.innerColor = argb;
  }
  get color() {
    return this.innerColor;
  }
  get outerColor() {
    return this._ic;
  }
  set x(f) {
    this._x = f;
    this.redraw();
  }
  set y(f) {
    this._y = f;
    this.redraw();
  }
  set pivot(v) {
    if (Array.isArray(v) && v.length === 2) {
      this._pivot = v;
    } else if (Array.isArray(v)) {
      this._pivot = [v[0], v[1] || v[0]];
    } else {
      this._pivot = [v, v];
    }
    this.redraw();
  }
  get pivot() {
    return this._pivot[0];
  }
  set pivotY(f) {
    this._pivot[1] = f;
    this.redraw();
  }
  get pivotY() {
    return this._pivot[1];
  }
  set pivotX(f) {
    this._pivot[0] = f;
    this.redraw();
  }
  get pivotX() {
    return this._pivot[0];
  }
  _getNormalizedColor(color) {
    const col = StageUtils.getRgbaComponentsNormalized(color);
    col[0] *= col[3];
    col[1] *= col[3];
    col[2] *= col[3];
    return new Float32Array(col);
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    if (this._x) {
      this._pivot[0] = this._x / owner.w;
    }
    if (this._y) {
      this._pivot[1] = this._y / owner.h;
    }
    if (this._radius === 0) {
      this._radius = owner.w * 0.5;
    }
    this._setUniform("innerColor", this._normalizedIC, this.gl.uniform4fv);
    this._setUniform("fill", StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);
    this._setUniform("outerColor", this._normalizedOC, this.gl.uniform4fv);
    this._setUniform("pivot", new Float32Array(this._pivot), this.gl.uniform2fv);
    this._setUniform("resolution", new Float32Array([owner._w, owner._h]), this.gl.uniform2fv);
    this._setUniform("alpha", operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);
    this._setUniform("radius", this._radius, this.gl.uniform1f);
    this._setUniform("radiusY", this._radiusY || this._radius, this.gl.uniform1f);
  }
}
RadialGradientShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    
    #define PI 3.14159265359
    
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;
    uniform vec2 resolution;
    uniform vec2 pivot;
    uniform vec4 innerColor;
    uniform vec4 outerColor;
    uniform float radius;
    uniform float radiusY;
    uniform float alpha;
    uniform float fill;
    uniform float aspectRatio;
    
    void main() {
        vec2 point = vTextureCoord.xy * resolution;
        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);
        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));
        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);
        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));
    }
`;
class Light3dShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._strength = 0.5;
    this._ambient = 0.5;
    this._fudge = 0.4;
    this._rx = 0;
    this._ry = 0;
    this._z = 0;
    this._pivotX = NaN;
    this._pivotY = NaN;
    this._pivotZ = 0;
    this._lightY = 0;
    this._lightZ = 0;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    let vr = operation.shaderOwner;
    let element = vr.element;
    let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;
    let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;
    let coords = vr.getRenderTextureCoords(pivotX, pivotY);
    let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);
    let gl = this.gl;
    this._setUniform("pivot", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);
    this._setUniform("rot", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);
    this._setUniform("z", this._z, gl.uniform1f);
    this._setUniform("lightY", this.lightY, gl.uniform1f);
    this._setUniform("lightZ", this.lightZ, gl.uniform1f);
    this._setUniform("strength", this._strength, gl.uniform1f);
    this._setUniform("ambient", this._ambient, gl.uniform1f);
    this._setUniform("fudge", this._fudge, gl.uniform1f);
  }
  set strength(v) {
    this._strength = v;
    this.redraw();
  }
  get strength() {
    return this._strength;
  }
  set ambient(v) {
    this._ambient = v;
    this.redraw();
  }
  get ambient() {
    return this._ambient;
  }
  set fudge(v) {
    this._fudge = v;
    this.redraw();
  }
  get fudge() {
    return this._fudge;
  }
  get rx() {
    return this._rx;
  }
  set rx(v) {
    this._rx = v;
    this.redraw();
  }
  get ry() {
    return this._ry;
  }
  set ry(v) {
    this._ry = v;
    this.redraw();
  }
  get z() {
    return this._z;
  }
  set z(v) {
    this._z = v;
    this.redraw();
  }
  get pivotX() {
    return this._pivotX;
  }
  set pivotX(v) {
    this._pivotX = v + 1;
    this.redraw();
  }
  get pivotY() {
    return this._pivotY;
  }
  set pivotY(v) {
    this._pivotY = v + 1;
    this.redraw();
  }
  get lightY() {
    return this._lightY;
  }
  set lightY(v) {
    this._lightY = v;
    this.redraw();
  }
  get pivotZ() {
    return this._pivotZ;
  }
  set pivotZ(v) {
    this._pivotZ = v;
    this.redraw();
  }
  get lightZ() {
    return this._lightZ;
  }
  set lightZ(v) {
    this._lightZ = v;
    this.redraw();
  }
  useDefault() {
    return this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1;
  }
}
Light3dShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec4 vColor;

    uniform float fudge;
    uniform float strength;
    uniform float ambient;
    uniform float z;
    uniform float lightY;
    uniform float lightZ;
    uniform vec3 pivot;
    uniform vec3 rot;
    varying vec3 pos;

    void main(void) {
        pos = vec3(aVertexPosition.xy, z);
        
        pos -= pivot;
        
        // Undo XY rotation
        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), 
                           -sin(rot.z), cos(rot.z));
        pos.xy = iRotXy * pos.xy;
        
        // Perform 3d rotations
        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;
        gl_Position.y = pos.y;
        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;
        
        pos.x = gl_Position.x;
        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;
        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;
        
        // Redo XY rotation
        iRotXy[0][1] = -iRotXy[0][1];
        iRotXy[1][0] = -iRotXy[1][0];
        pos.xy = iRotXy * pos.xy; 

        // Undo translate to pivot position
        pos.xyz += pivot;

        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);
        
        // Set depth perspective
        float perspective = 1.0 + fudge * pos.z;

        pos.z += lightZ * projection.x;

        // Map coords to gl coordinate space.
        // Set z to 0 because we don't want to perform z-clipping
        gl_Position = vec4(pos.xy, 0.0, perspective);

        // Correct light source position.
        pos.y += lightY * abs(projection.y);

        vTextureCoord = aTextureCoord;
        vColor = aColor;
        
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
Light3dShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    varying vec3 pos;
    uniform sampler2D uSampler;
    uniform float ambient;
    uniform float strength;
    void main(void){
        vec4 rgba = texture2D(uSampler, vTextureCoord);
        float d = length(pos);
        float n = 1.0 / max(0.1, d);
        rgba.rgb = rgba.rgb * (strength * n + ambient);
        gl_FragColor = rgba * vColor;
    }
`;
class PerspectiveShader extends DefaultShader$1 {
  constructor(ctx) {
    super(ctx);
    this._fudge = 0.2;
    this._rx = 0;
    this._ry = 0;
    this._z = 1;
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const vr = operation.shaderOwner;
    const element = vr.element;
    const pivotX = element.pivotX * vr.w;
    const pivotY = element.pivotY * vr.h;
    const coords = vr.getRenderTextureCoords(pivotX, pivotY);
    const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);
    const gl = this.gl;
    this._setUniform("pivot", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);
    this._setUniform("rot", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);
    this._setUniform("z", this._z, gl.uniform1f);
    this._setUniform("fudge", this._fudge, gl.uniform1f);
  }
  set fudge(v) {
    this._fudge = v;
    this.redraw();
  }
  get fudge() {
    return this._fudge;
  }
  get rx() {
    return this._rx;
  }
  set rx(v) {
    this._rx = v;
    this.redraw();
  }
  get ry() {
    return this._ry;
  }
  set ry(v) {
    this._ry = v;
    this.redraw();
  }
  get z() {
    return this._z;
  }
  set z(v) {
    this._z = v;
    this.redraw();
  }
  useDefault() {
    return this._rx === 0 && this._ry === 0 && this._z === 0;
  }
}
PerspectiveShader.vertexShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    attribute vec2 aVertexPosition;
    attribute vec2 aTextureCoord;
    attribute vec4 aColor;
    uniform vec2 projection;
    varying vec2 vTextureCoord;
    varying vec4 vColor;

    uniform float z;
    uniform vec3 pivot;
    uniform vec3 rot;
    varying vec3 pos;

    void main(void) {
        pos = vec3(aVertexPosition.xy, z);
        
        pos -= pivot;
        
        // Undo XY rotation
        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), 
                           -sin(rot.z), cos(rot.z));
        pos.xy = iRotXy * pos.xy;
        
        // Perform 3d rotations
        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;
        gl_Position.y = pos.y;
        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;
        
        pos.x = gl_Position.x;
        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;
        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;
        
        // Redo XY rotation
        iRotXy[0][1] = -iRotXy[0][1];
        iRotXy[1][0] = -iRotXy[1][0];
        pos.xy = iRotXy * pos.xy; 

        // Undo translate to pivot position
        pos.xyz += pivot;

        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);
        
        // Map coords to gl coordinate space.
        // Set z to 0 because we don't want to perform z-clipping
        gl_Position = vec4(pos.xy, 0.0, z);

        vTextureCoord = aTextureCoord;
        vColor = aColor;
        
        gl_Position.y = -sign(projection.y) * gl_Position.y;
    }
`;
PerspectiveShader.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    uniform sampler2D uSampler;

    uniform vec3 rot;
    uniform float fudge;

    void main(void) {
        vec2 coords = vTextureCoord;

        coords.xy -= vec2(0.5);
        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;
        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;
        coords.xy += vec2(0.5);

        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {
            gl_FragColor = vec4(0.0);
        } else {
            gl_FragColor = texture2D(uSampler, coords) * vColor;
        }
    }
`;
class MagnifierShader extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._x = 0;
    this._y = 0;
    this._w = 0;
    this._h = 0;
    this._radius = 0;
    this._magnification = 0.6;
  }
  get x() {
    return this._x;
  }
  set x(v) {
    this._x = v;
    this.redraw();
  }
  get y() {
    return this._y;
  }
  set y(v) {
    this._y = v;
    this.redraw();
  }
  get w() {
    return this._w;
  }
  set w(v) {
    this._w = v;
    this.redraw();
  }
  get h() {
    return this._h;
  }
  set h(v) {
    this._h = v;
    this.redraw();
  }
  get magnification() {
    return this._magnification;
  }
  set magnification(v) {
    this._magnification = v;
    this.redraw();
  }
  get radius() {
    return this._radius;
  }
  set radius(v) {
    this._radius = v;
    this.redraw();
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    const renderPrecision = this.ctx.stage.getRenderPrecision();
    this._setUniform("x", this._x * renderPrecision, this.gl.uniform1f);
    this._setUniform("y", this._y * renderPrecision, this.gl.uniform1f);
    this._setUniform("w", this._w * renderPrecision, this.gl.uniform1f);
    this._setUniform("h", this._h * renderPrecision, this.gl.uniform1f);
    this._setUniform("magnification", this._magnification, this.gl.uniform1f);
    this._setUniform(
      "radius",
      (this._radius + 0.5) * renderPrecision,
      this.gl.uniform1f
    );
    this._setUniform(
      "resolution",
      new Float32Array([
        owner._w * renderPrecision,
        owner._h * renderPrecision
      ]),
      this.gl.uniform2fv
    );
  }
  useDefault() {
    return this._w === 0 && this._h === 0;
  }
}
MagnifierShader.vertexShaderSource = DefaultShader$1.vertexShaderSource;
MagnifierShader.fragmentShaderSource = `
	  #ifdef GL_ES
		# ifdef GL_FRAGMENT_PRECISION_HIGH
		precision highp float;
		# else
		precision lowp float;
		# endif
	  #endif

	  varying vec2 vTextureCoord;
	  varying vec4 vColor;
	  uniform sampler2D uSampler;
	  uniform float x;
	  uniform float y;
	  uniform float w;
	  uniform float h;
	  uniform vec2 resolution;
	  uniform float radius;
	  uniform float magnification;
  
	  float roundBox(vec2 p, vec2 b, float r) {
		  float d = length(max(abs(p)-b+r, 0.1))-r;
		  return smoothstep(1.0, 0.0, d);
	  }

	  float inside(vec2 v) {
		vec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);
		return s.x * s.y;   
      }
  
	  void main(void) {
		vec4 color = texture2D(uSampler, vTextureCoord);
		vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;
		vec2 size = vec2(w, h) / 2.0;
		float b = roundBox(pos, size, radius);
		vec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;
		gl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;
	  }
  `;
class SpinnerShader2 extends DefaultShader$1 {
  constructor(context) {
    super(context);
    this._period = 1;
    this._stroke = 0;
    this._showDot = true;
    this._clockwise = true;
    this._bc = 4278190080;
    this._normalizedBC = this._getNormalizedColor(this._bc);
    this._c = 4294967295;
    this._normalizedC = this._getNormalizedColor(this._c);
  }
  set radius(v) {
    if (v === 0) {
      v = 1;
    }
    this._radius = v;
  }
  set stroke(value) {
    this._stroke = Math.abs(value);
  }
  get stroke() {
    return this._stroke;
  }
  set color(argb) {
    this._c = argb;
    this._normalizedC = this._getNormalizedColor(argb);
  }
  get color() {
    return this._c;
  }
  set backgroundColor(argb) {
    this._bc = argb;
    this._normalizedBC = this._getNormalizedColor(argb);
  }
  get backgroundColor() {
    return this._sc;
  }
  set showDot(bool) {
    this._showDot = bool;
  }
  get showDot() {
    return this._showDot;
  }
  set clockwise(bool) {
    this._clockwise = bool;
  }
  get clockwise() {
    return this._clockwise;
  }
  set period(v) {
    this._period = v;
  }
  get period() {
    return this._period;
  }
  _getNormalizedColor(color) {
    const col = StageUtils.getRgbaComponentsNormalized(color);
    col[0] *= col[3];
    col[1] *= col[3];
    col[2] *= col[3];
    return new Float32Array(col);
  }
  setupUniforms(operation) {
    super.setupUniforms(operation);
    const owner = operation.shaderOwner;
    const radius = this._radius || owner._w / 2;
    if (this._stroke === 0) {
      this._stroke = radius * 0.33;
    }
    this._setUniform("resolution", new Float32Array([owner._w, owner._h]), this.gl.uniform2fv);
    this._setUniform("color", this._normalizedC, this.gl.uniform4fv);
    this._setUniform("backgroundColor", this._normalizedBC, this.gl.uniform4fv);
    this._setUniform("stroke", this._stroke, this.gl.uniform1f);
    this._setUniform("radius", radius, this.gl.uniform1f);
    this._setUniform("direction", this._clockwise ? -1 : 1, this.gl.uniform1f);
    this._setUniform("showDot", !!this._showDot, this.gl.uniform1f);
    this._setUniform("time", Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);
    this._setUniform("period", this._period, this.gl.uniform1f);
    this._setUniform("alpha", operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);
    if (this._sc !== this._bc || this._stroke !== radius * 0.5) {
      this.redraw();
    }
  }
}
SpinnerShader2.spinSync = Date.now();
SpinnerShader2.fragmentShaderSource = `
    #ifdef GL_ES
    # ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
    # else
    precision lowp float;
    # endif
    #endif
    
    #define PI 3.14159265359
    
    varying vec2 vTextureCoord;
    varying vec4 vColor;
    
    uniform sampler2D uSampler;
    uniform vec2 resolution;
    uniform vec4 color;
    uniform vec4 backgroundColor;
    uniform float direction;
    uniform float radius;
    uniform float time;
    uniform float stroke;
    uniform float showDot;
    uniform float period;
    uniform float alpha;
    
    float circleDist(vec2 p, float radius){
        return length(p) - radius;
    }
    
    float fillMask(float dist){
        return clamp(-dist, 0.0, 1.0);
    }
    
    void main() {
        vec2 halfRes = 0.5 * resolution.xy;
        vec2 center = vTextureCoord.xy * resolution - halfRes;
        
        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));
        float rot = -(time / 1000.0 / period) * 6.0 * direction;
        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));
        
        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;
        
        float strokeRad = stroke * 0.5;
        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);
        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));
        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);
    }
`;
const lightning = {
  Application,
  Component,
  Base,
  Utils: Utils$1,
  StageUtils,
  Element,
  Tools,
  Stage,
  ElementCore,
  ElementTexturizer,
  Texture,
  EventEmitter,
  shaders: {
    Grayscale: WebGLGrayscaleShader,
    BoxBlur: BoxBlurShader,
    Dithering: DitheringShader,
    CircularPush: CircularPushShader,
    Inversion: InversionShader,
    LinearBlur: LinearBlurShader,
    Outline: OutlineShader,
    Pixelate: PixelateShader,
    RadialFilter: RadialFilterShader,
    RoundedRectangle: RoundedRectangleShader,
    Spinner2: SpinnerShader2,
    FadeOut: FadeOutShader,
    Hole: HoleShader,
    Vignette: VignetteShader,
    Spinner: SpinnerShader,
    RadialGradient: RadialGradientShader,
    Light3d: Light3dShader,
    Perspective: PerspectiveShader,
    Magnifier: MagnifierShader,
    WebGLShader,
    WebGLDefaultShader: DefaultShader$1,
    C2dShader,
    C2dDefaultShader: DefaultShader2,
    c2d: {
      Grayscale: C2dGrayscaleShader,
      Blur: BlurShader
    }
  },
  textures: {
    RectangleTexture,
    NoiseTexture,
    TextTexture,
    ImageTexture,
    HtmlTexture,
    StaticTexture,
    StaticCanvasTexture,
    SourceTexture
  },
  components: {
    FastBlurComponent,
    BloomComponent,
    SmoothScaleComponent,
    BorderComponent,
    ListComponent
  },
  tools: {
    ObjMerger,
    ObjectListProxy,
    ObjectListWrapper
  }
};
if (Utils$1.isWeb) {
  window.lng = lightning;
}

//# sourceMappingURL=lightning.esm.js.map


/***/ }),

/***/ "../../../node_modules/@storybook/addon-docs/dist/preview.mjs":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parameters: () => (/* binding */ parameters)
/* harmony export */ });
var parameters={docs:{renderer:async()=>{let{DocsRenderer}=await Promise.all(/* import() */[__webpack_require__.e(5126), __webpack_require__.e(9790)]).then(__webpack_require__.bind(__webpack_require__, "../../../node_modules/@storybook/addon-docs/dist/DocsRenderer-NNNQARDV.mjs"));return new DocsRenderer}}};




/***/ }),

/***/ "../../../node_modules/@storybook/addon-essentials/dist/actions/preview.mjs":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  argsEnhancers: () => (/* reexport */ argsEnhancers)
});

;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs
var PARAM_KEY="actions",ADDON_ID="storybook/actions",PANEL_ID=(/* unused pure expression or super */ null && (`${ADDON_ID}/panel`)),EVENT_ID=`${ADDON_ID}/action-event`,CLEAR_ID=(/* unused pure expression or super */ null && (`${ADDON_ID}/action-clear`)),CYCLIC_KEY="$___storybook.isCyclic";



;// CONCATENATED MODULE: ../../../node_modules/uuid/dist/esm-browser/native.js
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const esm_browser_native = ({
  randomUUID
});
;// CONCATENATED MODULE: ../../../node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
;// CONCATENATED MODULE: ../../../node_modules/uuid/dist/esm-browser/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_browser_stringify = ((/* unused pure expression or super */ null && (stringify)));
;// CONCATENATED MODULE: ../../../node_modules/uuid/dist/esm-browser/v4.js




function v4(options, buf, offset) {
  if (esm_browser_native.randomUUID && !buf && !options) {
    return esm_browser_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_browser_v4 = (v4);
// EXTERNAL MODULE: external "__STORYBOOK_MODULE_PREVIEW_API__"
var external_STORYBOOK_MODULE_PREVIEW_API_ = __webpack_require__("@storybook/preview-api");
;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-actions/dist/chunk-AY7I2SME.mjs




var config={depth:10,clearOnStoryChange:!0,limit:50},configureActions=(options={})=>{Object.assign(config,options);};var findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return !proto||callback(proto)?proto:findProto(proto,callback)},isReactSyntheticEvent=e=>!!(typeof e=="object"&&e&&findProto(e,proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name))&&typeof e.persist=="function"),serializeArg=a=>{if(isReactSyntheticEvent(a)){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return typeof view=="object"&&view?.constructor.name==="Window"&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}return a};function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=esm_browser_v4(),minDepth=5,serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:minDepth+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit);};return handler.isAction=!0,handler}



;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-actions/dist/preview.mjs



var isInInitialArgs=(name,initialArgs)=>typeof initialArgs[name]>"u"&&!(name in initialArgs),inferActionsFromArgTypesRegex=context=>{let{initialArgs,argTypes,parameters:{actions}}=context;if(!actions||actions.disable||!actions.argTypesRegex||!argTypes)return {};let argTypesRegex=new RegExp(actions.argTypesRegex);return Object.entries(argTypes).filter(([name])=>!!argTypesRegex.test(name)).reduce((acc,[name,argType])=>(isInInitialArgs(name,initialArgs)&&(acc[name]=action(name)),acc),{})},addActionsFromArgTypes=context=>{let{initialArgs,argTypes,parameters:{actions}}=context;return actions?.disable||!argTypes?{}:Object.entries(argTypes).filter(([name,argType])=>!!argType.action).reduce((acc,[name,argType])=>(isInInitialArgs(name,initialArgs)&&(acc[name]=action(typeof argType.action=="string"?argType.action:name)),acc),{})};var argsEnhancers=[addActionsFromArgTypes,inferActionsFromArgTypesRegex];



;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-essentials/dist/actions/preview.mjs



/***/ }),

/***/ "../../../node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  highlightObject: () => (/* reexport */ highlightObject),
  highlightStyle: () => (/* reexport */ highlightStyle)
});

;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-highlight/dist/chunk-33ALZPRS.mjs
var ADDON_ID="storybook/highlight",HIGHLIGHT_STYLE_ID="storybookHighlight",HIGHLIGHT=`${ADDON_ID}/add`,RESET_HIGHLIGHT=`${ADDON_ID}/reset`;



// EXTERNAL MODULE: external "__STORYBOOK_MODULE_GLOBAL__"
var external_STORYBOOK_MODULE_GLOBAL_ = __webpack_require__("@storybook/global");
// EXTERNAL MODULE: external "__STORYBOOK_MODULE_PREVIEW_API__"
var external_STORYBOOK_MODULE_PREVIEW_API_ = __webpack_require__("@storybook/preview-api");
// EXTERNAL MODULE: external "__STORYBOOK_MODULE_CORE_EVENTS__"
var external_STORYBOOK_MODULE_CORE_EVENTS_ = __webpack_require__("@storybook/core-events");
;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-highlight/dist/preview.mjs





var {document: preview_document}=external_STORYBOOK_MODULE_GLOBAL_.global,highlightStyle=(color="#FF4785",style="dashed")=>`
  outline: 2px ${style} ${color};
  outline-offset: 2px;
  box-shadow: 0 0 0 6px rgba(255,255,255,0.6);
`,highlightObject=color=>({outline:`2px dashed ${color}`,outlineOffset:2,boxShadow:"0 0 0 6px rgba(255,255,255,0.6)"}),channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),highlight=infos=>{let id=HIGHLIGHT_STYLE_ID;resetHighlight();let elements=Array.from(new Set(infos.elements)),sheet=preview_document.createElement("style");sheet.setAttribute("id",id),sheet.innerHTML=elements.map(target=>`${target}{
          ${highlightStyle(infos.color,infos.style)}
         }`).join(" "),preview_document.head.appendChild(sheet);},resetHighlight=()=>{let id=HIGHLIGHT_STYLE_ID,sheetToBeRemoved=preview_document.getElementById(id);sheetToBeRemoved&&sheetToBeRemoved.parentNode?.removeChild(sheetToBeRemoved);};channel.on(external_STORYBOOK_MODULE_CORE_EVENTS_.STORY_CHANGED,resetHighlight);channel.on(RESET_HIGHLIGHT,resetHighlight);channel.on(HIGHLIGHT,highlight);



;// CONCATENATED MODULE: ../../../node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs



/***/ }),

/***/ "../../../node_modules/@storybook/docs-tools/dist/index.mjs":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Bd: () => (/* binding */ str),
/* harmony export */   PO: () => (/* binding */ SourceType),
/* harmony export */   g: () => (/* binding */ SNIPPET_RENDERED),
/* harmony export */   rS: () => (/* binding */ enhanceArgTypes)
/* harmony export */ });
/* unused harmony exports ADDON_ID, MAX_DEFAULT_VALUE_SUMMARY_LENGTH, MAX_TYPE_SUMMARY_LENGTH, PANEL_ID, PARAM_KEY, TypeSystem, convert, createSummaryValue, extractComponentDescription, extractComponentProps, extractComponentSectionArray, extractComponentSectionObject, getDocgenDescription, getDocgenSection, hasDocgen, hasDocsOrControls, isDefaultValueBlacklisted, isTooLongForDefaultValueSummary, isTooLongForTypeSummary, isValidDocgenSection, normalizeNewlines, parseJsDoc */
/* harmony import */ var lodash_mapValues_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../../node_modules/lodash/mapValues.js");
/* harmony import */ var lodash_mapValues_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var doctrine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../../node_modules/doctrine/lib/doctrine.js");
/* harmony import */ var _storybook_preview_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("@storybook/preview-api");
/* harmony import */ var _storybook_preview_api__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_storybook_preview_api__WEBPACK_IMPORTED_MODULE_2__);




var QUOTE_REGEX=/^['"]|['"]$/g,trimQuotes=str2=>str2.replace(QUOTE_REGEX,""),includesQuotes=str2=>QUOTE_REGEX.test(str2),parseLiteral=str2=>{let trimmedValue=trimQuotes(str2);return includesQuotes(str2)||Number.isNaN(Number(trimmedValue))?trimmedValue:Number(trimmedValue)};var convertSig=type=>{switch(type.type){case"function":return {name:"function"};case"object":let values={};return type.signature.properties.forEach(prop=>{values[prop.key]=convert(prop.value);}),{name:"object",value:values};default:throw new Error(`Unknown: ${type}`)}},convert=type=>{let{name,raw}=type,base={};switch(typeof raw<"u"&&(base.raw=raw),type.name){case"string":case"number":case"symbol":case"boolean":return {...base,name};case"Array":return {...base,name:"array",value:type.elements.map(convert)};case"signature":return {...base,...convertSig(type)};case"union":let result;return type.elements.every(element=>element.name==="literal")?result={...base,name:"enum",value:type.elements.map(v=>parseLiteral(v.value))}:result={...base,name,value:type.elements.map(convert)},result;case"intersection":return {...base,name,value:type.elements.map(convert)};default:return {...base,name:"other",value:name}}};var isLiteral=type=>type.name==="literal",toEnumOption=element=>element.value.replace(/['|"]/g,""),convertSig2=type=>{switch(type.type){case"function":return {name:"function"};case"object":let values={};return type.signature.properties.forEach(prop=>{values[prop.key]=convert2(prop.value);}),{name:"object",value:values};default:throw new Error(`Unknown: ${type}`)}},convert2=type=>{let{name,raw}=type,base={};switch(typeof raw<"u"&&(base.raw=raw),type.name){case"literal":return {...base,name:"other",value:type.value};case"string":case"number":case"symbol":case"boolean":return {...base,name};case"Array":return {...base,name:"array",value:type.elements.map(convert2)};case"signature":return {...base,...convertSig2(type)};case"union":return type.elements.every(isLiteral)?{...base,name:"enum",value:type.elements.map(toEnumOption)}:{...base,name,value:type.elements.map(convert2)};case"intersection":return {...base,name,value:type.elements.map(convert2)};default:return {...base,name:"other",value:name}}};var SIGNATURE_REGEXP=/^\(.*\) => /,convert3=type=>{let{name,raw,computed,value}=type,base={};switch(typeof raw<"u"&&(base.raw=raw),name){case"enum":{let values2=computed?value:value.map(v=>parseLiteral(v.value));return {...base,name,value:values2}}case"string":case"number":case"symbol":return {...base,name};case"func":return {...base,name:"function"};case"bool":case"boolean":return {...base,name:"boolean"};case"arrayOf":case"array":return {...base,name:"array",value:value&&convert3(value)};case"object":return {...base,name};case"objectOf":return {...base,name,value:convert3(value)};case"shape":case"exact":let values=mapValues(value,field=>convert3(field));return {...base,name:"object",value:values};case"union":return {...base,name:"union",value:value.map(v=>convert3(v))};case"instanceOf":case"element":case"elementType":default:{if(name?.indexOf("|")>0)try{let literalValues=name.split("|").map(v=>JSON.parse(v));return {...base,name:"enum",value:literalValues}}catch{}let otherVal=value?`${name}(${value})`:name,otherName=SIGNATURE_REGEXP.test(name)?"function":"other";return {...base,name:otherName,value:otherVal}}}};var convert4=docgenInfo=>{let{type,tsType,flowType}=docgenInfo;return type!=null?convert3(type):tsType!=null?convert(tsType):flowType!=null?convert2(flowType):null};var TypeSystem=(TypeSystem2=>(TypeSystem2.JAVASCRIPT="JavaScript",TypeSystem2.FLOW="Flow",TypeSystem2.TYPESCRIPT="TypeScript",TypeSystem2.UNKNOWN="Unknown",TypeSystem2))(TypeSystem||{});var BLACKLIST=(/* unused pure expression or super */ null && (["null","undefined"]));function isDefaultValueBlacklisted(value){return BLACKLIST.some(x=>x===value)}var str=obj=>{if(!obj)return "";if(typeof obj=="string")return obj;throw new Error(`Description: expected string, got: ${JSON.stringify(obj)}`)};function hasDocgen(component){return !!component.__docgenInfo}function isValidDocgenSection(docgenSection){return docgenSection!=null&&Object.keys(docgenSection).length>0}function getDocgenSection(component,section){return hasDocgen(component)?component.__docgenInfo[section]:null}function getDocgenDescription(component){return hasDocgen(component)&&str(component.__docgenInfo.description)}function containsJsDoc(value){return value!=null&&value.includes("@")}function parse(content,tags){let ast;try{ast=doctrine.parse(content,{tags,sloppy:!0});}catch(e){throw console.error(e),new Error("Cannot parse JSDoc tags.")}return ast}var DEFAULT_OPTIONS={tags:["param","arg","argument","returns","ignore","deprecated"]},parseJsDoc=(value,options=DEFAULT_OPTIONS)=>{if(!containsJsDoc(value))return {includesJsDoc:!1,ignore:!1};let jsDocAst=parse(value,options.tags),extractedTags=extractJsDocTags(jsDocAst);return extractedTags.ignore?{includesJsDoc:!0,ignore:!0}:{includesJsDoc:!0,ignore:!1,description:jsDocAst.description,extractedTags}};function extractJsDocTags(ast){let extractedTags={params:null,deprecated:null,returns:null,ignore:!1};for(let i=0;i<ast.tags.length;i+=1){let tag=ast.tags[i];if(tag.title==="ignore"){extractedTags.ignore=!0;break}else switch(tag.title){case"param":case"arg":case"argument":{let paramTag=extractParam(tag);paramTag!=null&&(extractedTags.params==null&&(extractedTags.params=[]),extractedTags.params.push(paramTag));break}case"deprecated":{let deprecatedTag=extractDeprecated(tag);deprecatedTag!=null&&(extractedTags.deprecated=deprecatedTag);break}case"returns":{let returnsTag=extractReturns(tag);returnsTag!=null&&(extractedTags.returns=returnsTag);break}}}return extractedTags}function extractParam(tag){let paramName=tag.name;return paramName!=null&&paramName!=="null-null"?{name:tag.name,type:tag.type,description:tag.description,getPrettyName:()=>paramName.includes("null")?paramName.replace("-null","").replace(".null",""):tag.name,getTypeName:()=>tag.type!=null?extractTypeName(tag.type):null}:null}function extractDeprecated(tag){return tag.title!=null?tag.description:null}function extractReturns(tag){return tag.type!=null?{type:tag.type,description:tag.description,getTypeName:()=>extractTypeName(tag.type)}:null}function extractTypeName(type){return type.type==="NameExpression"?type.name:type.type==="RecordType"?`({${type.fields.map(field=>{if(field.value!=null){let valueTypeName=extractTypeName(field.value);return `${field.key}: ${valueTypeName}`}return field.key}).join(", ")}})`:type.type==="UnionType"?`(${type.elements.map(extractTypeName).join("|")})`:type.type==="ArrayType"?"[]":type.type==="TypeApplication"&&type.expression!=null&&type.expression.name==="Array"?`${extractTypeName(type.applications[0])}[]`:type.type==="NullableType"||type.type==="NonNullableType"||type.type==="OptionalType"?extractTypeName(type.expression):type.type==="AllLiteral"?"any":null}var MAX_TYPE_SUMMARY_LENGTH=90,MAX_DEFAULT_VALUE_SUMMARY_LENGTH=50;function isTooLongForTypeSummary(value){return value.length>90}function isTooLongForDefaultValueSummary(value){return value.length>50}function createSummaryValue(summary,detail){return summary===detail?{summary}:{summary,detail}}var normalizeNewlines=string=>string.replace(/\\r\\n/g,"\\n");function generateUnionElement({name,value,elements,raw}){return value??(elements!=null?elements.map(generateUnionElement).join(" | "):raw??name)}function generateUnion({name,raw,elements}){return elements!=null?createSummaryValue(elements.map(generateUnionElement).join(" | ")):raw!=null?createSummaryValue(raw.replace(/^\|\s*/,"")):createSummaryValue(name)}function generateFuncSignature({type,raw}){return raw!=null?createSummaryValue(raw):createSummaryValue(type)}function generateObjectSignature({type,raw}){return raw!=null?isTooLongForTypeSummary(raw)?createSummaryValue(type,raw):createSummaryValue(raw):createSummaryValue(type)}function generateSignature(flowType){let{type}=flowType;return type==="object"?generateObjectSignature(flowType):generateFuncSignature(flowType)}function generateDefault({name,raw}){return raw!=null?isTooLongForTypeSummary(raw)?createSummaryValue(name,raw):createSummaryValue(raw):createSummaryValue(name)}function createType(type){if(type==null)return null;switch(type.name){case"union":return generateUnion(type);case"signature":return generateSignature(type);default:return generateDefault(type)}}function createDefaultValue(defaultValue,type){if(defaultValue!=null){let{value}=defaultValue;if(!isDefaultValueBlacklisted(value))return isTooLongForDefaultValueSummary(value)?createSummaryValue(type.name,value):createSummaryValue(value)}return null}var createFlowPropDef=(propName,docgenInfo)=>{let{flowType,description,required,defaultValue}=docgenInfo;return {name:propName,type:createType(flowType),required,description,defaultValue:createDefaultValue(defaultValue,flowType)}};function createType2({tsType,required}){if(tsType==null)return null;let typeName=tsType.name;return required||(typeName=typeName.replace(" | undefined","")),createSummaryValue(["Array","Record","signature"].includes(tsType.name)?tsType.raw:typeName)}function createDefaultValue2({defaultValue}){if(defaultValue!=null){let{value}=defaultValue;if(!isDefaultValueBlacklisted(value))return createSummaryValue(value)}return null}var createTsPropDef=(propName,docgenInfo)=>{let{description,required}=docgenInfo;return {name:propName,type:createType2(docgenInfo),required,description,defaultValue:createDefaultValue2(docgenInfo)}};function createType3(type){return type!=null?createSummaryValue(type.name):null}function isReactDocgenTypescript(defaultValue){let{computed,func}=defaultValue;return typeof computed>"u"&&typeof func>"u"}function isStringValued(type){return type?type.name==="string"?!0:type.name==="enum"?Array.isArray(type.value)&&type.value.every(({value:tv})=>typeof tv=="string"&&tv[0]==='"'&&tv[tv.length-1]==='"'):!1:!1}function createDefaultValue3(defaultValue,type){if(defaultValue!=null){let{value}=defaultValue;if(!isDefaultValueBlacklisted(value))return isReactDocgenTypescript(defaultValue)&&isStringValued(type)?createSummaryValue(JSON.stringify(value)):createSummaryValue(value)}return null}function createBasicPropDef(name,type,docgenInfo){let{description,required,defaultValue}=docgenInfo;return {name,type:createType3(type),required,description,defaultValue:createDefaultValue3(defaultValue,type)}}function applyJsDocResult(propDef,jsDocParsingResult){if(jsDocParsingResult.includesJsDoc){let{description,extractedTags}=jsDocParsingResult;description!=null&&(propDef.description=jsDocParsingResult.description);let value={...extractedTags,params:extractedTags?.params?.map(x=>({name:x.getPrettyName(),description:x.description}))};Object.values(value).filter(Boolean).length>0&&(propDef.jsDocTags=value);}return propDef}var javaScriptFactory=(propName,docgenInfo,jsDocParsingResult)=>{let propDef=createBasicPropDef(propName,docgenInfo.type,docgenInfo);return propDef.sbType=convert4(docgenInfo),applyJsDocResult(propDef,jsDocParsingResult)},tsFactory=(propName,docgenInfo,jsDocParsingResult)=>{let propDef=createTsPropDef(propName,docgenInfo);return propDef.sbType=convert4(docgenInfo),applyJsDocResult(propDef,jsDocParsingResult)},flowFactory=(propName,docgenInfo,jsDocParsingResult)=>{let propDef=createFlowPropDef(propName,docgenInfo);return propDef.sbType=convert4(docgenInfo),applyJsDocResult(propDef,jsDocParsingResult)},unknownFactory=(propName,docgenInfo,jsDocParsingResult)=>{let propDef=createBasicPropDef(propName,{name:"unknown"},docgenInfo);return applyJsDocResult(propDef,jsDocParsingResult)},getPropDefFactory=typeSystem=>{switch(typeSystem){case"JavaScript":return javaScriptFactory;case"TypeScript":return tsFactory;case"Flow":return flowFactory;default:return unknownFactory}};var getTypeSystem=docgenInfo=>docgenInfo.type!=null?"JavaScript":docgenInfo.flowType!=null?"Flow":docgenInfo.tsType!=null?"TypeScript":"Unknown",extractComponentSectionArray=docgenSection=>{let typeSystem=getTypeSystem(docgenSection[0]),createPropDef=getPropDefFactory(typeSystem);return docgenSection.map(item=>{let sanitizedItem=item;return item.type?.elements&&(sanitizedItem={...item,type:{...item.type,value:item.type.elements}}),extractProp(sanitizedItem.name,sanitizedItem,typeSystem,createPropDef)})},extractComponentSectionObject=docgenSection=>{let docgenPropsKeys=Object.keys(docgenSection),typeSystem=getTypeSystem(docgenSection[docgenPropsKeys[0]]),createPropDef=getPropDefFactory(typeSystem);return docgenPropsKeys.map(propName=>{let docgenInfo=docgenSection[propName];return docgenInfo!=null?extractProp(propName,docgenInfo,typeSystem,createPropDef):null}).filter(Boolean)},extractComponentProps=(component,section)=>{let docgenSection=getDocgenSection(component,section);return isValidDocgenSection(docgenSection)?Array.isArray(docgenSection)?extractComponentSectionArray(docgenSection):extractComponentSectionObject(docgenSection):[]};function extractProp(propName,docgenInfo,typeSystem,createPropDef){let jsDocParsingResult=parseJsDoc(docgenInfo.description);return jsDocParsingResult.includesJsDoc&&jsDocParsingResult.ignore?null:{propDef:createPropDef(propName,docgenInfo,jsDocParsingResult),jsDocTags:jsDocParsingResult.extractedTags,docgenInfo,typeSystem}}function extractComponentDescription(component){return component!=null&&getDocgenDescription(component)}var enhanceArgTypes=context=>{let{component,argTypes:userArgTypes,parameters:{docs={}}}=context,{extractArgTypes}=docs,extractedArgTypes=extractArgTypes&&component?extractArgTypes(component):{};return extractedArgTypes?(0,_storybook_preview_api__WEBPACK_IMPORTED_MODULE_2__.combineParameters)(extractedArgTypes,userArgTypes):userArgTypes};var ADDON_ID="storybook/docs",PANEL_ID=(/* unused pure expression or super */ null && (`${ADDON_ID}/panel`)),PARAM_KEY="docs",SNIPPET_RENDERED=`${ADDON_ID}/snippet-rendered`,SourceType=(SourceType2=>(SourceType2.AUTO="auto",SourceType2.CODE="code",SourceType2.DYNAMIC="dynamic",SourceType2))(SourceType||{});var packageRe=/(addons\/|addon-|addon-essentials\/)(docs|controls)/,hasDocsOrControls=options=>options.presetsList?.some(preset=>packageRe.test(preset.name));




/***/ }),

/***/ "../../../node_modules/@storybook/html/preview.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  argTypesEnhancers: () => (/* reexport */ argTypesEnhancers),
  decorators: () => (/* reexport */ decorators),
  parameters: () => (/* reexport */ parameters2),
  render: () => (/* reexport */ render),
  renderToCanvas: () => (/* reexport */ renderToCanvas)
});

// EXTERNAL MODULE: external "__STORYBOOK_MODULE_GLOBAL__"
var external_STORYBOOK_MODULE_GLOBAL_ = __webpack_require__("@storybook/global");
// EXTERNAL MODULE: ../../../node_modules/ts-dedent/esm/index.js
var esm = __webpack_require__("../../../node_modules/ts-dedent/esm/index.js");
// EXTERNAL MODULE: external "__STORYBOOK_MODULE_PREVIEW_API__"
var external_STORYBOOK_MODULE_PREVIEW_API_ = __webpack_require__("@storybook/preview-api");
;// CONCATENATED MODULE: ../../../node_modules/@storybook/html/dist/chunk-JHBKUHDQ.mjs




var {Node}=external_STORYBOOK_MODULE_GLOBAL_.global,render=(args,context)=>{let{id,component:Component}=context;if(typeof Component=="string"){let output=Component;return Object.keys(args).forEach(key=>{output=output.replace(`{{${key}}}`,args[key]);}),output}if(Component instanceof HTMLElement){let output=Component.cloneNode(!0);return Object.keys(args).forEach(key=>{output.setAttribute(key,typeof args[key]=="string"?args[key]:JSON.stringify(args[key]));}),output}if(typeof Component=="function")return Component(args,context);throw console.warn((0,esm/* dedent */.Z)`
    Storybook's HTML renderer only supports rendering DOM elements and strings.
    Received: ${Component}
  `),new Error(`Unable to render story ${id}`)};function renderToCanvas({storyFn,kind,name,showMain,showError,forceRemount},canvasElement){let element=storyFn();if(showMain(),typeof element=="string")canvasElement.innerHTML=element,(0,external_STORYBOOK_MODULE_PREVIEW_API_.simulatePageLoad)(canvasElement);else if(element instanceof Node){if(canvasElement.firstChild===element&&forceRemount===!1)return;canvasElement.innerHTML="",canvasElement.appendChild(element),(0,external_STORYBOOK_MODULE_PREVIEW_API_.simulateDOMContentLoaded)();}else showError({title:`Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`,description:(0,esm/* dedent */.Z)`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      `});}



// EXTERNAL MODULE: ../../../node_modules/@storybook/docs-tools/dist/index.mjs
var dist = __webpack_require__("../../../node_modules/@storybook/docs-tools/dist/index.mjs");
;// CONCATENATED MODULE: ../../../node_modules/@storybook/html/dist/config.mjs




function skipSourceRender(context){let sourceParams=context?.parameters.docs?.source,isArgsStory=context?.parameters.__isArgsStory;return sourceParams?.type===dist/* SourceType */.PO.DYNAMIC?!1:!isArgsStory||sourceParams?.code||sourceParams?.type===dist/* SourceType */.PO.CODE}function sourceDecorator(storyFn,context){let story=storyFn(),renderedForSource=context?.parameters.docs?.source?.excludeDecorators?context.originalStoryFn(context.args,context):story,source;return skipSourceRender(context)||(typeof renderedForSource=="string"?source=renderedForSource:renderedForSource instanceof Element&&(source=renderedForSource.outerHTML)),(0,external_STORYBOOK_MODULE_PREVIEW_API_.useEffect)(()=>{let{id,unmappedArgs}=context;source&&external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel().emit(dist/* SNIPPET_RENDERED */.g,{id,args:unmappedArgs,source});}),story}var decorators=[sourceDecorator],parameters={docs:{story:{inline:!0},source:{type:dist/* SourceType */.PO.DYNAMIC,language:"html",code:void 0,excludeDecorators:void 0}}},argTypesEnhancers=[dist/* enhanceArgTypes */.rS];var parameters2={renderer:"html",...parameters};



;// CONCATENATED MODULE: ../../../node_modules/@storybook/html/preview.js



/***/ }),

/***/ "../../../node_modules/@storybook/theming/dist/chunk-E56DBAEL.mjs":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $_: () => (/* binding */ color),
/* harmony export */   Dz: () => (/* binding */ light_default),
/* harmony export */   Ee: () => (/* binding */ __commonJS),
/* harmony export */   Oq: () => (/* binding */ background),
/* harmony export */   Q$: () => (/* binding */ getPreferredColorScheme),
/* harmony export */   TE: () => (/* binding */ mkColor),
/* harmony export */   cp: () => (/* binding */ typography),
/* harmony export */   j6: () => (/* binding */ curriedOpacify$1),
/* harmony export */   jm: () => (/* binding */ _extends),
/* harmony export */   np: () => (/* binding */ themes),
/* harmony export */   tG: () => (/* binding */ lightenColor),
/* harmony export */   v: () => (/* binding */ __toESM)
/* harmony export */ });
/* unused harmony exports create, darkenColor */
/* harmony import */ var _storybook_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("@storybook/global");
/* harmony import */ var _storybook_global__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_storybook_global__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _storybook_client_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("@storybook/client-logger");
/* harmony import */ var _storybook_client_logger__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_storybook_client_logger__WEBPACK_IMPORTED_MODULE_1__);



var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty;var __commonJS=(cb,mod)=>function(){return mod||(0, cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:!0}):target,mod));function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);}return target},_extends.apply(this,arguments)}function _assertThisInitialized(self){if(self===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return self}function _setPrototypeOf(o,p){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(o2,p2){return o2.__proto__=p2,o2},_setPrototypeOf(o,p)}function _inheritsLoose(subClass,superClass){subClass.prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,_setPrototypeOf(subClass,superClass);}function _getPrototypeOf(o){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(o2){return o2.__proto__||Object.getPrototypeOf(o2)},_getPrototypeOf(o)}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1}function _isNativeReflectConstruct(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return !1;if(typeof Proxy=="function")return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return !1}}function _construct(Parent,args,Class){return _isNativeReflectConstruct()?_construct=Reflect.construct.bind():_construct=function(Parent2,args2,Class2){var a=[null];a.push.apply(a,args2);var Constructor=Function.bind.apply(Parent2,a),instance=new Constructor;return Class2&&_setPrototypeOf(instance,Class2.prototype),instance},_construct.apply(null,arguments)}function _wrapNativeSuper(Class){var _cache=typeof Map=="function"?new Map:void 0;return _wrapNativeSuper=function(Class2){if(Class2===null||!_isNativeFunction(Class2))return Class2;if(typeof Class2!="function")throw new TypeError("Super expression must either be null or a function");if(typeof _cache<"u"){if(_cache.has(Class2))return _cache.get(Class2);_cache.set(Class2,Wrapper);}function Wrapper(){return _construct(Class2,arguments,_getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(Class2.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(Wrapper,Class2)},_wrapNativeSuper(Class)}var ERRORS={1:`Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).

`,2:`Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).

`,3:`Passed an incorrect argument to a color function, please pass a string representation of a color.

`,4:`Couldn't generate valid rgb string from %s, it returned %s.

`,5:`Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.

`,6:`Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).

`,7:`Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).

`,8:`Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.

`,9:`Please provide a number of steps to the modularScale helper.

`,10:`Please pass a number or one of the predefined scales to the modularScale helper as the ratio.

`,11:`Invalid value passed as base to modularScale, expected number or em string but got "%s"

`,12:`Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.

`,13:`Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.

`,14:`Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.

`,15:`Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.

`,16:`You must provide a template to this method.

`,17:`You passed an unsupported selector state to this method.

`,18:`minScreen and maxScreen must be provided as stringified numbers with the same units.

`,19:`fromSize and toSize must be provided as stringified numbers with the same units.

`,20:`expects either an array of objects or a single object with the properties prop, fromSize, and toSize.

`,21:"expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",22:"expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",23:`fontFace expects a name of a font-family.

`,24:`fontFace expects either the path to the font file(s) or a name of a local copy.

`,25:`fontFace expects localFonts to be an array.

`,26:`fontFace expects fileFormats to be an array.

`,27:`radialGradient requries at least 2 color-stops to properly render.

`,28:`Please supply a filename to retinaImage() as the first argument.

`,29:`Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.

`,30:"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",31:`The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation

`,32:`To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')

`,33:`The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation

`,34:`borderRadius expects a radius value as a string or number as the second argument.

`,35:`borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.

`,36:`Property must be a string value.

`,37:`Syntax Error at %s.

`,38:`Formula contains a function that needs parentheses at %s.

`,39:`Formula is missing closing parenthesis at %s.

`,40:`Formula has too many closing parentheses at %s.

`,41:`All values in a formula must have the same unit or be unitless.

`,42:`Please provide a number of steps to the modularScale helper.

`,43:`Please pass a number or one of the predefined scales to the modularScale helper as the ratio.

`,44:`Invalid value passed as base to modularScale, expected number or em/rem string but got %s.

`,45:`Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.

`,46:`Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.

`,47:`minScreen and maxScreen must be provided as stringified numbers with the same units.

`,48:`fromSize and toSize must be provided as stringified numbers with the same units.

`,49:`Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.

`,50:`Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.

`,51:`Expects the first argument object to have the properties prop, fromSize, and toSize.

`,52:`fontFace expects either the path to the font file(s) or a name of a local copy.

`,53:`fontFace expects localFonts to be an array.

`,54:`fontFace expects fileFormats to be an array.

`,55:`fontFace expects a name of a font-family.

`,56:`linearGradient requries at least 2 color-stops to properly render.

`,57:`radialGradient requries at least 2 color-stops to properly render.

`,58:`Please supply a filename to retinaImage() as the first argument.

`,59:`Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.

`,60:"Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",61:`Property must be a string value.

`,62:`borderRadius expects a radius value as a string or number as the second argument.

`,63:`borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.

`,64:`The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.

`,65:`To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').

`,66:`The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.

`,67:`You must provide a template to this method.

`,68:`You passed an unsupported selector state to this method.

`,69:`Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.

`,70:`Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.

`,71:`Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.

`,72:`Passed invalid base value %s to %s(), please pass a value like "12px" or 12.

`,73:`Please provide a valid CSS variable.

`,74:`CSS variable not found and no default was provided.

`,75:`important requires a valid style object, got a %s instead.

`,76:`fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.

`,77:`remToPx expects a value in "rem" but you provided it in "%s".

`,78:`base must be set in "px" or "%" but you set it in "%s".
`};function format(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];var a=args[0],b=[],c;for(c=1;c<args.length;c+=1)b.push(args[c]);return b.forEach(function(d){a=a.replace(/%[a-z]/,d);}),a}var PolishedError=function(_Error){_inheritsLoose(PolishedError2,_Error);function PolishedError2(code){for(var _this,_len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++)args[_key2-1]=arguments[_key2];return _this=_Error.call(this,format.apply(void 0,[ERRORS[code]].concat(args)))||this,_assertThisInitialized(_this)}return PolishedError2}(_wrapNativeSuper(Error));function colorToInt(color2){return Math.round(color2*255)}function convertToInt(red,green,blue){return colorToInt(red)+","+colorToInt(green)+","+colorToInt(blue)}function hslToRgb(hue,saturation,lightness,convert){if(convert===void 0&&(convert=convertToInt),saturation===0)return convert(lightness,lightness,lightness);var huePrime=(hue%360+360)%360/60,chroma=(1-Math.abs(2*lightness-1))*saturation,secondComponent=chroma*(1-Math.abs(huePrime%2-1)),red=0,green=0,blue=0;huePrime>=0&&huePrime<1?(red=chroma,green=secondComponent):huePrime>=1&&huePrime<2?(red=secondComponent,green=chroma):huePrime>=2&&huePrime<3?(green=chroma,blue=secondComponent):huePrime>=3&&huePrime<4?(green=secondComponent,blue=chroma):huePrime>=4&&huePrime<5?(red=secondComponent,blue=chroma):huePrime>=5&&huePrime<6&&(red=chroma,blue=secondComponent);var lightnessModification=lightness-chroma/2,finalRed=red+lightnessModification,finalGreen=green+lightnessModification,finalBlue=blue+lightnessModification;return convert(finalRed,finalGreen,finalBlue)}var namedColorMap={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"639",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"};function nameToHex(color2){if(typeof color2!="string")return color2;var normalizedColorName=color2.toLowerCase();return namedColorMap[normalizedColorName]?"#"+namedColorMap[normalizedColorName]:color2}var hexRegex=/^#[a-fA-F0-9]{6}$/,hexRgbaRegex=/^#[a-fA-F0-9]{8}$/,reducedHexRegex=/^#[a-fA-F0-9]{3}$/,reducedRgbaHexRegex=/^#[a-fA-F0-9]{4}$/,rgbRegex=/^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i,rgbaRegex=/^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i,hslRegex=/^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i,hslaRegex=/^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;function parseToRgb(color2){if(typeof color2!="string")throw new PolishedError(3);var normalizedColor=nameToHex(color2);if(normalizedColor.match(hexRegex))return {red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16)};if(normalizedColor.match(hexRgbaRegex)){var alpha=parseFloat((parseInt(""+normalizedColor[7]+normalizedColor[8],16)/255).toFixed(2));return {red:parseInt(""+normalizedColor[1]+normalizedColor[2],16),green:parseInt(""+normalizedColor[3]+normalizedColor[4],16),blue:parseInt(""+normalizedColor[5]+normalizedColor[6],16),alpha}}if(normalizedColor.match(reducedHexRegex))return {red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16)};if(normalizedColor.match(reducedRgbaHexRegex)){var _alpha=parseFloat((parseInt(""+normalizedColor[4]+normalizedColor[4],16)/255).toFixed(2));return {red:parseInt(""+normalizedColor[1]+normalizedColor[1],16),green:parseInt(""+normalizedColor[2]+normalizedColor[2],16),blue:parseInt(""+normalizedColor[3]+normalizedColor[3],16),alpha:_alpha}}var rgbMatched=rgbRegex.exec(normalizedColor);if(rgbMatched)return {red:parseInt(""+rgbMatched[1],10),green:parseInt(""+rgbMatched[2],10),blue:parseInt(""+rgbMatched[3],10)};var rgbaMatched=rgbaRegex.exec(normalizedColor.substring(0,50));if(rgbaMatched)return {red:parseInt(""+rgbaMatched[1],10),green:parseInt(""+rgbaMatched[2],10),blue:parseInt(""+rgbaMatched[3],10),alpha:parseFloat(""+rgbaMatched[4])>1?parseFloat(""+rgbaMatched[4])/100:parseFloat(""+rgbaMatched[4])};var hslMatched=hslRegex.exec(normalizedColor);if(hslMatched){var hue=parseInt(""+hslMatched[1],10),saturation=parseInt(""+hslMatched[2],10)/100,lightness=parseInt(""+hslMatched[3],10)/100,rgbColorString="rgb("+hslToRgb(hue,saturation,lightness)+")",hslRgbMatched=rgbRegex.exec(rgbColorString);if(!hslRgbMatched)throw new PolishedError(4,normalizedColor,rgbColorString);return {red:parseInt(""+hslRgbMatched[1],10),green:parseInt(""+hslRgbMatched[2],10),blue:parseInt(""+hslRgbMatched[3],10)}}var hslaMatched=hslaRegex.exec(normalizedColor.substring(0,50));if(hslaMatched){var _hue=parseInt(""+hslaMatched[1],10),_saturation=parseInt(""+hslaMatched[2],10)/100,_lightness=parseInt(""+hslaMatched[3],10)/100,_rgbColorString="rgb("+hslToRgb(_hue,_saturation,_lightness)+")",_hslRgbMatched=rgbRegex.exec(_rgbColorString);if(!_hslRgbMatched)throw new PolishedError(4,normalizedColor,_rgbColorString);return {red:parseInt(""+_hslRgbMatched[1],10),green:parseInt(""+_hslRgbMatched[2],10),blue:parseInt(""+_hslRgbMatched[3],10),alpha:parseFloat(""+hslaMatched[4])>1?parseFloat(""+hslaMatched[4])/100:parseFloat(""+hslaMatched[4])}}throw new PolishedError(5)}function rgbToHsl(color2){var red=color2.red/255,green=color2.green/255,blue=color2.blue/255,max=Math.max(red,green,blue),min=Math.min(red,green,blue),lightness=(max+min)/2;if(max===min)return color2.alpha!==void 0?{hue:0,saturation:0,lightness,alpha:color2.alpha}:{hue:0,saturation:0,lightness};var hue,delta=max-min,saturation=lightness>.5?delta/(2-max-min):delta/(max+min);switch(max){case red:hue=(green-blue)/delta+(green<blue?6:0);break;case green:hue=(blue-red)/delta+2;break;default:hue=(red-green)/delta+4;break}return hue*=60,color2.alpha!==void 0?{hue,saturation,lightness,alpha:color2.alpha}:{hue,saturation,lightness}}function parseToHsl(color2){return rgbToHsl(parseToRgb(color2))}var reduceHexValue=function(value){return value.length===7&&value[1]===value[2]&&value[3]===value[4]&&value[5]===value[6]?"#"+value[1]+value[3]+value[5]:value},reduceHexValue$1=reduceHexValue;function numberToHex(value){var hex=value.toString(16);return hex.length===1?"0"+hex:hex}function colorToHex(color2){return numberToHex(Math.round(color2*255))}function convertToHex(red,green,blue){return reduceHexValue$1("#"+colorToHex(red)+colorToHex(green)+colorToHex(blue))}function hslToHex(hue,saturation,lightness){return hslToRgb(hue,saturation,lightness,convertToHex)}function hsl(value,saturation,lightness){if(typeof value=="number"&&typeof saturation=="number"&&typeof lightness=="number")return hslToHex(value,saturation,lightness);if(typeof value=="object"&&saturation===void 0&&lightness===void 0)return hslToHex(value.hue,value.saturation,value.lightness);throw new PolishedError(1)}function hsla(value,saturation,lightness,alpha){if(typeof value=="number"&&typeof saturation=="number"&&typeof lightness=="number"&&typeof alpha=="number")return alpha>=1?hslToHex(value,saturation,lightness):"rgba("+hslToRgb(value,saturation,lightness)+","+alpha+")";if(typeof value=="object"&&saturation===void 0&&lightness===void 0&&alpha===void 0)return value.alpha>=1?hslToHex(value.hue,value.saturation,value.lightness):"rgba("+hslToRgb(value.hue,value.saturation,value.lightness)+","+value.alpha+")";throw new PolishedError(2)}function rgb(value,green,blue){if(typeof value=="number"&&typeof green=="number"&&typeof blue=="number")return reduceHexValue$1("#"+numberToHex(value)+numberToHex(green)+numberToHex(blue));if(typeof value=="object"&&green===void 0&&blue===void 0)return reduceHexValue$1("#"+numberToHex(value.red)+numberToHex(value.green)+numberToHex(value.blue));throw new PolishedError(6)}function rgba(firstValue,secondValue,thirdValue,fourthValue){if(typeof firstValue=="string"&&typeof secondValue=="number"){var rgbValue=parseToRgb(firstValue);return "rgba("+rgbValue.red+","+rgbValue.green+","+rgbValue.blue+","+secondValue+")"}else {if(typeof firstValue=="number"&&typeof secondValue=="number"&&typeof thirdValue=="number"&&typeof fourthValue=="number")return fourthValue>=1?rgb(firstValue,secondValue,thirdValue):"rgba("+firstValue+","+secondValue+","+thirdValue+","+fourthValue+")";if(typeof firstValue=="object"&&secondValue===void 0&&thirdValue===void 0&&fourthValue===void 0)return firstValue.alpha>=1?rgb(firstValue.red,firstValue.green,firstValue.blue):"rgba("+firstValue.red+","+firstValue.green+","+firstValue.blue+","+firstValue.alpha+")"}throw new PolishedError(7)}var isRgb=function(color2){return typeof color2.red=="number"&&typeof color2.green=="number"&&typeof color2.blue=="number"&&(typeof color2.alpha!="number"||typeof color2.alpha>"u")},isRgba=function(color2){return typeof color2.red=="number"&&typeof color2.green=="number"&&typeof color2.blue=="number"&&typeof color2.alpha=="number"},isHsl=function(color2){return typeof color2.hue=="number"&&typeof color2.saturation=="number"&&typeof color2.lightness=="number"&&(typeof color2.alpha!="number"||typeof color2.alpha>"u")},isHsla=function(color2){return typeof color2.hue=="number"&&typeof color2.saturation=="number"&&typeof color2.lightness=="number"&&typeof color2.alpha=="number"};function toColorString(color2){if(typeof color2!="object")throw new PolishedError(8);if(isRgba(color2))return rgba(color2);if(isRgb(color2))return rgb(color2);if(isHsla(color2))return hsla(color2);if(isHsl(color2))return hsl(color2);throw new PolishedError(8)}function curried(f,length,acc){return function(){var combined=acc.concat(Array.prototype.slice.call(arguments));return combined.length>=length?f.apply(this,combined):curried(f,length,combined)}}function curry(f){return curried(f,f.length,[])}function guard(lowerBoundary,upperBoundary,value){return Math.max(lowerBoundary,Math.min(upperBoundary,value))}function darken(amount,color2){if(color2==="transparent")return color2;var hslColor=parseToHsl(color2);return toColorString(_extends({},hslColor,{lightness:guard(0,1,hslColor.lightness-parseFloat(amount))}))}var curriedDarken=curry(darken),curriedDarken$1=curriedDarken;function lighten(amount,color2){if(color2==="transparent")return color2;var hslColor=parseToHsl(color2);return toColorString(_extends({},hslColor,{lightness:guard(0,1,hslColor.lightness+parseFloat(amount))}))}var curriedLighten=curry(lighten),curriedLighten$1=curriedLighten;function opacify(amount,color2){if(color2==="transparent")return color2;var parsedColor=parseToRgb(color2),alpha=typeof parsedColor.alpha=="number"?parsedColor.alpha:1,colorWithAlpha=_extends({},parsedColor,{alpha:guard(0,1,(alpha*100+parseFloat(amount)*100)/100)});return rgba(colorWithAlpha)}var curriedOpacify=curry(opacify),curriedOpacify$1=curriedOpacify;function transparentize(amount,color2){if(color2==="transparent")return color2;var parsedColor=parseToRgb(color2),alpha=typeof parsedColor.alpha=="number"?parsedColor.alpha:1,colorWithAlpha=_extends({},parsedColor,{alpha:guard(0,1,+(alpha*100-parseFloat(amount)*100).toFixed(2)/100)});return rgba(colorWithAlpha)}var curriedTransparentize=curry(transparentize),curriedTransparentize$1=curriedTransparentize;var color={primary:"#FF4785",secondary:"#029CFD",tertiary:"#FAFBFC",ancillary:"#22a699",orange:"#FC521F",gold:"#FFAE00",green:"#66BF3C",seafoam:"#37D5D3",purple:"#6F2CAC",ultraviolet:"#2A0481",lightest:"#FFFFFF",lighter:"#F7FAFC",light:"#EEF3F6",mediumlight:"#ECF4F9",medium:"#D9E8F2",mediumdark:"#73828C",dark:"#5C6870",darker:"#454E54",darkest:"#2E3438",border:"hsla(203, 50%, 30%, 0.15)",positive:"#66BF3C",negative:"#FF4400",warning:"#E69D00",critical:"#FFFFFF",defaultText:"#2E3438",inverseText:"#FFFFFF",positiveText:"#448028",negativeText:"#D43900",warningText:"#A15C20"},background={app:"#F6F9FC",bar:color.lightest,content:color.lightest,gridCellSize:10,hoverable:curriedTransparentize$1(.9,color.secondary),positive:"#E1FFD4",negative:"#FEDED2",warning:"#FFF5CF",critical:"#FF4400"},typography={fonts:{base:['"Nunito Sans"',"-apple-system",'".SFNSText-Regular"','"San Francisco"',"BlinkMacSystemFont",'"Segoe UI"','"Helvetica Neue"',"Helvetica","Arial","sans-serif"].join(", "),mono:["ui-monospace","Menlo","Monaco",'"Roboto Mono"','"Oxygen Mono"','"Ubuntu Monospace"','"Source Code Pro"','"Droid Sans Mono"','"Courier New"',"monospace"].join(", ")},weight:{regular:400,bold:700},size:{s1:12,s2:14,s3:16,m1:20,m2:24,m3:28,l1:32,l2:40,l3:48,code:90}};var theme={base:"light",colorPrimary:"#FF4785",colorSecondary:"#029CFD",appBg:background.app,appContentBg:color.lightest,appBorderColor:color.border,appBorderRadius:4,fontBase:typography.fonts.base,fontCode:typography.fonts.mono,textColor:color.darkest,textInverseColor:color.lightest,textMutedColor:color.dark,barTextColor:color.mediumdark,barHoverColor:color.secondary,barSelectedColor:color.secondary,barBg:color.lightest,buttonBg:background.app,buttonBorder:color.medium,booleanBg:color.mediumlight,booleanSelectedBg:color.lightest,inputBg:color.lightest,inputBorder:color.border,inputTextColor:color.darkest,inputBorderRadius:4},light_default=theme;var theme2={base:"dark",colorPrimary:"#FF4785",colorSecondary:"#029CFD",appBg:"#222425",appContentBg:"#1B1C1D",appBorderColor:"rgba(255,255,255,.1)",appBorderRadius:4,fontBase:typography.fonts.base,fontCode:typography.fonts.mono,textColor:"#C9CDCF",textInverseColor:"#222425",textMutedColor:"#798186",barTextColor:"#798186",barHoverColor:color.secondary,barSelectedColor:color.secondary,barBg:"#292C2E",buttonBg:"#222425",buttonBorder:"rgba(255,255,255,.1)",booleanBg:"#222425",booleanSelectedBg:"#2E3438",inputBg:"#1B1C1D",inputBorder:"rgba(255,255,255,.1)",inputTextColor:color.lightest,inputBorderRadius:4},dark_default=theme2;var {window:globalWindow}=_storybook_global__WEBPACK_IMPORTED_MODULE_0__.global,mkColor=color2=>({color:color2}),isColorString=color2=>typeof color2!="string"?(_storybook_client_logger__WEBPACK_IMPORTED_MODULE_1__.logger.warn(`Color passed to theme object should be a string. Instead ${color2}(${typeof color2}) was passed.`),!1):!0,isValidColorForPolished=color2=>!/(gradient|var|calc)/.test(color2),applyPolished=(type,color2)=>type==="darken"?rgba(`${curriedDarken$1(1,color2)}`,.95):type==="lighten"?rgba(`${curriedLighten$1(1,color2)}`,.95):color2,colorFactory=type=>color2=>{if(!isColorString(color2)||!isValidColorForPolished(color2))return color2;try{return applyPolished(type,color2)}catch{return color2}},lightenColor=colorFactory("lighten"),darkenColor=colorFactory("darken"),getPreferredColorScheme=()=>!globalWindow||!globalWindow.matchMedia?"light":globalWindow.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light";var themes={light:light_default,dark:dark_default,normal:light_default},preferredColorScheme=getPreferredColorScheme(),create=(vars={base:preferredColorScheme},rest)=>{let inherit={...themes[preferredColorScheme],...themes[vars.base]||{},...vars,base:themes[vars.base]?vars.base:preferredColorScheme};return {...rest,...inherit,barSelectedColor:vars.barSelectedColor||inherit.colorSecondary}};




/***/ }),

/***/ "../../../node_modules/assert/build/assert.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__("../../../node_modules/process/browser.js");
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b

// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var _require = __webpack_require__("../../../node_modules/assert/build/internal/errors.js"),
  _require$codes = _require.codes,
  ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
  ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
var AssertionError = __webpack_require__("../../../node_modules/assert/build/internal/assert/assertion_error.js");
var _require2 = __webpack_require__("../../../node_modules/util/util.js"),
  inspect = _require2.inspect;
var _require$types = (__webpack_require__("../../../node_modules/util/util.js").types),
  isPromise = _require$types.isPromise,
  isRegExp = _require$types.isRegExp;
var objectAssign = __webpack_require__("../../../node_modules/object.assign/polyfill.js")();
var objectIs = __webpack_require__("../../../node_modules/object-is/polyfill.js")();
var RegExpPrototypeTest = __webpack_require__("../../../node_modules/call-bind/callBound.js")('RegExp.prototype.test');
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;
function lazyLoadComparison() {
  var comparison = __webpack_require__("../../../node_modules/assert/build/internal/util/comparisons.js");
  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
}

// Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = (/* unused pure expression or super */ null && (["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"]));
var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};
var warned = false;

// The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {};

// All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}
function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;
  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }
    if (argsLen === 2) operator = '!=';
  }
  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };
  if (message !== undefined) {
    errArgs.message = message;
  }
  var err = new AssertionError(errArgs);
  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }
  throw err;
}
assert.fail = fail;

// The AssertionError is defined in internal/error.
assert.AssertionError = AssertionError;
function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;
    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }
    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
}

// Pure assertion tests whether a value is truthy, as determined
// by !!value.
function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  innerOk.apply(void 0, [ok, args.length].concat(args));
}
assert.ok = ok;

// The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */
assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  // eslint-disable-next-line eqeqeq
  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
};

// The non-equality assertion tests for whether two objects are not
// equal with !=.
assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  // eslint-disable-next-line eqeqeq
  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
};

// The equivalence assertion tests a deep equality relation.
assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
};

// The non-equivalence assertion tests for any deep inequality.
assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};
assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (isDeepEqual === undefined) lazyLoadComparison();
  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}
assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};
assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }
  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};
var Comparison = /*#__PURE__*/_createClass(function Comparison(obj, keys, actual) {
  var _this = this;
  _classCallCheck(this, Comparison);
  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
});
function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}
function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
    // assert.doesNotThrow does not accept objects.
    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    }

    // Handle primitives properly.
    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }
    var keys = Object.keys(expected);
    // Special handle errors to make sure the name and the message are compared
    // as well.
    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }
    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
        return;
      }
      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  }
  // Guard instanceof against arrow functions as they don't have a prototype.
  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }
  if (Error.isPrototypeOf(expected)) {
    return false;
  }
  return expected.call({}, actual) === true;
}
function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }
  try {
    fn();
  } catch (e) {
    return e;
  }
  return NO_EXCEPTION_SENTINEL;
}
function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.

  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.

  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}
function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;
    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn();
      // Fail in case no promise is returned.
      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }
    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}
function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }
    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }
    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }
  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';
    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }
    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }
  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}
function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;
  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }
  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }
  throw actual;
}
assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};
assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};
assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};
assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }
  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};
assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';
    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }
    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    });

    // Make sure we actually have a stack trace!
    var origStack = err.stack;
    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift();
      // Filter all frames existing in err.stack.
      var tmp1 = newErr.stack.split('\n');
      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);
        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }
      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }
    throw newErr;
  }
};

// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a871df3dfb8ea663ef5e1f8f62701ec51384ecb
function internalMatch(string, regexp, message, fn, fnName) {
  if (!isRegExp(regexp)) {
    throw new ERR_INVALID_ARG_TYPE('regexp', 'RegExp', regexp);
  }
  var match = fnName === 'match';
  if (typeof string !== 'string' || RegExpPrototypeTest(regexp, string) !== match) {
    if (message instanceof Error) {
      throw message;
    }
    var generatedMessage = !message;

    // 'The input was expected to not match the regular expression ' +
    message = message || (typeof string !== 'string' ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? 'The input did not match the regular expression ' : 'The input was expected to not match the regular expression ') + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
    var err = new AssertionError({
      actual: string,
      expected: regexp,
      message: message,
      operator: fnName,
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
}
assert.match = function match(string, regexp, message) {
  internalMatch(string, regexp, message, match, 'match');
};
assert.doesNotMatch = function doesNotMatch(string, regexp, message) {
  internalMatch(string, regexp, message, doesNotMatch, 'doesNotMatch');
};

// Expose a strict only variant of assert
function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }
  innerOk.apply(void 0, [strict, args.length].concat(args));
}
assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ "../../../node_modules/assert/build/internal/assert/assertion_error.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__("../../../node_modules/process/browser.js");
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c



function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _require = __webpack_require__("../../../node_modules/util/util.js"),
  inspect = _require.inspect;
var _require2 = __webpack_require__("../../../node_modules/assert/build/internal/errors.js"),
  ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));
  while (count) {
    str += str;
    count--;
  }
  str += str.substring(0, maxCount - str.length);
  return str;
}
var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
};

// Comparing short primitives should just show === / !== instead of using the
// diff.
var kMaxShortLength = 10;
function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}
function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}
function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = '';

  // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.
  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  }

  // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.
  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length;
    // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.
    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        }
        // Ignore the first characters.
        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  }

  // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).
  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];
  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }
    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }
  var maxLines = Math.max(actualLines.length, expectedLines.length);
  // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n');

    // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.
    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);
      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }
    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }
  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }
  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }
  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;
    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }
        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      }
      // Mark the current line as the last diverging one.
      lastPos = i;
      // Add the expected line to the cache.
      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++;
      // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }
        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      }
      // Mark the current line as the last diverging one.
      lastPos = i;
      // Add the actual line to the result.
      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++;
      // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i];
      // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.
      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine);
      // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //
      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }
      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }
          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        }
        // Mark the current line as the last diverging one.
        lastPos = i;
        // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.
        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2;
        // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = '';
        // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.
        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    }
    // Inspected object to big (Show ~20 rows max)
    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }
  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var AssertionError = /*#__PURE__*/function (_Error, _inspect$custom) {
  _inherits(AssertionError, _Error);
  var _super = _createSuper(AssertionError);
  function AssertionError(options) {
    var _this;
    _classCallCheck(this, AssertionError);
    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }
    var message = options.message,
      operator = options.operator,
      stackStartFn = options.stackStartFn;
    var actual = options.actual,
      expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;
    if (message != null) {
      _this = _super.call(this, String(message));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      }
      // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.
      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }
      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _super.call(this, createErrDiff(actual, expected, operator));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n');

        // In case "actual" is an object, it should not be reference equal.
        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        }

        // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);
          while (res.length > 27) {
            res.pop();
          }
        }

        // Only print a single input.
        if (res.length === 1) {
          _this = _super.call(this, "".concat(base, " ").concat(res[0]));
        } else {
          _this = _super.call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n"));
        }
      } else {
        var _res = inspectValue(actual);
        var other = '';
        var knownOperators = kReadableOperator[operator];
        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));
          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }
          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }
          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }
        _this = _super.call(this, "".concat(_res).concat(other));
      }
    }
    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;
    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    }
    // Create error message including the error code in the name.
    _this.stack;
    // Reset the name.
    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }
  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: _inspect$custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);
  return AssertionError;
}( /*#__PURE__*/_wrapNativeSuper(Error), inspect.custom);
module.exports = AssertionError;

/***/ }),

/***/ "../../../node_modules/assert/build/internal/errors.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */
/* eslint node-core/alphabetize-errors: "error" */
/* eslint node-core/prefer-util-format-errors: "error" */



// The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var codes = {};

// Lazy loaded
var assert;
var util;
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }
  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }
  var NodeError = /*#__PURE__*/function (_Base) {
    _inherits(NodeError, _Base);
    var _super = _createSuper(NodeError);
    function NodeError(arg1, arg2, arg3) {
      var _this;
      _classCallCheck(this, NodeError);
      _this = _super.call(this, getMessage(arg1, arg2, arg3));
      _this.code = code;
      return _this;
    }
    return _createClass(NodeError);
  }(Base);
  codes[code] = NodeError;
}

// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });
    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }
  return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }
  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}
createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__("../../../node_modules/assert/build/assert.js");
  assert(typeof name === 'string', "'name' must be a string");

  // determiner: 'must be' or 'must not be'
  var determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }
  var msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  // TODO(BridgeAR): Improve the output by showing `null` and similar.
  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__("../../../node_modules/util/util.js");
  var inspected = util.inspect(value);
  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }
  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;
  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }
  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (assert === undefined) assert = __webpack_require__("../../../node_modules/assert/build/assert.js");
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });
  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;
    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;
    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }
  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ "../../../node_modules/assert/build/internal/util/comparisons.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var regexFlagsSupported = /a/g.flags !== undefined;
var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};
var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};
var objectIs = Object.is ? Object.is : __webpack_require__("../../../node_modules/object-is/index.js");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__("../../../node_modules/is-nan/index.js");
function uncurryThis(f) {
  return f.call.bind(f);
}
var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);
var _require$types = (__webpack_require__("../../../node_modules/util/util.js").types),
  isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
  isArrayBufferView = _require$types.isArrayBufferView,
  isDate = _require$types.isDate,
  isMap = _require$types.isMap,
  isRegExp = _require$types.isRegExp,
  isSet = _require$types.isSet,
  isNativeError = _require$types.isNativeError,
  isBoxedPrimitive = _require$types.isBoxedPrimitive,
  isNumberObject = _require$types.isNumberObject,
  isStringObject = _require$types.isStringObject,
  isBooleanObject = _require$types.isBooleanObject,
  isBigIntObject = _require$types.isBigIntObject,
  isSymbolObject = _require$types.isSymbolObject,
  isFloat32Array = _require$types.isFloat32Array,
  isFloat64Array = _require$types.isFloat64Array;
function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;
  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  }
  // The maximum size for an array is 2 ** 32 -1.
  return key.length === 10 && key >= Math.pow(2, 32);
}
function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
}

// Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }
  var x = a.length;
  var y = b.length;
  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }
  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3;

// Check if they have the same source and flags
function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }
  return true;
}
function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }
  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }
  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }
  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }
  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }
  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
}

// Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.

function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  }

  // Check more closely if val1 and val2 are equal.
  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }
    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }
    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }
      return false;
    }
    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }
  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);
  if (val1Tag !== val2Tag) {
    return false;
  }
  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }
    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
    if (keys1.length !== keys2.length) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  }
  // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.
  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }
  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    }
    // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.
    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
    if (_keys.length !== _keys2.length) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }
    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }
  return keyCheck(val1, val2, strict, memos, kNoIterator);
}
function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}
function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2);

    // The pair must have the same number of owned properties.
    if (aKeys.length !== bKeys.length) {
      return false;
    }
  }

  // Cheap key test
  var i = 0;
  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }
  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);
    if (symbolKeysA.length !== 0) {
      var count = 0;
      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];
        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }
          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }
      var symbolKeysB = objectGetOwnPropertySymbols(val2);
      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);
      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }
  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  }

  // Use memos to handle cycles.
  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);
    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);
      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }
    memos.position++;
  }
  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}
function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);
  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];
    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }
  return false;
}

// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;
    case 'object':
      // Only pass in null as object!
      return undefined;
    case 'symbol':
      return false;
    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through
    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }
  }
  return true;
}
function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}
function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }
  var curB = b.get(altValue);
  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }
  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}
function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);
  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i];
    // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.
    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      }
      // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.
      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false;

      // Fast path to detect missing string, symbol, undefined and null values.
      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }
      if (set === null) {
        set = new Set();
      }
      set.add(val);
    }
  }
  if (set !== null) {
    var bValues = arrayFromSet(b);
    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i];
      // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.
      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }
    return set.size === 0;
  }
  return true;
}
function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);
  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];
    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }
  return false;
}
function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);
  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
      key = _aEntries$i[0],
      item1 = _aEntries$i[1];
    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }
      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);
      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false;
        // Fast path to detect missing string, symbol, undefined and null
        // keys.
        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
        if (set === null) {
          set = new Set();
        }
        set.add(key);
      }
    }
  }
  if (set !== null) {
    var bEntries = arrayFromMap(b);
    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
        _key = _bEntries$_i[0],
        item = _bEntries$_i[1];
      if (_typeof(_key) === 'object' && _key !== null) {
        if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
        return false;
      }
    }
    return set.size === 0;
  }
  return true;
}
function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;
  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);
        for (; i < keysA.length; i++) {
          var key = keysA[i];
          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }
        if (keysA.length !== Object.keys(b).length) {
          return false;
        }
        return true;
      }
    }
  }

  // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:
  for (i = 0; i < keys.length; i++) {
    var _key2 = keys[i];
    if (!innerDeepEqual(a[_key2], b[_key2], strict, memos)) {
      return false;
    }
  }
  return true;
}
function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}
function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}
module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ "../../../node_modules/available-typed-arrays/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ "../../../node_modules/call-bind/callBound.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__("../../../node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__("../../../node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "../../../node_modules/call-bind/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__("../../../node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__("../../../node_modules/get-intrinsic/index.js");
var setFunctionLength = __webpack_require__("../../../node_modules/set-function-length/index.js");

var $TypeError = GetIntrinsic('%TypeError%');
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "../../../node_modules/define-data-property/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasPropertyDescriptors = __webpack_require__("../../../node_modules/has-property-descriptors/index.js")();

var GetIntrinsic = __webpack_require__("../../../node_modules/get-intrinsic/index.js");

var $defineProperty = hasPropertyDescriptors && GetIntrinsic('%Object.defineProperty%', true);
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

var $SyntaxError = GetIntrinsic('%SyntaxError%');
var $TypeError = GetIntrinsic('%TypeError%');

var gopd = __webpack_require__("../../../node_modules/gopd/index.js");

/** @type {(obj: Record<PropertyKey, unknown>, property: PropertyKey, value: unknown, nonEnumerable?: boolean | null, nonWritable?: boolean | null, nonConfigurable?: boolean | null, loose?: boolean) => void} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


/***/ }),

/***/ "../../../node_modules/define-properties/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__("../../../node_modules/object-keys/index.js");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__("../../../node_modules/define-data-property/index.js");

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__("../../../node_modules/has-property-descriptors/index.js")();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ "../../../node_modules/doctrine/lib/doctrine.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/*
 * @fileoverview Main Doctrine object
 * @author Yusuke Suzuki <utatane.tea@gmail.com>
 * @author Dan Tao <daniel.tao@gmail.com>
 * @author Andrew Eisenberg <andrew@eisenberg.as>
 */

(function () {
    'use strict';

    var typed,
        utility,
        jsdoc,
        esutils,
        hasOwnProperty;

    esutils = __webpack_require__("../../../node_modules/esutils/lib/utils.js");
    typed = __webpack_require__("../../../node_modules/doctrine/lib/typed.js");
    utility = __webpack_require__("../../../node_modules/doctrine/lib/utility.js");

    function sliceSource(source, index, last) {
        return source.slice(index, last);
    }

    hasOwnProperty = (function () {
        var func = Object.prototype.hasOwnProperty;
        return function hasOwnProperty(obj, name) {
            return func.call(obj, name);
        };
    }());
    function shallowCopy(obj) {
        var ret = {}, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                ret[key] = obj[key];
            }
        }
        return ret;
    }

    function isASCIIAlphanumeric(ch) {
        return (ch >= 0x61  /* 'a' */ && ch <= 0x7A  /* 'z' */) ||
            (ch >= 0x41  /* 'A' */ && ch <= 0x5A  /* 'Z' */) ||
            (ch >= 0x30  /* '0' */ && ch <= 0x39  /* '9' */);
    }

    function isParamTitle(title) {
        return title === 'param' || title === 'argument' || title === 'arg';
    }

    function isReturnTitle(title) {
        return title === 'return' || title === 'returns';
    }

    function isProperty(title) {
        return title === 'property' || title === 'prop';
    }

    function isNameParameterRequired(title) {
        return isParamTitle(title) || isProperty(title) ||
            title === 'alias' || title === 'this' || title === 'mixes' || title === 'requires';
    }

    function isAllowedName(title) {
        return isNameParameterRequired(title) || title === 'const' || title === 'constant';
    }

    function isAllowedNested(title) {
        return isProperty(title) || isParamTitle(title);
    }

    function isAllowedOptional(title) {
        return isProperty(title) || isParamTitle(title);
    }

    function isTypeParameterRequired(title) {
        return isParamTitle(title) || isReturnTitle(title) ||
            title === 'define' || title === 'enum' ||
            title === 'implements' || title === 'this' ||
            title === 'type' || title === 'typedef' || isProperty(title);
    }

    // Consider deprecation instead using 'isTypeParameterRequired' and 'Rules' declaration to pick when a type is optional/required
    // This would require changes to 'parseType'
    function isAllowedType(title) {
        return isTypeParameterRequired(title) || title === 'throws' || title === 'const' || title === 'constant' ||
            title === 'namespace' || title === 'member' || title === 'var' || title === 'module' ||
            title === 'constructor' || title === 'class' || title === 'extends' || title === 'augments' ||
            title === 'public' || title === 'private' || title === 'protected';
    }

    // A regex character class that contains all whitespace except linebreak characters (\r, \n, \u2028, \u2029)
    var WHITESPACE = '[ \\f\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]';

    var STAR_MATCHER = '(' + WHITESPACE + '*(?:\\*' + WHITESPACE + '?)?)(.+|[\r\n\u2028\u2029])';

    function unwrapComment(doc) {
        // JSDoc comment is following form
        //   /**
        //    * .......
        //    */

        return doc.
            // remove /**
            replace(/^\/\*\*?/, '').
            // remove */
            replace(/\*\/$/, '').
            // remove ' * ' at the beginning of a line
            replace(new RegExp(STAR_MATCHER, 'g'), '$2').
            // remove trailing whitespace
            replace(/\s*$/, '');
    }

    /**
     * Converts an index in an "unwrapped" JSDoc comment to the corresponding index in the original "wrapped" version
     * @param {string} originalSource The original wrapped comment
     * @param {number} unwrappedIndex The index of a character in the unwrapped string
     * @returns {number} The index of the corresponding character in the original wrapped string
     */
    function convertUnwrappedCommentIndex(originalSource, unwrappedIndex) {
        var replacedSource = originalSource.replace(/^\/\*\*?/, '');
        var numSkippedChars = 0;
        var matcher = new RegExp(STAR_MATCHER, 'g');
        var match;

        while ((match = matcher.exec(replacedSource))) {
            numSkippedChars += match[1].length;

            if (match.index + match[0].length > unwrappedIndex + numSkippedChars) {
                return unwrappedIndex + numSkippedChars + originalSource.length - replacedSource.length;
            }
        }

        return originalSource.replace(/\*\/$/, '').replace(/\s*$/, '').length;
    }

    // JSDoc Tag Parser

    (function (exports) {
        var Rules,
            index,
            lineNumber,
            length,
            source,
            originalSource,
            recoverable,
            sloppy,
            strict;

        function advance() {
            var ch = source.charCodeAt(index);
            index += 1;
            if (esutils.code.isLineTerminator(ch) && !(ch === 0x0D  /* '\r' */ && source.charCodeAt(index) === 0x0A  /* '\n' */)) {
                lineNumber += 1;
            }
            return String.fromCharCode(ch);
        }

        function scanTitle() {
            var title = '';
            // waste '@'
            advance();

            while (index < length && isASCIIAlphanumeric(source.charCodeAt(index))) {
                title += advance();
            }

            return title;
        }

        function seekContent() {
            var ch, waiting, last = index;

            waiting = false;
            while (last < length) {
                ch = source.charCodeAt(last);
                if (esutils.code.isLineTerminator(ch) && !(ch === 0x0D  /* '\r' */ && source.charCodeAt(last + 1) === 0x0A  /* '\n' */)) {
                    waiting = true;
                } else if (waiting) {
                    if (ch === 0x40  /* '@' */) {
                        break;
                    }
                    if (!esutils.code.isWhiteSpace(ch)) {
                        waiting = false;
                    }
                }
                last += 1;
            }
            return last;
        }

        // type expression may have nest brace, such as,
        // { { ok: string } }
        //
        // therefore, scanning type expression with balancing braces.
        function parseType(title, last, addRange) {
            var ch, brace, type, startIndex, direct = false;


            // search '{'
            while (index < last) {
                ch = source.charCodeAt(index);
                if (esutils.code.isWhiteSpace(ch)) {
                    advance();
                } else if (ch === 0x7B  /* '{' */) {
                    advance();
                    break;
                } else {
                    // this is direct pattern
                    direct = true;
                    break;
                }
            }


            if (direct) {
                return null;
            }

            // type expression { is found
            brace = 1;
            type = '';
            while (index < last) {
                ch = source.charCodeAt(index);
                if (esutils.code.isLineTerminator(ch)) {
                    advance();
                } else {
                    if (ch === 0x7D  /* '}' */) {
                        brace -= 1;
                        if (brace === 0) {
                            advance();
                            break;
                        }
                    } else if (ch === 0x7B  /* '{' */) {
                        brace += 1;
                    }
                    if (type === '') {
                        startIndex = index;
                    }
                    type += advance();
                }
            }

            if (brace !== 0) {
                // braces is not balanced
                return utility.throwError('Braces are not balanced');
            }

            if (isAllowedOptional(title)) {
                return typed.parseParamType(type, {startIndex: convertIndex(startIndex), range: addRange});
            }

            return typed.parseType(type, {startIndex: convertIndex(startIndex), range: addRange});
        }

        function scanIdentifier(last) {
            var identifier;
            if (!esutils.code.isIdentifierStartES5(source.charCodeAt(index)) && !source[index].match(/[0-9]/)) {
                return null;
            }
            identifier = advance();
            while (index < last && esutils.code.isIdentifierPartES5(source.charCodeAt(index))) {
                identifier += advance();
            }
            return identifier;
        }

        function skipWhiteSpace(last) {
            while (index < last && (esutils.code.isWhiteSpace(source.charCodeAt(index)) || esutils.code.isLineTerminator(source.charCodeAt(index)))) {
                advance();
            }
        }

        function parseName(last, allowBrackets, allowNestedParams) {
            var name = '',
                useBrackets,
                insideString;


            skipWhiteSpace(last);

            if (index >= last) {
                return null;
            }

            if (source.charCodeAt(index) === 0x5B  /* '[' */) {
                if (allowBrackets) {
                    useBrackets = true;
                    name = advance();
                } else {
                    return null;
                }
            }

            name += scanIdentifier(last);

            if (allowNestedParams) {
                if (source.charCodeAt(index) === 0x3A /* ':' */ && (
                        name === 'module' ||
                        name === 'external' ||
                        name === 'event')) {
                    name += advance();
                    name += scanIdentifier(last);

                }
                if(source.charCodeAt(index) === 0x5B  /* '[' */ && source.charCodeAt(index + 1) === 0x5D  /* ']' */){
                    name += advance();
                    name += advance();
                }
                while (source.charCodeAt(index) === 0x2E  /* '.' */ ||
                        source.charCodeAt(index) === 0x2F  /* '/' */ ||
                        source.charCodeAt(index) === 0x23  /* '#' */ ||
                        source.charCodeAt(index) === 0x2D  /* '-' */ ||
                        source.charCodeAt(index) === 0x7E  /* '~' */) {
                    name += advance();
                    name += scanIdentifier(last);
                }
            }

            if (useBrackets) {
                skipWhiteSpace(last);
                // do we have a default value for this?
                if (source.charCodeAt(index) === 0x3D  /* '=' */) {
                    // consume the '='' symbol
                    name += advance();
                    skipWhiteSpace(last);

                    var ch;
                    var bracketDepth = 1;

                    // scan in the default value
                    while (index < last) {
                        ch = source.charCodeAt(index);

                        if (esutils.code.isWhiteSpace(ch)) {
                            if (!insideString) {
                                skipWhiteSpace(last);
                                ch = source.charCodeAt(index);
                            }
                        }

                        if (ch === 0x27 /* ''' */) {
                            if (!insideString) {
                                insideString = '\'';
                            } else {
                                if (insideString === '\'') {
                                    insideString = '';
                                }
                            }
                        }

                        if (ch === 0x22 /* '"' */) {
                            if (!insideString) {
                                insideString = '"';
                            } else {
                                if (insideString === '"') {
                                    insideString = '';
                                }
                            }
                        }

                        if (ch === 0x5B /* '[' */) {
                            bracketDepth++;
                        } else if (ch === 0x5D  /* ']' */ &&
                            --bracketDepth === 0) {
                            break;
                        }

                        name += advance();
                    }
                }

                skipWhiteSpace(last);

                if (index >= last || source.charCodeAt(index) !== 0x5D  /* ']' */) {
                    // we never found a closing ']'
                    return null;
                }

                // collect the last ']'
                name += advance();
            }

            return name;
        }

        function skipToTag() {
            while (index < length && source.charCodeAt(index) !== 0x40  /* '@' */) {
                advance();
            }
            if (index >= length) {
                return false;
            }
            utility.assert(source.charCodeAt(index) === 0x40  /* '@' */);
            return true;
        }

        function convertIndex(rangeIndex) {
            if (source === originalSource) {
                return rangeIndex;
            }
            return convertUnwrappedCommentIndex(originalSource, rangeIndex);
        }

        function TagParser(options, title) {
            this._options = options;
            this._title = title.toLowerCase();
            this._tag = {
                title: title,
                description: null
            };
            if (this._options.lineNumbers) {
                this._tag.lineNumber = lineNumber;
            }
            this._first = index - title.length - 1;
            this._last = 0;
            // space to save special information for title parsers.
            this._extra = { };
        }

        // addError(err, ...)
        TagParser.prototype.addError = function addError(errorText) {
            var args = Array.prototype.slice.call(arguments, 1),
                msg = errorText.replace(
                    /%(\d)/g,
                    function (whole, index) {
                        utility.assert(index < args.length, 'Message reference must be in range');
                        return args[index];
                    }
                );

            if (!this._tag.errors) {
                this._tag.errors = [];
            }
            if (strict) {
                utility.throwError(msg);
            }
            this._tag.errors.push(msg);
            return recoverable;
        };

        TagParser.prototype.parseType = function () {
            // type required titles
            if (isTypeParameterRequired(this._title)) {
                try {
                    this._tag.type = parseType(this._title, this._last, this._options.range);
                    if (!this._tag.type) {
                        if (!isParamTitle(this._title) && !isReturnTitle(this._title)) {
                            if (!this.addError('Missing or invalid tag type')) {
                                return false;
                            }
                        }
                    }
                } catch (error) {
                    this._tag.type = null;
                    if (!this.addError(error.message)) {
                        return false;
                    }
                }
            } else if (isAllowedType(this._title)) {
                // optional types
                try {
                    this._tag.type = parseType(this._title, this._last, this._options.range);
                } catch (e) {
                    //For optional types, lets drop the thrown error when we hit the end of the file
                }
            }
            return true;
        };

        TagParser.prototype._parseNamePath = function (optional) {
            var name;
            name = parseName(this._last, sloppy && isAllowedOptional(this._title), true);
            if (!name) {
                if (!optional) {
                    if (!this.addError('Missing or invalid tag name')) {
                        return false;
                    }
                }
            }
            this._tag.name = name;
            return true;
        };

        TagParser.prototype.parseNamePath = function () {
            return this._parseNamePath(false);
        };

        TagParser.prototype.parseNamePathOptional = function () {
            return this._parseNamePath(true);
        };


        TagParser.prototype.parseName = function () {
            var assign, name;

            // param, property requires name
            if (isAllowedName(this._title)) {
                this._tag.name = parseName(this._last, sloppy && isAllowedOptional(this._title), isAllowedNested(this._title));
                if (!this._tag.name) {
                    if (!isNameParameterRequired(this._title)) {
                        return true;
                    }

                    // it's possible the name has already been parsed but interpreted as a type
                    // it's also possible this is a sloppy declaration, in which case it will be
                    // fixed at the end
                    if (isParamTitle(this._title) && this._tag.type && this._tag.type.name) {
                        this._extra.name = this._tag.type;
                        this._tag.name = this._tag.type.name;
                        this._tag.type = null;
                    } else {
                        if (!this.addError('Missing or invalid tag name')) {
                            return false;
                        }
                    }
                } else {
                    name = this._tag.name;
                    if (name.charAt(0) === '[' && name.charAt(name.length - 1) === ']') {
                        // extract the default value if there is one
                        // example: @param {string} [somebody=John Doe] description
                        assign = name.substring(1, name.length - 1).split('=');
                        if (assign.length > 1) {
                            this._tag['default'] = assign.slice(1).join('=');
                        }
                        this._tag.name = assign[0];

                        // convert to an optional type
                        if (this._tag.type && this._tag.type.type !== 'OptionalType') {
                            this._tag.type = {
                                type: 'OptionalType',
                                expression: this._tag.type
                            };
                        }
                    }
                }
            }


            return true;
        };

        TagParser.prototype.parseDescription = function parseDescription() {
            var description = sliceSource(source, index, this._last).trim();
            if (description) {
                if ((/^-\s+/).test(description)) {
                    description = description.substring(2);
                }
                this._tag.description = description;
            }
            return true;
        };

        TagParser.prototype.parseCaption = function parseDescription() {
            var description = sliceSource(source, index, this._last).trim();
            var captionStartTag = '<caption>';
            var captionEndTag = '</caption>';
            var captionStart = description.indexOf(captionStartTag);
            var captionEnd = description.indexOf(captionEndTag);
            if (captionStart >= 0 && captionEnd >= 0) {
                this._tag.caption = description.substring(
                    captionStart + captionStartTag.length, captionEnd).trim();
                this._tag.description = description.substring(captionEnd + captionEndTag.length).trim();
            } else {
                this._tag.description = description;
            }
            return true;
        };

        TagParser.prototype.parseKind = function parseKind() {
            var kind, kinds;
            kinds = {
                'class': true,
                'constant': true,
                'event': true,
                'external': true,
                'file': true,
                'function': true,
                'member': true,
                'mixin': true,
                'module': true,
                'namespace': true,
                'typedef': true
            };
            kind = sliceSource(source, index, this._last).trim();
            this._tag.kind = kind;
            if (!hasOwnProperty(kinds, kind)) {
                if (!this.addError('Invalid kind name \'%0\'', kind)) {
                    return false;
                }
            }
            return true;
        };

        TagParser.prototype.parseAccess = function parseAccess() {
            var access;
            access = sliceSource(source, index, this._last).trim();
            this._tag.access = access;
            if (access !== 'private' && access !== 'protected' && access !== 'public') {
                if (!this.addError('Invalid access name \'%0\'', access)) {
                    return false;
                }
            }
            return true;
        };

        TagParser.prototype.parseThis = function parseThis() {
            // this name may be a name expression (e.g. {foo.bar}),
            // an union (e.g. {foo.bar|foo.baz}) or a name path (e.g. foo.bar)
            var value = sliceSource(source, index, this._last).trim();
            if (value && value.charAt(0) === '{') {
                var gotType = this.parseType();
                if (gotType && this._tag.type.type === 'NameExpression' || this._tag.type.type === 'UnionType') {
                    this._tag.name = this._tag.type.name;
                    return true;
                } else {
                    return this.addError('Invalid name for this');
                }
            } else {
                return this.parseNamePath();
            }
        };

        TagParser.prototype.parseVariation = function parseVariation() {
            var variation, text;
            text = sliceSource(source, index, this._last).trim();
            variation = parseFloat(text, 10);
            this._tag.variation = variation;
            if (isNaN(variation)) {
                if (!this.addError('Invalid variation \'%0\'', text)) {
                    return false;
                }
            }
            return true;
        };

        TagParser.prototype.ensureEnd = function () {
            var shouldBeEmpty = sliceSource(source, index, this._last).trim();
            if (shouldBeEmpty) {
                if (!this.addError('Unknown content \'%0\'', shouldBeEmpty)) {
                    return false;
                }
            }
            return true;
        };

        TagParser.prototype.epilogue = function epilogue() {
            var description;

            description = this._tag.description;
            // un-fix potentially sloppy declaration
            if (isAllowedOptional(this._title) && !this._tag.type && description && description.charAt(0) === '[') {
                this._tag.type = this._extra.name;
                if (!this._tag.name) {
                    this._tag.name = undefined;
                }

                if (!sloppy) {
                    if (!this.addError('Missing or invalid tag name')) {
                        return false;
                    }
                }
            }

            return true;
        };

        Rules = {
            // http://usejsdoc.org/tags-access.html
            'access': ['parseAccess'],
            // http://usejsdoc.org/tags-alias.html
            'alias': ['parseNamePath', 'ensureEnd'],
            // http://usejsdoc.org/tags-augments.html
            'augments': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-constructor.html
            'constructor': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // Synonym: http://usejsdoc.org/tags-constructor.html
            'class': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // Synonym: http://usejsdoc.org/tags-extends.html
            'extends': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-example.html
            'example': ['parseCaption'],
            // http://usejsdoc.org/tags-deprecated.html
            'deprecated': ['parseDescription'],
            // http://usejsdoc.org/tags-global.html
            'global': ['ensureEnd'],
            // http://usejsdoc.org/tags-inner.html
            'inner': ['ensureEnd'],
            // http://usejsdoc.org/tags-instance.html
            'instance': ['ensureEnd'],
            // http://usejsdoc.org/tags-kind.html
            'kind': ['parseKind'],
            // http://usejsdoc.org/tags-mixes.html
            'mixes': ['parseNamePath', 'ensureEnd'],
            // http://usejsdoc.org/tags-mixin.html
            'mixin': ['parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-member.html
            'member': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-method.html
            'method': ['parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-module.html
            'module': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // Synonym: http://usejsdoc.org/tags-method.html
            'func': ['parseNamePathOptional', 'ensureEnd'],
            // Synonym: http://usejsdoc.org/tags-method.html
            'function': ['parseNamePathOptional', 'ensureEnd'],
            // Synonym: http://usejsdoc.org/tags-member.html
            'var': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-name.html
            'name': ['parseNamePath', 'ensureEnd'],
            // http://usejsdoc.org/tags-namespace.html
            'namespace': ['parseType', 'parseNamePathOptional', 'ensureEnd'],
            // http://usejsdoc.org/tags-private.html
            'private': ['parseType', 'parseDescription'],
            // http://usejsdoc.org/tags-protected.html
            'protected': ['parseType', 'parseDescription'],
            // http://usejsdoc.org/tags-public.html
            'public': ['parseType', 'parseDescription'],
            // http://usejsdoc.org/tags-readonly.html
            'readonly': ['ensureEnd'],
            // http://usejsdoc.org/tags-requires.html
            'requires': ['parseNamePath', 'ensureEnd'],
            // http://usejsdoc.org/tags-since.html
            'since': ['parseDescription'],
            // http://usejsdoc.org/tags-static.html
            'static': ['ensureEnd'],
            // http://usejsdoc.org/tags-summary.html
            'summary': ['parseDescription'],
            // http://usejsdoc.org/tags-this.html
            'this': ['parseThis', 'ensureEnd'],
            // http://usejsdoc.org/tags-todo.html
            'todo': ['parseDescription'],
            // http://usejsdoc.org/tags-typedef.html
            'typedef': ['parseType', 'parseNamePathOptional'],
            // http://usejsdoc.org/tags-variation.html
            'variation': ['parseVariation'],
            // http://usejsdoc.org/tags-version.html
            'version': ['parseDescription']
        };

        TagParser.prototype.parse = function parse() {
            var i, iz, sequences, method;


            // empty title
            if (!this._title) {
                if (!this.addError('Missing or invalid title')) {
                    return null;
                }
            }

            // Seek to content last index.
            this._last = seekContent(this._title);

            if (this._options.range) {
                this._tag.range = [this._first, source.slice(0, this._last).replace(/\s*$/, '').length].map(convertIndex);
            }

            if (hasOwnProperty(Rules, this._title)) {
                sequences = Rules[this._title];
            } else {
                // default sequences
                sequences = ['parseType', 'parseName', 'parseDescription', 'epilogue'];
            }

            for (i = 0, iz = sequences.length; i < iz; ++i) {
                method = sequences[i];
                if (!this[method]()) {
                    return null;
                }
            }

            return this._tag;
        };

        function parseTag(options) {
            var title, parser, tag;

            // skip to tag
            if (!skipToTag()) {
                return null;
            }

            // scan title
            title = scanTitle();

            // construct tag parser
            parser = new TagParser(options, title);
            tag = parser.parse();

            // Seek global index to end of this tag.
            while (index < parser._last) {
                advance();
            }

            return tag;
        }

        //
        // Parse JSDoc
        //

        function scanJSDocDescription(preserveWhitespace) {
            var description = '', ch, atAllowed;

            atAllowed = true;
            while (index < length) {
                ch = source.charCodeAt(index);

                if (atAllowed && ch === 0x40  /* '@' */) {
                    break;
                }

                if (esutils.code.isLineTerminator(ch)) {
                    atAllowed = true;
                } else if (atAllowed && !esutils.code.isWhiteSpace(ch)) {
                    atAllowed = false;
                }

                description += advance();
            }

            return preserveWhitespace ? description : description.trim();
        }

        function parse(comment, options) {
            var tags = [], tag, description, interestingTags, i, iz;

            if (options === undefined) {
                options = {};
            }

            if (typeof options.unwrap === 'boolean' && options.unwrap) {
                source = unwrapComment(comment);
            } else {
                source = comment;
            }

            originalSource = comment;

            // array of relevant tags
            if (options.tags) {
                if (Array.isArray(options.tags)) {
                    interestingTags = { };
                    for (i = 0, iz = options.tags.length; i < iz; i++) {
                        if (typeof options.tags[i] === 'string') {
                            interestingTags[options.tags[i]] = true;
                        } else {
                            utility.throwError('Invalid "tags" parameter: ' + options.tags);
                        }
                    }
                } else {
                    utility.throwError('Invalid "tags" parameter: ' + options.tags);
                }
            }

            length = source.length;
            index = 0;
            lineNumber = 0;
            recoverable = options.recoverable;
            sloppy = options.sloppy;
            strict = options.strict;

            description = scanJSDocDescription(options.preserveWhitespace);

            while (true) {
                tag = parseTag(options);
                if (!tag) {
                    break;
                }
                if (!interestingTags || interestingTags.hasOwnProperty(tag.title)) {
                    tags.push(tag);
                }
            }

            return {
                description: description,
                tags: tags
            };
        }
        exports.parse = parse;
    }(jsdoc = {}));

    __webpack_unused_export__ = utility.VERSION;
    __webpack_unused_export__ = jsdoc.parse;
    __webpack_unused_export__ = typed.parseType;
    __webpack_unused_export__ = typed.parseParamType;
    __webpack_unused_export__ = unwrapComment;
    exports.GY = shallowCopy(typed.Syntax);
    __webpack_unused_export__ = utility.DoctrineError;
    __webpack_unused_export__ = {
        Syntax: exports.GY,
        parseType: typed.parseType,
        parseParamType: typed.parseParamType,
        stringify: typed.stringify
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/doctrine/lib/typed.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
 * @fileoverview Type expression parser.
 * @author Yusuke Suzuki <utatane.tea@gmail.com>
 * @author Dan Tao <daniel.tao@gmail.com>
 * @author Andrew Eisenberg <andrew@eisenberg.as>
 */

// "typed", the Type Expression Parser for doctrine.

(function () {
    'use strict';

    var Syntax,
        Token,
        source,
        length,
        index,
        previous,
        token,
        value,
        esutils,
        utility,
        rangeOffset,
        addRange;

    esutils = __webpack_require__("../../../node_modules/esutils/lib/utils.js");
    utility = __webpack_require__("../../../node_modules/doctrine/lib/utility.js");

    Syntax = {
        NullableLiteral: 'NullableLiteral',
        AllLiteral: 'AllLiteral',
        NullLiteral: 'NullLiteral',
        UndefinedLiteral: 'UndefinedLiteral',
        VoidLiteral: 'VoidLiteral',
        UnionType: 'UnionType',
        ArrayType: 'ArrayType',
        RecordType: 'RecordType',
        FieldType: 'FieldType',
        FunctionType: 'FunctionType',
        ParameterType: 'ParameterType',
        RestType: 'RestType',
        NonNullableType: 'NonNullableType',
        OptionalType: 'OptionalType',
        NullableType: 'NullableType',
        NameExpression: 'NameExpression',
        TypeApplication: 'TypeApplication',
        StringLiteralType: 'StringLiteralType',
        NumericLiteralType: 'NumericLiteralType',
        BooleanLiteralType: 'BooleanLiteralType'
    };

    Token = {
        ILLEGAL: 0,    // ILLEGAL
        DOT_LT: 1,     // .<
        REST: 2,       // ...
        LT: 3,         // <
        GT: 4,         // >
        LPAREN: 5,     // (
        RPAREN: 6,     // )
        LBRACE: 7,     // {
        RBRACE: 8,     // }
        LBRACK: 9,    // [
        RBRACK: 10,    // ]
        COMMA: 11,     // ,
        COLON: 12,     // :
        STAR: 13,      // *
        PIPE: 14,      // |
        QUESTION: 15,  // ?
        BANG: 16,      // !
        EQUAL: 17,     // =
        NAME: 18,      // name token
        STRING: 19,    // string
        NUMBER: 20,    // number
        EOF: 21
    };

    function isTypeName(ch) {
        return '><(){}[],:*|?!='.indexOf(String.fromCharCode(ch)) === -1 && !esutils.code.isWhiteSpace(ch) && !esutils.code.isLineTerminator(ch);
    }

    function Context(previous, index, token, value) {
        this._previous = previous;
        this._index = index;
        this._token = token;
        this._value = value;
    }

    Context.prototype.restore = function () {
        previous = this._previous;
        index = this._index;
        token = this._token;
        value = this._value;
    };

    Context.save = function () {
        return new Context(previous, index, token, value);
    };

    function maybeAddRange(node, range) {
        if (addRange) {
            node.range = [range[0] + rangeOffset, range[1] + rangeOffset];
        }
        return node;
    }

    function advance() {
        var ch = source.charAt(index);
        index += 1;
        return ch;
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && esutils.code.isHexDigit(source.charCodeAt(index))) {
                ch = advance();
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function scanString() {
        var str = '', quote, ch, code, unescaped, restore; //TODO review removal octal = false
        quote = source.charAt(index);
        ++index;

        while (index < length) {
            ch = advance();

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = advance();
                if (!esutils.code.isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'u':
                    case 'x':
                        restore = index;
                        unescaped = scanHexEscape(ch);
                        if (unescaped) {
                            str += unescaped;
                        } else {
                            index = restore;
                            str += ch;
                        }
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\v';
                        break;

                    default:
                        if (esutils.code.isOctalDigit(ch.charCodeAt(0))) {
                            code = '01234567'.indexOf(ch);

                            // \0 is not octal escape sequence
                            // Deprecating unused code. TODO review removal
                            //if (code !== 0) {
                            //    octal = true;
                            //}

                            if (index < length && esutils.code.isOctalDigit(source.charCodeAt(index))) {
                                //TODO Review Removal octal = true;
                                code = code * 8 + '01234567'.indexOf(advance());

                                // 3 digits are only allowed when string starts
                                // with 0, 1, 2, 3
                                if ('0123'.indexOf(ch) >= 0 &&
                                        index < length &&
                                        esutils.code.isOctalDigit(source.charCodeAt(index))) {
                                    code = code * 8 + '01234567'.indexOf(advance());
                                }
                            }
                            str += String.fromCharCode(code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    if (ch ===  '\r' && source.charCodeAt(index) === 0x0A  /* '\n' */) {
                        ++index;
                    }
                }
            } else if (esutils.code.isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            utility.throwError('unexpected quote');
        }

        value = str;
        return Token.STRING;
    }

    function scanNumber() {
        var number, ch;

        number = '';
        ch = source.charCodeAt(index);

        if (ch !== 0x2E  /* '.' */) {
            number = advance();
            ch = source.charCodeAt(index);

            if (number === '0') {
                if (ch === 0x78  /* 'x' */ || ch === 0x58  /* 'X' */) {
                    number += advance();
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (!esutils.code.isHexDigit(ch)) {
                            break;
                        }
                        number += advance();
                    }

                    if (number.length <= 2) {
                        // only 0x
                        utility.throwError('unexpected token');
                    }

                    if (index < length) {
                        ch = source.charCodeAt(index);
                        if (esutils.code.isIdentifierStartES5(ch)) {
                            utility.throwError('unexpected token');
                        }
                    }
                    value = parseInt(number, 16);
                    return Token.NUMBER;
                }

                if (esutils.code.isOctalDigit(ch)) {
                    number += advance();
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (!esutils.code.isOctalDigit(ch)) {
                            break;
                        }
                        number += advance();
                    }

                    if (index < length) {
                        ch = source.charCodeAt(index);
                        if (esutils.code.isIdentifierStartES5(ch) || esutils.code.isDecimalDigit(ch)) {
                            utility.throwError('unexpected token');
                        }
                    }
                    value = parseInt(number, 8);
                    return Token.NUMBER;
                }

                if (esutils.code.isDecimalDigit(ch)) {
                    utility.throwError('unexpected token');
                }
            }

            while (index < length) {
                ch = source.charCodeAt(index);
                if (!esutils.code.isDecimalDigit(ch)) {
                    break;
                }
                number += advance();
            }
        }

        if (ch === 0x2E  /* '.' */) {
            number += advance();
            while (index < length) {
                ch = source.charCodeAt(index);
                if (!esutils.code.isDecimalDigit(ch)) {
                    break;
                }
                number += advance();
            }
        }

        if (ch === 0x65  /* 'e' */ || ch === 0x45  /* 'E' */) {
            number += advance();

            ch = source.charCodeAt(index);
            if (ch === 0x2B  /* '+' */ || ch === 0x2D  /* '-' */) {
                number += advance();
            }

            ch = source.charCodeAt(index);
            if (esutils.code.isDecimalDigit(ch)) {
                number += advance();
                while (index < length) {
                    ch = source.charCodeAt(index);
                    if (!esutils.code.isDecimalDigit(ch)) {
                        break;
                    }
                    number += advance();
                }
            } else {
                utility.throwError('unexpected token');
            }
        }

        if (index < length) {
            ch = source.charCodeAt(index);
            if (esutils.code.isIdentifierStartES5(ch)) {
                utility.throwError('unexpected token');
            }
        }

        value = parseFloat(number);
        return Token.NUMBER;
    }


    function scanTypeName() {
        var ch, ch2;

        value = advance();
        while (index < length && isTypeName(source.charCodeAt(index))) {
            ch = source.charCodeAt(index);
            if (ch === 0x2E  /* '.' */) {
                if ((index + 1) >= length) {
                    return Token.ILLEGAL;
                }
                ch2 = source.charCodeAt(index + 1);
                if (ch2 === 0x3C  /* '<' */) {
                    break;
                }
            }
            value += advance();
        }
        return Token.NAME;
    }

    function next() {
        var ch;

        previous = index;

        while (index < length && esutils.code.isWhiteSpace(source.charCodeAt(index))) {
            advance();
        }
        if (index >= length) {
            token = Token.EOF;
            return token;
        }

        ch = source.charCodeAt(index);
        switch (ch) {
        case 0x27:  /* ''' */
        case 0x22:  /* '"' */
            token = scanString();
            return token;

        case 0x3A:  /* ':' */
            advance();
            token = Token.COLON;
            return token;

        case 0x2C:  /* ',' */
            advance();
            token = Token.COMMA;
            return token;

        case 0x28:  /* '(' */
            advance();
            token = Token.LPAREN;
            return token;

        case 0x29:  /* ')' */
            advance();
            token = Token.RPAREN;
            return token;

        case 0x5B:  /* '[' */
            advance();
            token = Token.LBRACK;
            return token;

        case 0x5D:  /* ']' */
            advance();
            token = Token.RBRACK;
            return token;

        case 0x7B:  /* '{' */
            advance();
            token = Token.LBRACE;
            return token;

        case 0x7D:  /* '}' */
            advance();
            token = Token.RBRACE;
            return token;

        case 0x2E:  /* '.' */
            if (index + 1 < length) {
                ch = source.charCodeAt(index + 1);
                if (ch === 0x3C  /* '<' */) {
                    advance();  // '.'
                    advance();  // '<'
                    token = Token.DOT_LT;
                    return token;
                }

                if (ch === 0x2E  /* '.' */ && index + 2 < length && source.charCodeAt(index + 2) === 0x2E  /* '.' */) {
                    advance();  // '.'
                    advance();  // '.'
                    advance();  // '.'
                    token = Token.REST;
                    return token;
                }

                if (esutils.code.isDecimalDigit(ch)) {
                    token = scanNumber();
                    return token;
                }
            }
            token = Token.ILLEGAL;
            return token;

        case 0x3C:  /* '<' */
            advance();
            token = Token.LT;
            return token;

        case 0x3E:  /* '>' */
            advance();
            token = Token.GT;
            return token;

        case 0x2A:  /* '*' */
            advance();
            token = Token.STAR;
            return token;

        case 0x7C:  /* '|' */
            advance();
            token = Token.PIPE;
            return token;

        case 0x3F:  /* '?' */
            advance();
            token = Token.QUESTION;
            return token;

        case 0x21:  /* '!' */
            advance();
            token = Token.BANG;
            return token;

        case 0x3D:  /* '=' */
            advance();
            token = Token.EQUAL;
            return token;

        case 0x2D: /* '-' */
            token = scanNumber();
            return token;

        default:
            if (esutils.code.isDecimalDigit(ch)) {
                token = scanNumber();
                return token;
            }

            // type string permits following case,
            //
            // namespace.module.MyClass
            //
            // this reduced 1 token TK_NAME
            utility.assert(isTypeName(ch));
            token = scanTypeName();
            return token;
        }
    }

    function consume(target, text) {
        utility.assert(token === target, text || 'consumed token not matched');
        next();
    }

    function expect(target, message) {
        if (token !== target) {
            utility.throwError(message || 'unexpected token');
        }
        next();
    }

    // UnionType := '(' TypeUnionList ')'
    //
    // TypeUnionList :=
    //     <<empty>>
    //   | NonemptyTypeUnionList
    //
    // NonemptyTypeUnionList :=
    //     TypeExpression
    //   | TypeExpression '|' NonemptyTypeUnionList
    function parseUnionType() {
        var elements, startIndex = index - 1;
        consume(Token.LPAREN, 'UnionType should start with (');
        elements = [];
        if (token !== Token.RPAREN) {
            while (true) {
                elements.push(parseTypeExpression());
                if (token === Token.RPAREN) {
                    break;
                }
                expect(Token.PIPE);
            }
        }
        consume(Token.RPAREN, 'UnionType should end with )');
        return maybeAddRange({
            type: Syntax.UnionType,
            elements: elements
        }, [startIndex, previous]);
    }

    // ArrayType := '[' ElementTypeList ']'
    //
    // ElementTypeList :=
    //     <<empty>>
    //  | TypeExpression
    //  | '...' TypeExpression
    //  | TypeExpression ',' ElementTypeList
    function parseArrayType() {
        var elements, startIndex = index - 1, restStartIndex;
        consume(Token.LBRACK, 'ArrayType should start with [');
        elements = [];
        while (token !== Token.RBRACK) {
            if (token === Token.REST) {
                restStartIndex = index - 3;
                consume(Token.REST);
                elements.push(maybeAddRange({
                    type: Syntax.RestType,
                    expression: parseTypeExpression()
                }, [restStartIndex, previous]));
                break;
            } else {
                elements.push(parseTypeExpression());
            }
            if (token !== Token.RBRACK) {
                expect(Token.COMMA);
            }
        }
        expect(Token.RBRACK);
        return maybeAddRange({
            type: Syntax.ArrayType,
            elements: elements
        }, [startIndex, previous]);
    }

    function parseFieldName() {
        var v = value;
        if (token === Token.NAME || token === Token.STRING) {
            next();
            return v;
        }

        if (token === Token.NUMBER) {
            consume(Token.NUMBER);
            return String(v);
        }

        utility.throwError('unexpected token');
    }

    // FieldType :=
    //     FieldName
    //   | FieldName ':' TypeExpression
    //
    // FieldName :=
    //     NameExpression
    //   | StringLiteral
    //   | NumberLiteral
    //   | ReservedIdentifier
    function parseFieldType() {
        var key, rangeStart = previous;

        key = parseFieldName();
        if (token === Token.COLON) {
            consume(Token.COLON);
            return maybeAddRange({
                type: Syntax.FieldType,
                key: key,
                value: parseTypeExpression()
            }, [rangeStart, previous]);
        }
        return maybeAddRange({
            type: Syntax.FieldType,
            key: key,
            value: null
        }, [rangeStart, previous]);
    }

    // RecordType := '{' FieldTypeList '}'
    //
    // FieldTypeList :=
    //     <<empty>>
    //   | FieldType
    //   | FieldType ',' FieldTypeList
    function parseRecordType() {
        var fields, rangeStart = index - 1, rangeEnd;

        consume(Token.LBRACE, 'RecordType should start with {');
        fields = [];
        if (token === Token.COMMA) {
            consume(Token.COMMA);
        } else {
            while (token !== Token.RBRACE) {
                fields.push(parseFieldType());
                if (token !== Token.RBRACE) {
                    expect(Token.COMMA);
                }
            }
        }
        rangeEnd = index;
        expect(Token.RBRACE);
        return maybeAddRange({
            type: Syntax.RecordType,
            fields: fields
        }, [rangeStart, rangeEnd]);
    }

    // NameExpression :=
    //    Identifier
    //  | TagIdentifier ':' Identifier
    //
    // Tag identifier is one of "module", "external" or "event"
    // Identifier is the same as Token.NAME, including any dots, something like
    // namespace.module.MyClass
    function parseNameExpression() {
        var name = value, rangeStart = index - name.length;
        expect(Token.NAME);

        if (token === Token.COLON && (
                name === 'module' ||
                name === 'external' ||
                name === 'event')) {
            consume(Token.COLON);
            name += ':' + value;
            expect(Token.NAME);
        }

        return maybeAddRange({
            type: Syntax.NameExpression,
            name: name
        }, [rangeStart, previous]);
    }

    // TypeExpressionList :=
    //     TopLevelTypeExpression
    //   | TopLevelTypeExpression ',' TypeExpressionList
    function parseTypeExpressionList() {
        var elements = [];

        elements.push(parseTop());
        while (token === Token.COMMA) {
            consume(Token.COMMA);
            elements.push(parseTop());
        }
        return elements;
    }

    // TypeName :=
    //     NameExpression
    //   | NameExpression TypeApplication
    //
    // TypeApplication :=
    //     '.<' TypeExpressionList '>'
    //   | '<' TypeExpressionList '>'   // this is extension of doctrine
    function parseTypeName() {
        var expr, applications, startIndex = index - value.length;

        expr = parseNameExpression();
        if (token === Token.DOT_LT || token === Token.LT) {
            next();
            applications = parseTypeExpressionList();
            expect(Token.GT);
            return maybeAddRange({
                type: Syntax.TypeApplication,
                expression: expr,
                applications: applications
            }, [startIndex, previous]);
        }
        return expr;
    }

    // ResultType :=
    //     <<empty>>
    //   | ':' void
    //   | ':' TypeExpression
    //
    // BNF is above
    // but, we remove <<empty>> pattern, so token is always TypeToken::COLON
    function parseResultType() {
        consume(Token.COLON, 'ResultType should start with :');
        if (token === Token.NAME && value === 'void') {
            consume(Token.NAME);
            return {
                type: Syntax.VoidLiteral
            };
        }
        return parseTypeExpression();
    }

    // ParametersType :=
    //     RestParameterType
    //   | NonRestParametersType
    //   | NonRestParametersType ',' RestParameterType
    //
    // RestParameterType :=
    //     '...'
    //     '...' Identifier
    //
    // NonRestParametersType :=
    //     ParameterType ',' NonRestParametersType
    //   | ParameterType
    //   | OptionalParametersType
    //
    // OptionalParametersType :=
    //     OptionalParameterType
    //   | OptionalParameterType, OptionalParametersType
    //
    // OptionalParameterType := ParameterType=
    //
    // ParameterType := TypeExpression | Identifier ':' TypeExpression
    //
    // Identifier is "new" or "this"
    function parseParametersType() {
        var params = [], optionalSequence = false, expr, rest = false, startIndex, restStartIndex = index - 3, nameStartIndex;

        while (token !== Token.RPAREN) {
            if (token === Token.REST) {
                // RestParameterType
                consume(Token.REST);
                rest = true;
            }

            startIndex = previous;

            expr = parseTypeExpression();
            if (expr.type === Syntax.NameExpression && token === Token.COLON) {
                nameStartIndex = previous - expr.name.length;
                // Identifier ':' TypeExpression
                consume(Token.COLON);
                expr = maybeAddRange({
                    type: Syntax.ParameterType,
                    name: expr.name,
                    expression: parseTypeExpression()
                }, [nameStartIndex, previous]);
            }
            if (token === Token.EQUAL) {
                consume(Token.EQUAL);
                expr = maybeAddRange({
                    type: Syntax.OptionalType,
                    expression: expr
                }, [startIndex, previous]);
                optionalSequence = true;
            } else {
                if (optionalSequence) {
                    utility.throwError('unexpected token');
                }
            }
            if (rest) {
                expr = maybeAddRange({
                    type: Syntax.RestType,
                    expression: expr
                }, [restStartIndex, previous]);
            }
            params.push(expr);
            if (token !== Token.RPAREN) {
                expect(Token.COMMA);
            }
        }
        return params;
    }

    // FunctionType := 'function' FunctionSignatureType
    //
    // FunctionSignatureType :=
    //   | TypeParameters '(' ')' ResultType
    //   | TypeParameters '(' ParametersType ')' ResultType
    //   | TypeParameters '(' 'this' ':' TypeName ')' ResultType
    //   | TypeParameters '(' 'this' ':' TypeName ',' ParametersType ')' ResultType
    function parseFunctionType() {
        var isNew, thisBinding, params, result, fnType, startIndex = index - value.length;
        utility.assert(token === Token.NAME && value === 'function', 'FunctionType should start with \'function\'');
        consume(Token.NAME);

        // Google Closure Compiler is not implementing TypeParameters.
        // So we do not. if we don't get '(', we see it as error.
        expect(Token.LPAREN);

        isNew = false;
        params = [];
        thisBinding = null;
        if (token !== Token.RPAREN) {
            // ParametersType or 'this'
            if (token === Token.NAME &&
                    (value === 'this' || value === 'new')) {
                // 'this' or 'new'
                // 'new' is Closure Compiler extension
                isNew = value === 'new';
                consume(Token.NAME);
                expect(Token.COLON);
                thisBinding = parseTypeName();
                if (token === Token.COMMA) {
                    consume(Token.COMMA);
                    params = parseParametersType();
                }
            } else {
                params = parseParametersType();
            }
        }

        expect(Token.RPAREN);

        result = null;
        if (token === Token.COLON) {
            result = parseResultType();
        }

        fnType = maybeAddRange({
            type: Syntax.FunctionType,
            params: params,
            result: result
        }, [startIndex, previous]);
        if (thisBinding) {
            // avoid adding null 'new' and 'this' properties
            fnType['this'] = thisBinding;
            if (isNew) {
                fnType['new'] = true;
            }
        }
        return fnType;
    }

    // BasicTypeExpression :=
    //     '*'
    //   | 'null'
    //   | 'undefined'
    //   | TypeName
    //   | FunctionType
    //   | UnionType
    //   | RecordType
    //   | ArrayType
    function parseBasicTypeExpression() {
        var context, startIndex;
        switch (token) {
        case Token.STAR:
            consume(Token.STAR);
            return maybeAddRange({
                type: Syntax.AllLiteral
            }, [previous - 1, previous]);

        case Token.LPAREN:
            return parseUnionType();

        case Token.LBRACK:
            return parseArrayType();

        case Token.LBRACE:
            return parseRecordType();

        case Token.NAME:
            startIndex = index - value.length;

            if (value === 'null') {
                consume(Token.NAME);
                return maybeAddRange({
                    type: Syntax.NullLiteral
                }, [startIndex, previous]);
            }

            if (value === 'undefined') {
                consume(Token.NAME);
                return maybeAddRange({
                    type: Syntax.UndefinedLiteral
                }, [startIndex, previous]);
            }

            if (value === 'true' || value === 'false') {
                consume(Token.NAME);
                return maybeAddRange({
                    type: Syntax.BooleanLiteralType,
                    value: value === 'true'
                }, [startIndex, previous]);
            }

            context = Context.save();
            if (value === 'function') {
                try {
                    return parseFunctionType();
                } catch (e) {
                    context.restore();
                }
            }

            return parseTypeName();

        case Token.STRING:
            next();
            return maybeAddRange({
                type: Syntax.StringLiteralType,
                value: value
            }, [previous - value.length - 2, previous]);

        case Token.NUMBER:
            next();
            return maybeAddRange({
                type: Syntax.NumericLiteralType,
                value: value
            }, [previous - String(value).length, previous]);

        default:
            utility.throwError('unexpected token');
        }
    }

    // TypeExpression :=
    //     BasicTypeExpression
    //   | '?' BasicTypeExpression
    //   | '!' BasicTypeExpression
    //   | BasicTypeExpression '?'
    //   | BasicTypeExpression '!'
    //   | '?'
    //   | BasicTypeExpression '[]'
    function parseTypeExpression() {
        var expr, rangeStart;

        if (token === Token.QUESTION) {
            rangeStart = index - 1;
            consume(Token.QUESTION);
            if (token === Token.COMMA || token === Token.EQUAL || token === Token.RBRACE ||
                    token === Token.RPAREN || token === Token.PIPE || token === Token.EOF ||
                    token === Token.RBRACK || token === Token.GT) {
                return maybeAddRange({
                    type: Syntax.NullableLiteral
                }, [rangeStart, previous]);
            }
            return maybeAddRange({
                type: Syntax.NullableType,
                expression: parseBasicTypeExpression(),
                prefix: true
            }, [rangeStart, previous]);
        } else if (token === Token.BANG) {
            rangeStart = index - 1;
            consume(Token.BANG);
            return maybeAddRange({
                type: Syntax.NonNullableType,
                expression: parseBasicTypeExpression(),
                prefix: true
            }, [rangeStart, previous]);
        } else {
            rangeStart = previous;
        }

        expr = parseBasicTypeExpression();
        if (token === Token.BANG) {
            consume(Token.BANG);
            return maybeAddRange({
                type: Syntax.NonNullableType,
                expression: expr,
                prefix: false
            }, [rangeStart, previous]);
        }

        if (token === Token.QUESTION) {
            consume(Token.QUESTION);
            return maybeAddRange({
                type: Syntax.NullableType,
                expression: expr,
                prefix: false
            }, [rangeStart, previous]);
        }

        if (token === Token.LBRACK) {
            consume(Token.LBRACK);
            expect(Token.RBRACK, 'expected an array-style type declaration (' + value + '[])');
            return maybeAddRange({
                type: Syntax.TypeApplication,
                expression: maybeAddRange({
                    type: Syntax.NameExpression,
                    name: 'Array'
                }, [rangeStart, previous]),
                applications: [expr]
            }, [rangeStart, previous]);
        }

        return expr;
    }

    // TopLevelTypeExpression :=
    //      TypeExpression
    //    | TypeUnionList
    //
    // This rule is Google Closure Compiler extension, not ES4
    // like,
    //   { number | string }
    // If strict to ES4, we should write it as
    //   { (number|string) }
    function parseTop() {
        var expr, elements;

        expr = parseTypeExpression();
        if (token !== Token.PIPE) {
            return expr;
        }

        elements = [expr];
        consume(Token.PIPE);
        while (true) {
            elements.push(parseTypeExpression());
            if (token !== Token.PIPE) {
                break;
            }
            consume(Token.PIPE);
        }

        return maybeAddRange({
            type: Syntax.UnionType,
            elements: elements
        }, [0, index]);
    }

    function parseTopParamType() {
        var expr;

        if (token === Token.REST) {
            consume(Token.REST);
            return maybeAddRange({
                type: Syntax.RestType,
                expression: parseTop()
            }, [0, index]);
        }

        expr = parseTop();
        if (token === Token.EQUAL) {
            consume(Token.EQUAL);
            return maybeAddRange({
                type: Syntax.OptionalType,
                expression: expr
            }, [0, index]);
        }

        return expr;
    }

    function parseType(src, opt) {
        var expr;

        source = src;
        length = source.length;
        index = 0;
        previous = 0;
        addRange = opt && opt.range;
        rangeOffset = opt && opt.startIndex || 0;

        next();
        expr = parseTop();

        if (opt && opt.midstream) {
            return {
                expression: expr,
                index: previous
            };
        }

        if (token !== Token.EOF) {
            utility.throwError('not reach to EOF');
        }

        return expr;
    }

    function parseParamType(src, opt) {
        var expr;

        source = src;
        length = source.length;
        index = 0;
        previous = 0;
        addRange = opt && opt.range;
        rangeOffset = opt && opt.startIndex || 0;

        next();
        expr = parseTopParamType();

        if (opt && opt.midstream) {
            return {
                expression: expr,
                index: previous
            };
        }

        if (token !== Token.EOF) {
            utility.throwError('not reach to EOF');
        }

        return expr;
    }

    function stringifyImpl(node, compact, topLevel) {
        var result, i, iz;

        switch (node.type) {
        case Syntax.NullableLiteral:
            result = '?';
            break;

        case Syntax.AllLiteral:
            result = '*';
            break;

        case Syntax.NullLiteral:
            result = 'null';
            break;

        case Syntax.UndefinedLiteral:
            result = 'undefined';
            break;

        case Syntax.VoidLiteral:
            result = 'void';
            break;

        case Syntax.UnionType:
            if (!topLevel) {
                result = '(';
            } else {
                result = '';
            }

            for (i = 0, iz = node.elements.length; i < iz; ++i) {
                result += stringifyImpl(node.elements[i], compact);
                if ((i + 1) !== iz) {
                    result += compact ? '|' : ' | ';
                }
            }

            if (!topLevel) {
                result += ')';
            }
            break;

        case Syntax.ArrayType:
            result = '[';
            for (i = 0, iz = node.elements.length; i < iz; ++i) {
                result += stringifyImpl(node.elements[i], compact);
                if ((i + 1) !== iz) {
                    result += compact ? ',' : ', ';
                }
            }
            result += ']';
            break;

        case Syntax.RecordType:
            result = '{';
            for (i = 0, iz = node.fields.length; i < iz; ++i) {
                result += stringifyImpl(node.fields[i], compact);
                if ((i + 1) !== iz) {
                    result += compact ? ',' : ', ';
                }
            }
            result += '}';
            break;

        case Syntax.FieldType:
            if (node.value) {
                result = node.key + (compact ? ':' : ': ') + stringifyImpl(node.value, compact);
            } else {
                result = node.key;
            }
            break;

        case Syntax.FunctionType:
            result = compact ? 'function(' : 'function (';

            if (node['this']) {
                if (node['new']) {
                    result += (compact ? 'new:' : 'new: ');
                } else {
                    result += (compact ? 'this:' : 'this: ');
                }

                result += stringifyImpl(node['this'], compact);

                if (node.params.length !== 0) {
                    result += compact ? ',' : ', ';
                }
            }

            for (i = 0, iz = node.params.length; i < iz; ++i) {
                result += stringifyImpl(node.params[i], compact);
                if ((i + 1) !== iz) {
                    result += compact ? ',' : ', ';
                }
            }

            result += ')';

            if (node.result) {
                result += (compact ? ':' : ': ') + stringifyImpl(node.result, compact);
            }
            break;

        case Syntax.ParameterType:
            result = node.name + (compact ? ':' : ': ') + stringifyImpl(node.expression, compact);
            break;

        case Syntax.RestType:
            result = '...';
            if (node.expression) {
                result += stringifyImpl(node.expression, compact);
            }
            break;

        case Syntax.NonNullableType:
            if (node.prefix) {
                result = '!' + stringifyImpl(node.expression, compact);
            } else {
                result = stringifyImpl(node.expression, compact) + '!';
            }
            break;

        case Syntax.OptionalType:
            result = stringifyImpl(node.expression, compact) + '=';
            break;

        case Syntax.NullableType:
            if (node.prefix) {
                result = '?' + stringifyImpl(node.expression, compact);
            } else {
                result = stringifyImpl(node.expression, compact) + '?';
            }
            break;

        case Syntax.NameExpression:
            result = node.name;
            break;

        case Syntax.TypeApplication:
            result = stringifyImpl(node.expression, compact) + '.<';
            for (i = 0, iz = node.applications.length; i < iz; ++i) {
                result += stringifyImpl(node.applications[i], compact);
                if ((i + 1) !== iz) {
                    result += compact ? ',' : ', ';
                }
            }
            result += '>';
            break;

        case Syntax.StringLiteralType:
            result = '"' + node.value + '"';
            break;

        case Syntax.NumericLiteralType:
            result = String(node.value);
            break;

        case Syntax.BooleanLiteralType:
            result = String(node.value);
            break;

        default:
            utility.throwError('Unknown type ' + node.type);
        }

        return result;
    }

    function stringify(node, options) {
        if (options == null) {
            options = {};
        }
        return stringifyImpl(node, options.compact, options.topLevel);
    }

    exports.parseType = parseType;
    exports.parseParamType = parseParamType;
    exports.stringify = stringify;
    exports.Syntax = Syntax;
}());
/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/doctrine/lib/utility.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
 * @fileoverview Utilities for Doctrine
 * @author Yusuke Suzuki <utatane.tea@gmail.com>
 */


(function () {
    'use strict';

    var VERSION;

    VERSION = (__webpack_require__("../../../node_modules/doctrine/package.json")/* .version */ .i8);
    exports.VERSION = VERSION;

    function DoctrineError(message) {
        this.name = 'DoctrineError';
        this.message = message;
    }
    DoctrineError.prototype = (function () {
        var Middle = function () { };
        Middle.prototype = Error.prototype;
        return new Middle();
    }());
    DoctrineError.prototype.constructor = DoctrineError;
    exports.DoctrineError = DoctrineError;

    function throwError(message) {
        throw new DoctrineError(message);
    }
    exports.throwError = throwError;

    exports.assert = __webpack_require__("../../../node_modules/assert/build/assert.js");
}());

/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/esutils/lib/ast.js":
/***/ ((module) => {

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    function isExpression(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'ArrayExpression':
            case 'AssignmentExpression':
            case 'BinaryExpression':
            case 'CallExpression':
            case 'ConditionalExpression':
            case 'FunctionExpression':
            case 'Identifier':
            case 'Literal':
            case 'LogicalExpression':
            case 'MemberExpression':
            case 'NewExpression':
            case 'ObjectExpression':
            case 'SequenceExpression':
            case 'ThisExpression':
            case 'UnaryExpression':
            case 'UpdateExpression':
                return true;
        }
        return false;
    }

    function isIterationStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'DoWhileStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'WhileStatement':
                return true;
        }
        return false;
    }

    function isStatement(node) {
        if (node == null) { return false; }
        switch (node.type) {
            case 'BlockStatement':
            case 'BreakStatement':
            case 'ContinueStatement':
            case 'DebuggerStatement':
            case 'DoWhileStatement':
            case 'EmptyStatement':
            case 'ExpressionStatement':
            case 'ForInStatement':
            case 'ForStatement':
            case 'IfStatement':
            case 'LabeledStatement':
            case 'ReturnStatement':
            case 'SwitchStatement':
            case 'ThrowStatement':
            case 'TryStatement':
            case 'VariableDeclaration':
            case 'WhileStatement':
            case 'WithStatement':
                return true;
        }
        return false;
    }

    function isSourceElement(node) {
      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
    }

    function trailingStatement(node) {
        switch (node.type) {
        case 'IfStatement':
            if (node.alternate != null) {
                return node.alternate;
            }
            return node.consequent;

        case 'LabeledStatement':
        case 'ForStatement':
        case 'ForInStatement':
        case 'WhileStatement':
        case 'WithStatement':
            return node.body;
        }
        return null;
    }

    function isProblematicIfStatement(node) {
        var current;

        if (node.type !== 'IfStatement') {
            return false;
        }
        if (node.alternate == null) {
            return false;
        }
        current = node.consequent;
        do {
            if (current.type === 'IfStatement') {
                if (current.alternate == null)  {
                    return true;
                }
            }
            current = trailingStatement(current);
        } while (current);

        return false;
    }

    module.exports = {
        isExpression: isExpression,
        isStatement: isStatement,
        isIterationStatement: isIterationStatement,
        isSourceElement: isSourceElement,
        isProblematicIfStatement: isProblematicIfStatement,

        trailingStatement: trailingStatement
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/esutils/lib/code.js":
/***/ ((module) => {

/*
  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

    // See `tools/generate-identifier-regex.js`.
    ES5Regex = {
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
        // ECMAScript 5.1/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
    };

    ES6Regex = {
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
        // ECMAScript 6/Unicode v9.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    function isDecimalDigit(ch) {
        return 0x30 <= ch && ch <= 0x39;  // 0..9
    }

    function isHexDigit(ch) {
        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
            0x61 <= ch && ch <= 0x66 ||     // a..f
            0x41 <= ch && ch <= 0x46;       // A..F
    }

    function isOctalDigit(ch) {
        return ch >= 0x30 && ch <= 0x37;  // 0..7
    }

    // 7.2 White Space

    NON_ASCII_WHITESPACES = [
        0x1680,
        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
        0x202F, 0x205F,
        0x3000,
        0xFEFF
    ];

    function isWhiteSpace(ch) {
        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
    }

    // 7.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
        return cu1 + cu2;
    }

    IDENTIFIER_START = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_START[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    IDENTIFIER_PART = new Array(0x80);
    for(ch = 0; ch < 0x80; ++ch) {
        IDENTIFIER_PART[ch] =
            ch >= 0x61 && ch <= 0x7A ||  // a..z
            ch >= 0x41 && ch <= 0x5A ||  // A..Z
            ch >= 0x30 && ch <= 0x39 ||  // 0..9
            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
    }

    function isIdentifierStartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES5(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    function isIdentifierStartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
    }

    function isIdentifierPartES6(ch) {
        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
    }

    module.exports = {
        isDecimalDigit: isDecimalDigit,
        isHexDigit: isHexDigit,
        isOctalDigit: isOctalDigit,
        isWhiteSpace: isWhiteSpace,
        isLineTerminator: isLineTerminator,
        isIdentifierStartES5: isIdentifierStartES5,
        isIdentifierPartES5: isIdentifierPartES5,
        isIdentifierStartES6: isIdentifierStartES6,
        isIdentifierPartES6: isIdentifierPartES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/esutils/lib/keyword.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function () {
    'use strict';

    var code = __webpack_require__("../../../node_modules/esutils/lib/code.js");

    function isStrictModeReservedWordES6(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isKeywordES5(id, strict) {
        // yield should not be treated as keyword under non-strict mode.
        if (!strict && id === 'yield') {
            return false;
        }
        return isKeywordES6(id, strict);
    }

    function isKeywordES6(id, strict) {
        if (strict && isStrictModeReservedWordES6(id)) {
            return true;
        }

        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    function isReservedWordES5(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
    }

    function isReservedWordES6(id, strict) {
        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    function isIdentifierNameES5(id) {
        var i, iz, ch;

        if (id.length === 0) { return false; }

        ch = id.charCodeAt(0);
        if (!code.isIdentifierStartES5(ch)) {
            return false;
        }

        for (i = 1, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (!code.isIdentifierPartES5(ch)) {
                return false;
            }
        }
        return true;
    }

    function decodeUtf16(lead, trail) {
        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
    }

    function isIdentifierNameES6(id) {
        var i, iz, ch, lowCh, check;

        if (id.length === 0) { return false; }

        check = code.isIdentifierStartES6;
        for (i = 0, iz = id.length; i < iz; ++i) {
            ch = id.charCodeAt(i);
            if (0xD800 <= ch && ch <= 0xDBFF) {
                ++i;
                if (i >= iz) { return false; }
                lowCh = id.charCodeAt(i);
                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                    return false;
                }
                ch = decodeUtf16(ch, lowCh);
            }
            if (!check(ch)) {
                return false;
            }
            check = code.isIdentifierPartES6;
        }
        return true;
    }

    function isIdentifierES5(id, strict) {
        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
    }

    function isIdentifierES6(id, strict) {
        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
    }

    module.exports = {
        isKeywordES5: isKeywordES5,
        isKeywordES6: isKeywordES6,
        isReservedWordES5: isReservedWordES5,
        isReservedWordES6: isReservedWordES6,
        isRestrictedWord: isRestrictedWord,
        isIdentifierNameES5: isIdentifierNameES5,
        isIdentifierNameES6: isIdentifierNameES6,
        isIdentifierES5: isIdentifierES5,
        isIdentifierES6: isIdentifierES6
    };
}());
/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/esutils/lib/utils.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


(function () {
    'use strict';

    exports.ast = __webpack_require__("../../../node_modules/esutils/lib/ast.js");
    exports.code = __webpack_require__("../../../node_modules/esutils/lib/code.js");
    exports.keyword = __webpack_require__("../../../node_modules/esutils/lib/keyword.js");
}());
/* vim: set sw=4 ts=4 et tw=80 : */


/***/ }),

/***/ "../../../node_modules/for-each/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__("../../../node_modules/is-callable/index.js");

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ "../../../node_modules/function-bind/implementation.js":
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "../../../node_modules/function-bind/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__("../../../node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "../../../node_modules/get-intrinsic/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__("../../../node_modules/has-symbols/index.js")();
var hasProto = __webpack_require__("../../../node_modules/has-proto/index.js")();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__("../../../node_modules/function-bind/index.js");
var hasOwn = __webpack_require__("../../../node_modules/hasown/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "../../../node_modules/gopd/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__("../../../node_modules/get-intrinsic/index.js");

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "../../../node_modules/has-property-descriptors/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__("../../../node_modules/get-intrinsic/index.js");

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ "../../../node_modules/has-proto/index.js":
/***/ ((module) => {

"use strict";


var test = {
	foo: {}
};

var $Object = Object;

module.exports = function hasProto() {
	return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
};


/***/ }),

/***/ "../../../node_modules/has-symbols/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__("../../../node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "../../../node_modules/has-symbols/shams.js":
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "../../../node_modules/has-tostringtag/shams.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__("../../../node_modules/has-symbols/shams.js");

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ "../../../node_modules/hasown/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__("../../../node_modules/function-bind/index.js");

/** @type {(o: {}, p: PropertyKey) => p is keyof o} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ "../../../node_modules/inherits/inherits_browser.js":
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "../../../node_modules/is-arguments/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__("../../../node_modules/has-tostringtag/shams.js")();
var callBound = __webpack_require__("../../../node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ "../../../node_modules/is-callable/index.js":
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ "../../../node_modules/is-generator-function/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__("../../../node_modules/has-tostringtag/shams.js")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ "../../../node_modules/is-nan/implementation.js":
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ "../../../node_modules/is-nan/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__("../../../node_modules/call-bind/index.js");
var define = __webpack_require__("../../../node_modules/define-properties/index.js");

var implementation = __webpack_require__("../../../node_modules/is-nan/implementation.js");
var getPolyfill = __webpack_require__("../../../node_modules/is-nan/polyfill.js");
var shim = __webpack_require__("../../../node_modules/is-nan/shim.js");

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "../../../node_modules/is-nan/polyfill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__("../../../node_modules/is-nan/implementation.js");

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ "../../../node_modules/is-nan/shim.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__("../../../node_modules/define-properties/index.js");
var getPolyfill = __webpack_require__("../../../node_modules/is-nan/polyfill.js");

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "../../../node_modules/is-typed-array/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var whichTypedArray = __webpack_require__("../../../node_modules/which-typed-array/index.js");

module.exports = function isTypedArray(value) {
	return !!whichTypedArray(value);
};


/***/ }),

/***/ "../../../node_modules/lodash/_DataView.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js"),
    root = __webpack_require__("../../../node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "../../../node_modules/lodash/_Hash.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__("../../../node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__("../../../node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__("../../../node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__("../../../node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__("../../../node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "../../../node_modules/lodash/_ListCache.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__("../../../node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__("../../../node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__("../../../node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__("../../../node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__("../../../node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "../../../node_modules/lodash/_Map.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js"),
    root = __webpack_require__("../../../node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "../../../node_modules/lodash/_MapCache.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__("../../../node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__("../../../node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__("../../../node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__("../../../node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__("../../../node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "../../../node_modules/lodash/_Promise.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js"),
    root = __webpack_require__("../../../node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "../../../node_modules/lodash/_Set.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js"),
    root = __webpack_require__("../../../node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "../../../node_modules/lodash/_SetCache.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__("../../../node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__("../../../node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__("../../../node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "../../../node_modules/lodash/_Stack.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__("../../../node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__("../../../node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__("../../../node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__("../../../node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__("../../../node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__("../../../node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "../../../node_modules/lodash/_Symbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__("../../../node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../../../node_modules/lodash/_Uint8Array.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__("../../../node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "../../../node_modules/lodash/_WeakMap.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js"),
    root = __webpack_require__("../../../node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "../../../node_modules/lodash/_arrayFilter.js":
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "../../../node_modules/lodash/_arrayLikeKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__("../../../node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__("../../../node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__("../../../node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__("../../../node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__("../../../node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "../../../node_modules/lodash/_arrayMap.js":
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "../../../node_modules/lodash/_arrayPush.js":
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "../../../node_modules/lodash/_arraySome.js":
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "../../../node_modules/lodash/_assocIndexOf.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__("../../../node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "../../../node_modules/lodash/_baseAssignValue.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__("../../../node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "../../../node_modules/lodash/_baseFor.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__("../../../node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "../../../node_modules/lodash/_baseForOwn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__("../../../node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__("../../../node_modules/lodash/keys.js");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ "../../../node_modules/lodash/_baseGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__("../../../node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__("../../../node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "../../../node_modules/lodash/_baseGetAllKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__("../../../node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__("../../../node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "../../../node_modules/lodash/_baseGetTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("../../../node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__("../../../node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__("../../../node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../../../node_modules/lodash/_baseHasIn.js":
/***/ ((module) => {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIsArguments.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("../../../node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__("../../../node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIsEqual.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__("../../../node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__("../../../node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIsEqualDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__("../../../node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__("../../../node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__("../../../node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__("../../../node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__("../../../node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__("../../../node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__("../../../node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIsMatch.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__("../../../node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__("../../../node_modules/lodash/_baseIsEqual.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIsNative.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__("../../../node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__("../../../node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__("../../../node_modules/lodash/isObject.js"),
    toSource = __webpack_require__("../../../node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIsTypedArray.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("../../../node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__("../../../node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__("../../../node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "../../../node_modules/lodash/_baseIteratee.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMatches = __webpack_require__("../../../node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__("../../../node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__("../../../node_modules/lodash/identity.js"),
    isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    property = __webpack_require__("../../../node_modules/lodash/property.js");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ "../../../node_modules/lodash/_baseKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__("../../../node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__("../../../node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "../../../node_modules/lodash/_baseMatches.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMatch = __webpack_require__("../../../node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__("../../../node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__("../../../node_modules/lodash/_matchesStrictComparable.js");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ "../../../node_modules/lodash/_baseMatchesProperty.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__("../../../node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__("../../../node_modules/lodash/get.js"),
    hasIn = __webpack_require__("../../../node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__("../../../node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__("../../../node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__("../../../node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__("../../../node_modules/lodash/_toKey.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ "../../../node_modules/lodash/_baseProperty.js":
/***/ ((module) => {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ "../../../node_modules/lodash/_basePropertyDeep.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__("../../../node_modules/lodash/_baseGet.js");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ "../../../node_modules/lodash/_baseTimes.js":
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "../../../node_modules/lodash/_baseToString.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("../../../node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__("../../../node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__("../../../node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "../../../node_modules/lodash/_baseUnary.js":
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "../../../node_modules/lodash/_cacheHas.js":
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "../../../node_modules/lodash/_castPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    isKey = __webpack_require__("../../../node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__("../../../node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__("../../../node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "../../../node_modules/lodash/_coreJsData.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__("../../../node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "../../../node_modules/lodash/_createBaseFor.js":
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "../../../node_modules/lodash/_defineProperty.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "../../../node_modules/lodash/_equalArrays.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__("../../../node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__("../../../node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__("../../../node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "../../../node_modules/lodash/_equalByTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("../../../node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__("../../../node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__("../../../node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__("../../../node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__("../../../node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__("../../../node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "../../../node_modules/lodash/_equalObjects.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__("../../../node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "../../../node_modules/lodash/_freeGlobal.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "../../../node_modules/lodash/_getAllKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__("../../../node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__("../../../node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__("../../../node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "../../../node_modules/lodash/_getMapData.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__("../../../node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "../../../node_modules/lodash/_getMatchData.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isStrictComparable = __webpack_require__("../../../node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__("../../../node_modules/lodash/keys.js");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ "../../../node_modules/lodash/_getNative.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__("../../../node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__("../../../node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "../../../node_modules/lodash/_getRawTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__("../../../node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../../../node_modules/lodash/_getSymbols.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__("../../../node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__("../../../node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "../../../node_modules/lodash/_getTag.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__("../../../node_modules/lodash/_DataView.js"),
    Map = __webpack_require__("../../../node_modules/lodash/_Map.js"),
    Promise = __webpack_require__("../../../node_modules/lodash/_Promise.js"),
    Set = __webpack_require__("../../../node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__("../../../node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__("../../../node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__("../../../node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "../../../node_modules/lodash/_getValue.js":
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "../../../node_modules/lodash/_hasPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__("../../../node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__("../../../node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__("../../../node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__("../../../node_modules/lodash/isLength.js"),
    toKey = __webpack_require__("../../../node_modules/lodash/_toKey.js");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ "../../../node_modules/lodash/_hashClear.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("../../../node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "../../../node_modules/lodash/_hashDelete.js":
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "../../../node_modules/lodash/_hashGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("../../../node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "../../../node_modules/lodash/_hashHas.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("../../../node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "../../../node_modules/lodash/_hashSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__("../../../node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "../../../node_modules/lodash/_isIndex.js":
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "../../../node_modules/lodash/_isKey.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__("../../../node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__("../../../node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "../../../node_modules/lodash/_isKeyable.js":
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "../../../node_modules/lodash/_isMasked.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__("../../../node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "../../../node_modules/lodash/_isPrototype.js":
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "../../../node_modules/lodash/_isStrictComparable.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__("../../../node_modules/lodash/isObject.js");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ "../../../node_modules/lodash/_listCacheClear.js":
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "../../../node_modules/lodash/_listCacheDelete.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("../../../node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "../../../node_modules/lodash/_listCacheGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("../../../node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "../../../node_modules/lodash/_listCacheHas.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("../../../node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "../../../node_modules/lodash/_listCacheSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__("../../../node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "../../../node_modules/lodash/_mapCacheClear.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__("../../../node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__("../../../node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__("../../../node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "../../../node_modules/lodash/_mapCacheDelete.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("../../../node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "../../../node_modules/lodash/_mapCacheGet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("../../../node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "../../../node_modules/lodash/_mapCacheHas.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("../../../node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "../../../node_modules/lodash/_mapCacheSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__("../../../node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "../../../node_modules/lodash/_mapToArray.js":
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "../../../node_modules/lodash/_matchesStrictComparable.js":
/***/ ((module) => {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ "../../../node_modules/lodash/_memoizeCapped.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__("../../../node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "../../../node_modules/lodash/_nativeCreate.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__("../../../node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "../../../node_modules/lodash/_nativeKeys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__("../../../node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "../../../node_modules/lodash/_nodeUtil.js":
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__("../../../node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ "../../../node_modules/lodash/_objectToString.js":
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../../../node_modules/lodash/_overArg.js":
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "../../../node_modules/lodash/_root.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__("../../../node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../../../node_modules/lodash/_setCacheAdd.js":
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "../../../node_modules/lodash/_setCacheHas.js":
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "../../../node_modules/lodash/_setToArray.js":
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "../../../node_modules/lodash/_stackClear.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__("../../../node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "../../../node_modules/lodash/_stackDelete.js":
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "../../../node_modules/lodash/_stackGet.js":
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "../../../node_modules/lodash/_stackHas.js":
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "../../../node_modules/lodash/_stackSet.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__("../../../node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__("../../../node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__("../../../node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "../../../node_modules/lodash/_stringToPath.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__("../../../node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "../../../node_modules/lodash/_toKey.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__("../../../node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "../../../node_modules/lodash/_toSource.js":
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "../../../node_modules/lodash/eq.js":
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "../../../node_modules/lodash/get.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__("../../../node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "../../../node_modules/lodash/hasIn.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHasIn = __webpack_require__("../../../node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__("../../../node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ "../../../node_modules/lodash/identity.js":
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "../../../node_modules/lodash/isArguments.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__("../../../node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__("../../../node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "../../../node_modules/lodash/isArray.js":
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "../../../node_modules/lodash/isArrayLike.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__("../../../node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__("../../../node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "../../../node_modules/lodash/isBuffer.js":
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__("../../../node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__("../../../node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ "../../../node_modules/lodash/isFunction.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("../../../node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__("../../../node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "../../../node_modules/lodash/isLength.js":
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "../../../node_modules/lodash/isObject.js":
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../../../node_modules/lodash/isObjectLike.js":
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../../../node_modules/lodash/isSymbol.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__("../../../node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__("../../../node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../../../node_modules/lodash/isTypedArray.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__("../../../node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__("../../../node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__("../../../node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "../../../node_modules/lodash/keys.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__("../../../node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__("../../../node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__("../../../node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "../../../node_modules/lodash/mapValues.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__("../../../node_modules/lodash/_baseAssignValue.js"),
    baseForOwn = __webpack_require__("../../../node_modules/lodash/_baseForOwn.js"),
    baseIteratee = __webpack_require__("../../../node_modules/lodash/_baseIteratee.js");

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;


/***/ }),

/***/ "../../../node_modules/lodash/memoize.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__("../../../node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "../../../node_modules/lodash/property.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__("../../../node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__("../../../node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__("../../../node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__("../../../node_modules/lodash/_toKey.js");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ "../../../node_modules/lodash/stubArray.js":
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "../../../node_modules/lodash/stubFalse.js":
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "../../../node_modules/lodash/toString.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__("../../../node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "../../../node_modules/object-is/implementation.js":
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ "../../../node_modules/object-is/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__("../../../node_modules/define-properties/index.js");
var callBind = __webpack_require__("../../../node_modules/call-bind/index.js");

var implementation = __webpack_require__("../../../node_modules/object-is/implementation.js");
var getPolyfill = __webpack_require__("../../../node_modules/object-is/polyfill.js");
var shim = __webpack_require__("../../../node_modules/object-is/shim.js");

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "../../../node_modules/object-is/polyfill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__("../../../node_modules/object-is/implementation.js");

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ "../../../node_modules/object-is/shim.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__("../../../node_modules/object-is/polyfill.js");
var define = __webpack_require__("../../../node_modules/define-properties/index.js");

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "../../../node_modules/object-keys/implementation.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__("../../../node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ "../../../node_modules/object-keys/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__("../../../node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__("../../../node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ "../../../node_modules/object-keys/isArguments.js":
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ "../../../node_modules/object.assign/implementation.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// modified from https://github.com/es-shims/es6-shim
var objectKeys = __webpack_require__("../../../node_modules/object-keys/index.js");
var hasSymbols = __webpack_require__("../../../node_modules/has-symbols/shams.js")();
var callBound = __webpack_require__("../../../node_modules/call-bind/callBound.js");
var toObject = Object;
var $push = callBound('Array.prototype.push');
var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

// eslint-disable-next-line no-unused-vars
module.exports = function assign(target, source1) {
	if (target == null) { throw new TypeError('target must be an object'); }
	var to = toObject(target); // step 1
	if (arguments.length === 1) {
		return to; // step 2
	}
	for (var s = 1; s < arguments.length; ++s) {
		var from = toObject(arguments[s]); // step 3.a.i

		// step 3.a.ii:
		var keys = objectKeys(from);
		var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
		if (getSymbols) {
			var syms = getSymbols(from);
			for (var j = 0; j < syms.length; ++j) {
				var key = syms[j];
				if ($propIsEnumerable(from, key)) {
					$push(keys, key);
				}
			}
		}

		// step 3.a.iii:
		for (var i = 0; i < keys.length; ++i) {
			var nextKey = keys[i];
			if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
				var propValue = from[nextKey]; // step 3.a.iii.2.a
				to[nextKey] = propValue; // step 3.a.iii.2.b
			}
		}
	}

	return to; // step 4
};


/***/ }),

/***/ "../../../node_modules/object.assign/polyfill.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__("../../../node_modules/object.assign/implementation.js");

var lacksProperEnumerationOrder = function () {
	if (!Object.assign) {
		return false;
	}
	/*
	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
	 * note: this does not detect the bug unless there's 20 characters
	 */
	var str = 'abcdefghijklmnopqrst';
	var letters = str.split('');
	var map = {};
	for (var i = 0; i < letters.length; ++i) {
		map[letters[i]] = letters[i];
	}
	var obj = Object.assign({}, map);
	var actual = '';
	for (var k in obj) {
		actual += k;
	}
	return str !== actual;
};

var assignHasPendingExceptions = function () {
	if (!Object.assign || !Object.preventExtensions) {
		return false;
	}
	/*
	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
	 * which is 72% slower than our shim, and Firefox 40's native implementation.
	 */
	var thrower = Object.preventExtensions({ 1: 2 });
	try {
		Object.assign(thrower, 'xy');
	} catch (e) {
		return thrower[1] === 'y';
	}
	return false;
};

module.exports = function getPolyfill() {
	if (!Object.assign) {
		return implementation;
	}
	if (lacksProperEnumerationOrder()) {
		return implementation;
	}
	if (assignHasPendingExceptions()) {
		return implementation;
	}
	return Object.assign;
};


/***/ }),

/***/ "../../../node_modules/process/browser.js":
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../../node_modules/set-function-length/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__("../../../node_modules/get-intrinsic/index.js");
var define = __webpack_require__("../../../node_modules/define-data-property/index.js");
var hasDescriptors = __webpack_require__("../../../node_modules/has-property-descriptors/index.js")();
var gOPD = __webpack_require__("../../../node_modules/gopd/index.js");

var $TypeError = GetIntrinsic('%TypeError%');
var $floor = GetIntrinsic('%Math.floor%');

module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(fn, 'length', length, true, true);
		} else {
			define(fn, 'length', length);
		}
	}
	return fn;
};


/***/ }),

/***/ "../../../node_modules/ts-dedent/esm/index.js":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   Z: () => (/* binding */ dedent)
/* harmony export */ });
function dedent(templ) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    var strings = Array.from(typeof templ === 'string' ? [templ] : templ);
    strings[strings.length - 1] = strings[strings.length - 1].replace(/\r?\n([\t ]*)$/, '');
    var indentLengths = strings.reduce(function (arr, str) {
        var matches = str.match(/\n([\t ]+|(?!\s).)/g);
        if (matches) {
            return arr.concat(matches.map(function (match) { var _a, _b; return (_b = (_a = match.match(/[\t ]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0; }));
        }
        return arr;
    }, []);
    if (indentLengths.length) {
        var pattern_1 = new RegExp("\n[\t ]{" + Math.min.apply(Math, indentLengths) + "}", 'g');
        strings = strings.map(function (str) { return str.replace(pattern_1, '\n'); });
    }
    strings[0] = strings[0].replace(/^\r?\n/, '');
    var string = strings[0];
    values.forEach(function (value, i) {
        var endentations = string.match(/(?:^|\n)( *)$/);
        var endentation = endentations ? endentations[1] : '';
        var indentedValue = value;
        if (typeof value === 'string' && value.includes('\n')) {
            indentedValue = String(value)
                .split('\n')
                .map(function (str, i) {
                return i === 0 ? str : "" + endentation + str;
            })
                .join('\n');
        }
        string += indentedValue + strings[i + 1];
    });
    return string;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dedent);
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../../../node_modules/util/support/isBufferBrowser.js":
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "../../../node_modules/util/support/types.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__("../../../node_modules/is-arguments/index.js");
var isGeneratorFunction = __webpack_require__("../../../node_modules/is-generator-function/index.js");
var whichTypedArray = __webpack_require__("../../../node_modules/which-typed-array/index.js");
var isTypedArray = __webpack_require__("../../../node_modules/is-typed-array/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ "../../../node_modules/util/util.js":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__("../../../node_modules/process/browser.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__("../../../node_modules/util/support/types.js");

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__("../../../node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__("../../../node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ "../../../node_modules/which-typed-array/index.js":
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__("../../../node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__("../../../node_modules/available-typed-arrays/index.js");
var callBind = __webpack_require__("../../../node_modules/call-bind/index.js");
var callBound = __webpack_require__("../../../node_modules/call-bind/callBound.js");
var gOPD = __webpack_require__("../../../node_modules/gopd/index.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__("../../../node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		var fn = arr.slice || arr.set;
		if (fn) {
			cache['$' + typedArray] = callBind(fn);
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var found = false;
	forEach(cache, function (getter, typedArray) {
		if (!found) {
			try {
				if ('$' + getter(value) === typedArray) {
					found = $slice(typedArray, 1);
				}
			} catch (e) { /**/ }
		}
	});
	return found;
};

var trySlices = function tryAllSlices(value) {
	var found = false;
	forEach(cache, function (getter, name) {
		if (!found) {
			try {
				getter(value);
				found = $slice(name, 1);
			} catch (e) { /**/ }
		}
	});
	return found;
};

module.exports = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};


/***/ }),

/***/ "../../../node_modules/doctrine/package.json":
/***/ ((module) => {

"use strict";
module.exports = {"i8":"3.0.0"};

/***/ })

}]);
//# sourceMappingURL=1598.6cc8d6d0.iframe.bundle.js.map