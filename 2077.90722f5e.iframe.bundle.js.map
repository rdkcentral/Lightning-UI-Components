{"version":3,"file":"2077.90722f5e.iframe.bundle.js","mappingsxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;;AAIA;AACA;AAKA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AArIA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmxKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAOA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;AAIA;AACA;AAKA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AASA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AA5HA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAysources":["webpack://lightning-ui-docs/","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Checkbox/Checkbox.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Checkbox/Checkbox.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ListItem/ListItem.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ListItem/ListItem.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/Toggle.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/Toggle.js"],"sourcesContent":[null,"/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const strokeWidth = theme.stroke.sm;\n  const size = theme.spacer.xxl;\n  return {\n    alpha: theme.alpha.primary,\n    width: size,\n    height: size,\n    iconWidth: theme.spacer.lg,\n    iconHeight: theme.spacer.lg,\n    icon: theme.asset.check,\n    radius: theme.radius.xs,\n    strokeWidth\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    strokeColor: theme.color.strokeNeutralSecondary,\n    checkColor: theme.color.fillInverse,\n    backgroundColor: theme.color.fillInverseSecondary,\n    backgroundColorChecked: theme.color.fillNeutral\n  },\n  inverse: {\n    strokeColor: theme.color.strokeInverseSecondary,\n    checkColor: theme.color.fillNeutral,\n    backgroundColor: theme.color.fillNeutralSecondary,\n    backgroundColorChecked: theme.color.fillInverse\n  },\n  brand: {\n    strokeColor: theme.color.strokeNeutralSecondary,\n    checkColor: theme.color.fillInverse,\n    backgroundColor: theme.color.fillNeutralSecondary,\n    backgroundColorChecked: theme.color.fillBrand\n  }\n});\n\nexport const mode = theme => ({\n  disabled: { alpha: theme.alpha.inactive }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Icon from '../Icon';\nimport Base from '../Base';\nimport * as styles from './Checkbox.styles';\n\nexport default class Checkbox extends Base {\n  static get __componentName() {\n    return 'Checkbox';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    const center = { mount: 0.5, x: w => w / 2, y: h => h / 2 };\n    return {\n      Body: {\n        rtt: true, // ensures the background color doesn't bleed into the checkbox icon when disabled\n        ...center,\n        Check: {\n          type: Icon,\n          ...center,\n          alpha: 0\n        }\n      },\n      Stroke: center\n    };\n  }\n\n  static get tags() {\n    return ['Check', 'Body', 'Stroke'];\n  }\n\n  static get properties() {\n    return ['checked'];\n  }\n\n  static get aliasStyles() {\n    return [\n      { prev: 'checkSrc', curr: 'icon' },\n      { prev: 'checkH', curr: 'iconHeight' },\n      { prev: 'checkW', curr: 'iconWidth' },\n      { prev: 'checkHeight', curr: 'iconHeight' },\n      { prev: 'checkWidth', curr: 'iconWidth' }\n    ];\n  }\n\n  _update() {\n    this._updateBody();\n    this._updateStroke();\n    this._updateCheck();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n    this._updateOpacity();\n  }\n\n  _updateCheck() {\n    this._Check.patch({\n      w: this.style.iconWidth,\n      h: this.style.iconHeight,\n      icon: this.style.icon,\n      style: { color: this.style.checkColor }\n    });\n\n    const alphaPatch = {\n      alpha: this.checked ? 1 : 0\n    };\n\n    this.applySmooth(this._Check, alphaPatch);\n  }\n\n  _updateBody() {\n    const bodyColor = this.checked\n      ? this.style.backgroundColorChecked\n      : this.style.backgroundColor;\n\n    // if the inner checkbox should be square, a rounded corner radius can still be applied to the stroke\n    const radius =\n      this.style.radius >= this.w / 2\n        ? (this.w - this.style.strokeWidth - 2) / 2\n        : 0;\n\n    this._Body.patch({\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - this.style.strokeWidth * 2 - 2,\n        this.h - this.style.strokeWidth * 2 - 2,\n        radius,\n        0,\n        null,\n        true,\n        bodyColor\n      )\n    });\n  }\n\n  _updateStroke() {\n    this._Stroke.patch({\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - 2,\n        this.h - 2,\n        this.style.radius,\n        this.style.strokeWidth,\n        this.style.strokeColor,\n        false\n      )\n    });\n  }\n\n  _updateOpacity() {\n    this.applySmooth(this, { alpha: this.style.alpha });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport utils from '../../utils';\n\nexport const base = theme => ({\n  alpha: theme.alpha.primary,\n  descriptionTextStyle: {\n    ...theme.typography.body3,\n    maxLines: 1,\n    textColor: theme.color.textNeutralSecondary\n  },\n  height: theme.spacer.xxl * 3,\n  logoStyle: {\n    width: theme.spacer.xxl * 2,\n    height: theme.spacer.xxl * 2,\n    radius: theme.radius.sm\n  },\n  paddingX: theme.spacer.xl,\n  contentSpacing: theme.spacer.lg,\n  titleTextStyle: {\n    ...theme.typography.headline3,\n    maxLines: 1,\n    textColor: theme.color.textNeutral\n  },\n  width: utils.getWidthByColumnSpan(theme, 3)\n});\n\nexport const mode = theme => ({\n  disabled: {\n    alpha: theme.alpha.inactive,\n    descriptionTextStyle: { textColor: theme.color.textNeutralDisabled },\n    titleTextStyle: { textColor: theme.color.textNeutralDisabled }\n  },\n  focused: {\n    descriptionTextStyle: { textColor: theme.color.textInverseSecondary },\n    titleTextStyle: { textColor: theme.color.textInverse }\n  }\n});\n\nexport const tone = theme => ({\n  inverse: {\n    mode: {\n      focused: {\n        descriptionTextStyle: { textColor: theme.color.textNeutral },\n        titleTextStyle: { textColor: theme.color.textNeutral }\n      }\n    }\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as styles from './ListItem.styles';\nimport Button from '../Button';\nimport TextBox from '../TextBox';\nimport Icon from '../Icon';\n\nexport default class ListItem extends Button {\n  static get __componentName() {\n    return 'ListItem';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      ...super._template(),\n      justify: 'left',\n      fixed: true,\n      Content: {\n        ...super._template().Content,\n        TextWrapper: {\n          mountY: 0.5,\n          flex: { direction: 'column' },\n          Title: {\n            type: TextBox,\n            signals: {\n              textBoxChanged: '_onTextBoxChanged'\n            }\n          }\n        }\n      }\n    };\n  }\n  static get properties() {\n    return [\n      ...super.properties,\n      'description',\n      'prefixLogo',\n      'suffixLogo',\n      'shouldCollapse'\n    ];\n  }\n\n  static get aliasStyles() {\n    return [{ prev: 'titlePadding', curr: 'contentSpacing' }];\n  }\n\n  static get tags() {\n    return [\n      ...super.tags,\n      { name: 'Description', path: 'Content.TextWrapper.Description' }\n    ];\n  }\n\n  _onTextBoxChanged() {\n    this._updateTitle();\n    this._updateDescription();\n    this._updateTruncation();\n  }\n\n  _update() {\n    this._updatePrefixLogo();\n    this._updateSuffixLogo();\n    super._update();\n    this._updateDescription();\n  }\n\n  _updateTitle() {\n    this._TextWrapper.patch({\n      Title: {\n        content: this.title,\n        style: { textStyle: this.style.titleTextStyle }\n      }\n    });\n  }\n\n  _updateDescription() {\n    if (this._hasDescription) {\n      let descriptionPatch = {\n        content: this.description,\n        style: {\n          textStyle: {\n            ...this.style.descriptionTextStyle,\n            wordWrap: true,\n            wordWrapWidth: this._fixedWordWrapWidth\n          }\n        },\n        visible: !this._collapse\n      };\n      if (!this._Description) {\n        descriptionPatch = {\n          type: TextBox,\n          signals: {\n            textBoxChanged: '_onTextBoxChanged'\n          },\n          ...descriptionPatch\n        };\n      }\n      this._TextWrapper.patch({ Description: descriptionPatch });\n    } else {\n      this._TextWrapper.patch({ Description: undefined });\n    }\n  }\n\n  _updateTruncation() {\n    if (this._Title) {\n      this._Title.patch({\n        style: {\n          textStyle: {\n            ...this.style.titleTextStyle,\n            wordWrap: this.fixed,\n            wordWrapWidth: this.fixed ? this._fixedWordWrapWidth : 0\n          }\n        }\n      });\n    }\n  }\n\n  _updatePrefixLogo() {\n    if (this._hasPrefixLogo) {\n      this._prefix = this._addLogoProps(this._prefixLogo);\n    }\n  }\n\n  _updateSuffixLogo() {\n    if (this._hasSuffixLogo) {\n      this._suffix = this._addLogoProps(this._suffixLogo);\n    }\n  }\n\n  _addLogoProps(icon) {\n    return {\n      type: Icon,\n      icon,\n      style: { color: undefined, ...this.style.logoStyle }\n    };\n  }\n\n  get _hasPrefixLogo() {\n    return this.prefixLogo;\n  }\n\n  get _hasSuffixLogo() {\n    return this.suffixLogo;\n  }\n\n  get _rowProps() {\n    return {\n      ...super._rowProps,\n      autoResizeHeight: true\n    };\n  }\n\n  get _buttonProps() {\n    return {\n      ...super._buttonProps,\n      alpha: this.style.alpha\n    };\n  }\n\n  get _hasDescription() {\n    return !!this.description;\n  }\n\n  get _suffixX() {\n    return this.w - this._paddingRight - this._suffixW - this.style.paddingX;\n  }\n\n  get _collapse() {\n    return this.shouldCollapse && !this._isFocusedMode;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    if (this._announce) {\n      return this._announce;\n    }\n\n    return this.title + this.description + ', List Item';\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const size = theme.spacer.xxl;\n  return {\n    alpha: theme.alpha.primary,\n    width: size,\n    height: size,\n    knobHeight: size / 2,\n    knobWidth: size / 2,\n    radius: size / 2,\n    strokeWidth: theme.stroke.sm\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    backgroundColor: theme.color.fillInverseSecondary,\n    backgroundColorChecked: theme.color.fillNeutral,\n    knobColor: theme.color.fillInverse,\n    strokeColor: theme.color.strokeNeutralSecondary\n  },\n  inverse: {\n    backgroundColor: theme.color.fillNeutralSecondary,\n    backgroundColorChecked: theme.color.fillInverse,\n    knobColor: theme.color.fillNeutral,\n    strokeColor: theme.color.strokeInverseSecondary\n  },\n  brand: {\n    backgroundColor: theme.color.fillNeutralSecondary,\n    backgroundColorChecked: theme.color.fillBrand,\n    knobColor: theme.color.fillInverse,\n    strokeColor: theme.color.strokeNeutralSecondary\n  }\n});\n\nexport const mode = theme => ({\n  disabled: { alpha: theme.alpha.inactive }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Base from '../Base';\nimport lng from '@lightningjs/core';\nimport * as styles from './Radio.styles';\n\nexport default class Radio extends Base {\n  static get __componentName() {\n    return 'Radio';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    const center = { mount: 0.5, x: w => w / 2, y: h => h / 2 };\n    return {\n      Body: {\n        rtt: true, // ensures the background color doesn't bleed into the knob when disabled\n        ...center,\n        Knob: {\n          ...center,\n          alpha: 0\n        }\n      },\n      Stroke: center\n    };\n  }\n\n  static get tags() {\n    return ['Knob', 'Body', 'Stroke'];\n  }\n  static get properties() {\n    return ['checked'];\n  }\n\n  _update() {\n    this._updateBody();\n    this._updateStroke();\n    this._updateKnob();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n    this._updateOpacity();\n  }\n\n  _updateBody() {\n    const bodyColor = this.checked\n      ? this.style.backgroundColorChecked\n      : this.style.backgroundColor;\n\n    // if the inner body should be square, a rounded corner radius can still be applied to the stroke\n    const radius =\n      this.style.radius >= this.w / 2\n        ? (this.w - this.style.strokeWidth - 2) / 2\n        : 0;\n\n    this._Body.patch({\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - this.style.strokeWidth * 2 - 2,\n        this.h - this.style.strokeWidth * 2 - 2,\n        radius,\n        null,\n        null,\n        true,\n        bodyColor\n      )\n    });\n  }\n\n  _updateStroke() {\n    this._Stroke.patch({\n      // Compensating for the extra 2 pixels getRoundRect adds\n      texture: lng.Tools.getRoundRect(\n        this.w - 2,\n        this.h - 2,\n        this.style.radius,\n        this.style.strokeWidth,\n        this.style.strokeColor,\n        false\n      )\n    });\n  }\n\n  _updateKnob() {\n    this._Knob.patch({\n      texture: lng.Tools.getRoundRect(\n        this.style.knobWidth,\n        this.style.knobHeight,\n        this.style.knobWidth / 2,\n        null,\n        null,\n        true,\n        this.style.knobColor\n      )\n    });\n\n    this.applySmooth(this._Knob, {\n      alpha: this.checked ? 1 : 0\n    });\n  }\n\n  _updateOpacity() {\n    this.applySmooth(this, { alpha: this.style.alpha });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const knobSize = theme.spacer.xl;\n  const knobPadding = theme.spacer.xs;\n  const strokeWidth = theme.stroke.sm;\n  return {\n    height: knobSize + (knobPadding + strokeWidth) * 2,\n    knobWidth: knobSize,\n    knobHeight: knobSize,\n    knobRadius: knobSize / 2,\n    knobPadding,\n    strokeWidth,\n    width: (strokeWidth + knobPadding * 2 + knobSize) * 2\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    strokeColor: theme.color.fillNeutral,\n    backgroundColor: theme.color.fillInverseTertiary,\n    backgroundColorChecked: theme.color.fillNeutral,\n    knobColor: theme.color.fillNeutral,\n    knobColorChecked: theme.color.fillInverse,\n    mode: {\n      disabled: {\n        strokeColor: theme.color.fillNeutralDisabled,\n        backgroundColor: theme.color.fillInverseDisabled,\n        backgroundColorChecked: theme.color.fillNeutralDisabled,\n        knobColor: theme.color.fillNeutralDisabled,\n        knobColorChecked: theme.color.fillInverseDisabled\n      }\n    }\n  },\n  inverse: {\n    strokeColor: theme.color.fillInverse,\n    backgroundColor: theme.color.fillNeutralTertiary,\n    backgroundColorChecked: theme.color.fillInverse,\n    knobColor: theme.color.fillInverse,\n    knobColorChecked: theme.color.fillNeutral,\n    mode: {\n      disabled: {\n        strokeColor: theme.color.fillInverseDisabled,\n        backgroundColor: theme.color.fillNeutralDisabled,\n        backgroundColorChecked: theme.color.fillInverseDisabled,\n        knobColor: theme.color.fillInverseDisabled,\n        knobColorChecked: theme.color.fillNeutralDisabled\n      }\n    }\n  },\n  brand: {\n    strokeColor: theme.color.fillBrand,\n    backgroundColor: theme.color.fillBrandTertiary,\n    backgroundColorChecked: theme.color.fillBrand,\n    knobColor: theme.color.fillBrand,\n    knobColorChecked: theme.color.fillInverse,\n    mode: {\n      disabled: {\n        strokeColor: theme.color.fillNeutralDisabled,\n        backgroundColor: theme.color.fillInverseDisabled,\n        backgroundColorChecked: theme.color.fillNeutralDisabled,\n        knobColor: theme.color.fillNeutralDisabled,\n        knobColorChecked: theme.color.fillInverseDisabled\n      }\n    }\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport * as styles from './Toggle.styles';\n\nexport default class Toggle extends Base {\n  static get __componentName() {\n    return 'Toggle';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      Container: {\n        Stroke: {},\n        Knob: {}\n      }\n    };\n  }\n\n  static get tags() {\n    return [\n      'Container',\n      {\n        name: 'Knob',\n        path: 'Container.Knob'\n      },\n      {\n        name: 'Stroke',\n        path: 'Container.Stroke'\n      }\n    ];\n  }\n\n  static get properties() {\n    return ['checked'];\n  }\n\n  static get aliasStyles() {\n    return [{ prev: 'strokeWeight', curr: 'strokeWidth' }];\n  }\n\n  _construct() {\n    super._construct && super._construct();\n    this._checked = false;\n  }\n\n  _update() {\n    this._updateKnobPosition();\n    this._updateColors();\n    this._updateContainer();\n    this._updateStroke();\n    this._updateKnob();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n  }\n\n  _updateKnobPosition() {\n    const { knobPadding, knobWidth, strokeWidth } = this.style;\n\n    this.applySmooth(this._Knob, {\n      x: this.checked\n        ? this.w - strokeWidth - knobPadding - knobWidth\n        : strokeWidth + knobPadding\n    });\n  }\n\n  _updateColors() {\n    const {\n      backgroundColor,\n      backgroundColorChecked,\n      knobColor,\n      knobColorChecked\n    } = this.style;\n\n    const currentKnobColor = this.checked ? knobColorChecked : knobColor;\n    const containerColor = this.checked\n      ? backgroundColorChecked\n      : backgroundColor;\n\n    this.applySmooth(this._Knob, { color: currentKnobColor });\n    this.applySmooth(this._Container, { color: containerColor });\n  }\n\n  _updateContainer() {\n    const { knobRadius, knobPadding, strokeRadius, strokeWidth } = this.style;\n\n    const radius =\n      strokeRadius !== undefined\n        ? strokeRadius === 0\n          ? strokeRadius\n          : Math.max(0, strokeRadius - strokeWidth)\n        : Math.max(0, knobRadius + knobPadding + strokeWidth);\n\n    this._Container.patch({\n      w: this.w,\n      h: this.h,\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - strokeWidth * 2 - 2,\n        this.h - strokeWidth * 2 - 2,\n        radius,\n        strokeWidth,\n        0,\n        true,\n        false\n      )\n    });\n  }\n\n  _updateStroke() {\n    const { knobRadius, knobPadding, strokeColor, strokeRadius, strokeWidth } =\n      this.style;\n\n    this._Stroke.patch({\n      w: this.w,\n      h: this.h,\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - 2,\n        this.h - 2,\n        strokeRadius !== undefined\n          ? strokeRadius\n          : knobRadius + knobPadding + strokeWidth,\n        strokeWidth,\n        strokeColor,\n        false,\n        false\n      )\n    });\n  }\n\n  _updateKnob() {\n    const { knobHeight, knobWidth, knobRadius } = this.style;\n\n    this._Knob.patch({\n      zIndex: 2,\n      y: (this.h - knobHeight) / 2,\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        knobWidth - 2,\n        knobHeight - 2,\n        knobRadius,\n        0,\n        0,\n        true,\n        false\n      )\n    });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n"],"names":[],"sourceRoot":""}