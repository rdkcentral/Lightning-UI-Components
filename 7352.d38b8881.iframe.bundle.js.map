{"version":3,"file":"7352.d38b8881.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAAA;AAAA;AATA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AARA;AAaA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AAtEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/TitleRow/TitleRow.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/TitleRow/TitleRow.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/TitleRow/TitleRow.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { Row as RowBasic } from '../Row/Row.stories.js';\\nimport Tile from '../Tile';\\nimport { default as TitleRowComponent } from '.';\\n\\n// add remount to all Row argTypes individually since Row uses remountAll\\n// TitleRow title prop can be updated without requiring a remount\\nconst rowArgTypes = Object.keys(RowBasic.argTypes).reduce((acc, key) => {\\n  acc[key] = {\\n    ...RowBasic.argTypes[key],\\n    remount: key !== 'mode'\\n  };\\n  return acc;\\n}, {});\\n\\nexport default {\\n  title: 'Components/TitleRow',\\n\\n  args: {\\n    title: 'Row Title',\\n    ...RowBasic.args\\n  },\\n  argTypes: {\\n    title: {\\n      control: 'text',\\n      description: 'title text to be displayed above the row',\\n      table: {\\n        defaultValue: { summary: 'undefined' }\\n      }\\n    },\\n    ...rowArgTypes\\n  }\\n};\\n\\nconst createItems = length => {\\n  return Array.from({ length }).map((_, index) => ({\\n    type: Tile,\\n    itemLayout: {\\n      ratioX: 16,\\n      ratioY: 9,\\n      upCount: 4\\n    },\\n    announce: 'Tile',\\n    announceContext: `${index + 1} of ${length}`\\n  }));\\n};\\n\\nexport const TitleRow = () =>\\n  class TitleRow extends lng.Component {\\n    static _template() {\\n      return {\\n        TitleRow: {\\n          type: TitleRowComponent,\\n          items: createItems(12)\\n        }\\n      };\\n    }\\n\\n    _getFocused() {\\n      return this.tag('TitleRow');\\n    }\\n  };\\n\\nTitleRow.storyName = 'TitleRow';\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"TitleRow\": {\n    \"startLoc\": {\n      \"col\": 24,\n      \"line\": 66\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 78\n    },\n    \"startBody\": {\n      \"col\": 24,\n      \"line\": 66\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 78\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { Row as RowBasic } from '../Row/Row.stories.js';\nimport Tile from '../Tile';\nimport { default as TitleRowComponent } from '.';\n\n// add remount to all Row argTypes individually since Row uses remountAll\n// TitleRow title prop can be updated without requiring a remount\nconst rowArgTypes = Object.keys(RowBasic.argTypes).reduce((acc, key) => {\n  acc[key] = {\n    ...RowBasic.argTypes[key],\n    remount: key !== 'mode'\n  };\n  return acc;\n}, {});\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { Row as RowBasic } from '../Row/Row.stories.js';\\nimport Tile from '../Tile';\\nimport { default as TitleRowComponent } from '.';\\n\\n// add remount to all Row argTypes individually since Row uses remountAll\\n// TitleRow title prop can be updated without requiring a remount\\nconst rowArgTypes = Object.keys(RowBasic.argTypes).reduce((acc, key) => {\\n  acc[key] = {\\n    ...RowBasic.argTypes[key],\\n    remount: key !== 'mode'\\n  };\\n  return acc;\\n}, {});\\nexport default {\\n  title: 'Components/TitleRow',\\n  args: {\\n    title: 'Row Title',\\n    ...RowBasic.args\\n  },\\n  argTypes: {\\n    title: {\\n      control: 'text',\\n      description: 'title text to be displayed above the row',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    },\\n    ...rowArgTypes\\n  }\\n};\\nconst createItems = length => {\\n  return Array.from({\\n    length\\n  }).map((_, index) => ({\\n    type: Tile,\\n    itemLayout: {\\n      ratioX: 16,\\n      ratioY: 9,\\n      upCount: 4\\n    },\\n    announce: 'Tile',\\n    announceContext: `${index + 1} of ${length}`\\n  }));\\n};\\nexport const TitleRow = () => class TitleRow extends lng.Component {\\n  static _template() {\\n    return {\\n      TitleRow: {\\n        type: TitleRowComponent,\\n        items: createItems(12)\\n      }\\n    };\\n  }\\n  _getFocused() {\\n    return this.tag('TitleRow');\\n  }\\n};\\nTitleRow.storyName = 'TitleRow';\\nTitleRow.parameters = {\\n  ...TitleRow.parameters,\\n  docs: {\\n    ...TitleRow.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class TitleRow extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      TitleRow: {\\\\n        type: TitleRowComponent,\\\\n        items: createItems(12)\\\\n      }\\\\n    };\\\\n  }\\\\n  _getFocused() {\\\\n    return this.tag('TitleRow');\\\\n  }\\\\n}\\\",\\n      ...TitleRow.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"title-row\": {\n        \"startLoc\": {\n          \"col\": 24,\n          \"line\": 66\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 78\n        },\n        \"startBody\": {\n          \"col\": 24,\n          \"line\": 66\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 78\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/TitleRow',\n  args: {\n    title: 'Row Title',\n    ...RowBasic.args\n  },\n  argTypes: {\n    title: {\n      control: 'text',\n      description: 'title text to be displayed above the row',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    },\n    ...rowArgTypes\n  }\n};\nconst createItems = length => {\n  return Array.from({\n    length\n  }).map((_, index) => ({\n    type: Tile,\n    itemLayout: {\n      ratioX: 16,\n      ratioY: 9,\n      upCount: 4\n    },\n    announce: 'Tile',\n    announceContext: `${index + 1} of ${length}`\n  }));\n};\nexport const TitleRow = () => class TitleRow extends lng.Component {\n  static _template() {\n    return {\n      TitleRow: {\n        type: TitleRowComponent,\n        items: createItems(12)\n      }\n    };\n  }\n  _getFocused() {\n    return this.tag('TitleRow');\n  }\n};\nTitleRow.storyName = 'TitleRow';\nTitleRow.parameters = {\n  ...TitleRow.parameters,\n  docs: {\n    ...TitleRow.parameters?.docs,\n    source: {\n      originalSource: \"() => class TitleRow extends lng.Component {\\n  static _template() {\\n    return {\\n      TitleRow: {\\n        type: TitleRowComponent,\\n        items: createItems(12)\\n      }\\n    };\\n  }\\n  _getFocused() {\\n    return this.tag('TitleRow');\\n  }\\n}\",\n      ...TitleRow.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getWidthByUpCount } from '../../utils';\n\nexport const base = theme => ({\n  width: getWidthByUpCount(theme, 1),\n  titleMarginLeft: theme.layout.gutterX,\n  titleTextStyle: {\n    ...theme.typography.headline1,\n    textColor: theme.color.textNeutral\n  },\n  rowMarginTop: theme.spacer.lg\n});\n\nexport const tone = theme => ({\n  neutral: {\n    titleTextStyle: { textColor: theme.color.textNeutral }\n  },\n  inverse: {\n    titleTextStyle: { textColor: theme.color.textInverse }\n  },\n  brand: {\n    titleTextStyle: { textColor: theme.color.textNeutral }\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport TextBox from '../TextBox';\nimport Row from '../Row';\n\nimport * as styles from './TitleRow.styles.js';\n\nexport default class TitleRow extends Row {\n  static get __componentName() {\n    return 'TitleRow';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      Title: {\n        type: TextBox,\n        signals: {\n          textBoxChanged: '_titleLoaded'\n        }\n      },\n      ...super._template()\n    };\n  }\n\n  static get properties() {\n    return [...super.properties, 'title'];\n  }\n\n  static get tags() {\n    return [...super.tags, 'Title'];\n  }\n\n  _titleLoaded() {\n    this._updateRow();\n  }\n\n  _construct() {\n    super._construct();\n    this._autoResizeHeight = true;\n  }\n\n  _update() {\n    super._update();\n    this._updateTitle();\n    this._updateRow();\n  }\n\n  _autoResize() {\n    this.w = this.w || this.style.w;\n    this.h = this.autoResizeHeight ? this.Items.y + this.Items.h : this.h;\n  }\n\n  _updateTitle() {\n    if (this.title) {\n      this._Title.patch({\n        x: this.style.titleMarginLeft,\n        content: this.title,\n        style: { textStyle: this.style.titleTextStyle }\n      });\n    } else if (this._Title) {\n      this._Title.patch({\n        h: 0,\n        content: ''\n      });\n    }\n  }\n\n  _updateRow() {\n    this.Items.patch({\n      y: this._Title.finalH + this.style.rowMarginTop\n    });\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this._Title && this._Title.announce);\n  }\n}\n"],"names":[],"sourceRoot":""}