{"version":3,"file":"components-Provider-Provider-stories.41142a51.iframe.bundle.js","mappingsaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAOA;AAIA;AAAA;AAEA;AAAA;AAVA;AACA;AAAA;AAAA;AAAA;AArKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Provider/Provider.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Provider/Provider.js"],"sourcesContent":[null,"/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function base(theme) {\n  return {\n    alpha: theme.alpha.primary,\n    counterTextStyle: theme.typography.headline3,\n    itemSize: theme.layout.gutterX * 2,\n    itemSpacing: theme.spacer.md,\n    radius: theme.radius.sm\n  };\n}\n\nexport const mode = theme => ({\n  disabled: {\n    alpha: theme.alpha.inactive\n  }\n});\n\nexport const tone = theme => ({\n  neutral: {\n    counterBackgroundColor: theme.color.fillInverseSecondary\n  },\n  inverse: {\n    counterBackgroundColor: theme.color.fillNeutralSecondary\n  },\n  brand: {\n    counterBackgroundColor: theme.color.fillInverseSecondary\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport Row from '../Row';\nimport Icon from '../Icon';\nimport TextBox from '../TextBox';\nimport * as styles from './Provider.styles';\nimport { getMaxRoundRadius } from '../../utils';\n\nexport default class Provider extends Base {\n  static get __componentName() {\n    return 'Provider';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      Row: {\n        type: Row,\n        autoResizeWidth: true\n      }\n    };\n  }\n\n  static get properties() {\n    return ['disableRadius', 'counterText', 'providers', 'visibleCount'];\n  }\n\n  static get tags() {\n    return ['Row'];\n  }\n\n  get providersHidden() {\n    return this.providers.length - this._visibleCount;\n  }\n\n  _construct() {\n    this._providers = [];\n    super._construct();\n  }\n\n  _update() {\n    this._updateProviders();\n    this._updateCounter();\n  }\n\n  _updateProviders() {\n    const providerList = [];\n    this.providers.slice(0, this.visibleCount).forEach(provider => {\n      // Create a starting point for each provider icon.\n\n      let patch = {\n        centerInParent: true,\n        radius: this.disableRadius\n          ? 0\n          : getMaxRoundRadius(\n              this.style.radius,\n              this.style.itemSize,\n              this.style.itemSize\n            ),\n        alpha: this.style.alpha,\n        style: provider.style || {}\n      };\n\n      if (\n        // If the provider is a pre-configured Icon, allow it to override the default behavior.\n        provider.type === Icon &&\n        provider.icon &&\n        provider.w &&\n        provider.h\n      ) {\n        // Maintain the ratio of the source icon while enforcing the height specified in the styles.\n        const ratio = provider.w / provider.h;\n        patch = {\n          type: Icon,\n          icon: provider.icon,\n          ...provider,\n          w: this.style.itemSize * ratio,\n          h: this.style.itemSize,\n          ...patch\n        };\n      } else {\n        // If the provider is just a string, create the rest of the Icon.\n        patch = {\n          type: Icon,\n          w: this.style.itemSize,\n          h: this.style.itemSize,\n          ...patch\n        };\n        if (typeof provider === 'object') {\n          patch = { ...patch, ...provider };\n        } else {\n          patch.icon = provider;\n        }\n      }\n      providerList.push(patch);\n    });\n    this._Row.patch({\n      style: {\n        itemSpacing: this.style.itemSpacing\n      },\n      items: providerList,\n      h: this.style.itemSize\n    });\n  }\n\n  _updateCounter() {\n    if (this.providers.length > this.visibleCount) {\n      const remaining = this.providersHidden;\n      const counter = {\n        announce: `+${remaining}`,\n        alpha: this.style.alpha,\n        w: this.style.itemSize,\n        h: this.style.itemSize,\n        centerInParent: true,\n        Background: {\n          w: this.style.itemSize,\n          h: this.style.itemSize,\n          texture: lng.Tools.getRoundRect(\n            this.style.itemSize,\n            this.style.itemSize,\n            getMaxRoundRadius(\n              this.style.radius,\n              this.style.itemSize,\n              this.style.itemSize\n            ),\n            0,\n            null,\n            true,\n            this.style.counterBackgroundColor\n          )\n        },\n        Text: {\n          type: TextBox,\n          mountX: 0.5,\n          mountY: 0.5,\n          x: this.style.itemSize / 2,\n          y: this.style.itemSize / 2,\n          content: this.counterText || `+${remaining}`,\n          style: { textStyle: this.style.counterTextStyle }\n        }\n      };\n      this._Row.appendItems([counter]);\n    }\n  }\n\n  $itemChanged() {\n    this.signal('providerChanged');\n  }\n\n  _getVisibleCount() {\n    const min = 1;\n    const max = this.providers.length;\n    const visibleCount = Math.min(Math.max(min, this._visibleCount), max);\n    if (this._visibleCount < min) {\n      console.warn(\n        `Warning: The specified visible count (${this._visibleCount}) is less than the minimum value (${min}). Setting it to ${min}.`\n      );\n    }\n    if (this._visibleCount > max) {\n      console.warn(\n        `Warning: The specified visible count (${this._visibleCount}) is greater than the maximum value (${max}). Setting it to ${max}.`\n      );\n    }\n    return visibleCount;\n  }\n\n  get w() {\n    return this._Row.w;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return (\n      this._announce ||\n      (this._Row.items &&\n        this._Row.items.length &&\n        this._Row.items.map(item => item.announce))\n    );\n  }\n}\n"],"names":[],"sourceRoot":""}