{"version":3,"file":"components-ListItem-ListItem-stories.954ba4c0.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;;AAIA;AACA;AAKA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AAhIA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmxKA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAOA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;AAIA;AACA;AAKA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AASA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AA1HA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ListItem/ListItem.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Checkbox/Checkbox.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Checkbox/Checkbox.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ListItem/ListItem.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/ListItem/ListItem.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Radio/Radio.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport ListItemComponent from './ListItem';\\nimport { createModeControl } from '../../docs/utils';\\nimport xfinity from '../../assets/images/Xfinity-Provider-Logo-Square.png';\\nimport { default as Checkbox } from '../Checkbox';\\nimport { default as Radio } from '../Radio';\\nimport { default as Toggle } from '../Toggle';\\n\\nexport default {\\n  title: 'Components/ListItem/ListItem'\\n};\\n\\nexport const ListItem = () =>\\n  class ListItem extends lng.Component {\\n    static _template() {\\n      return {\\n        ListItem: {\\n          type: ListItemComponent\\n        }\\n      };\\n    }\\n  };\\n\\nListItem.storyName = 'ListItem';\\n\\nListItem.args = {\\n  title: 'List Item',\\n  shouldCollapse: false,\\n  description: 'Description',\\n  prefix: null,\\n  prefixLogo: 'none',\\n  suffix: null,\\n  suffixLogo: 'none',\\n  mode: 'focused'\\n};\\n\\nListItem.argTypes = {\\n  ...createModeControl({ summaryValue: ListItem.args.mode }),\\n  title: {\\n    control: 'text',\\n    description: 'Title text',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  description: {\\n    control: 'text',\\n    description: 'Description text',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  shouldCollapse: {\\n    control: 'boolean',\\n    description:\\n      'When in unfocused or disabled mode, if this flag is true the description will collapse (when focused, it will always be expanded)',\\n    table: {\\n      defaultValue: { summary: false }\\n    }\\n  },\\n  prefix: {\\n    control: 'radio',\\n    options: [null, 'toggle', 'radio', 'checkbox'],\\n    description: 'Lightning components to be placed to the left of the title',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  prefixLogo: {\\n    control: 'radio',\\n    options: ['none', 'xfinity'],\\n    description:\\n      'Logo to be placed to the left of the title. If prefix and prefixLogo are both set, prefixLogo will take precedence for what is rendered and prefix will be ignored',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  suffix: {\\n    control: 'radio',\\n    options: [null, 'toggle', 'radio', 'checkbox'],\\n    description: 'Lightning components to be placed to the right of the title',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  suffixLogo: {\\n    control: 'radio',\\n    options: ['none', 'xfinity'],\\n    description:\\n      'Logo to be placed to the right of the title. If suffix and suffixLogo are both set, suffixLogo will take precedence for what is rendered and suffix will be ignored',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  }\\n};\\n\\nconst logoSet = {\\n  none: null,\\n  xfinity: xfinity\\n};\\n\\nconst elementSet = {\\n  toggle: {\\n    type: Toggle,\\n    checked: true\\n  },\\n  radio: {\\n    type: Radio,\\n    checked: true\\n  },\\n  checkbox: {\\n    type: Checkbox,\\n    checked: true\\n  }\\n};\\n\\nconst sharedArgActions = {\\n  prefix: (prefix, component) => {\\n    if (prefix == null) {\\n      component.tag('ListItem').prefix = [];\\n    } else {\\n      component.tag('ListItem').prefix = elementSet[prefix];\\n    }\\n  },\\n  prefixLogo: (prefixLogo, component) => {\\n    component.tag('ListItem').prefixLogo = logoSet[prefixLogo];\\n  },\\n  suffixLogo: (suffixLogo, component) => {\\n    component.tag('ListItem').suffixLogo = logoSet[suffixLogo];\\n  },\\n  suffix: (suffix, component) => {\\n    if (suffix == null) {\\n      component.tag('ListItem').suffix = [];\\n    } else {\\n      component.tag('ListItem').suffix = elementSet[suffix];\\n    }\\n  }\\n};\\n\\nListItem.parameters = { argActions: sharedArgActions };\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"ListItem\": {\n    \"startLoc\": {\n      \"col\": 24,\n      \"line\": 29\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 37\n    },\n    \"startBody\": {\n      \"col\": 24,\n      \"line\": 29\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 37\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport ListItemComponent from './ListItem';\nimport { createModeControl } from '../../docs/utils';\nimport xfinity from '../../assets/images/Xfinity-Provider-Logo-Square.png';\nimport { default as Checkbox } from '../Checkbox';\nimport { default as Radio } from '../Radio';\nimport { default as Toggle } from '../Toggle';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport ListItemComponent from './ListItem';\\nimport { createModeControl } from '../../docs/utils';\\nimport xfinity from '../../assets/images/Xfinity-Provider-Logo-Square.png';\\nimport { default as Checkbox } from '../Checkbox';\\nimport { default as Radio } from '../Radio';\\nimport { default as Toggle } from '../Toggle';\\nexport default {\\n  title: 'Components/ListItem/ListItem'\\n};\\nexport const ListItem = () => class ListItem extends lng.Component {\\n  static _template() {\\n    return {\\n      ListItem: {\\n        type: ListItemComponent\\n      }\\n    };\\n  }\\n};\\nListItem.storyName = 'ListItem';\\nListItem.args = {\\n  title: 'List Item',\\n  shouldCollapse: false,\\n  description: 'Description',\\n  prefix: null,\\n  prefixLogo: 'none',\\n  suffix: null,\\n  suffixLogo: 'none',\\n  mode: 'focused'\\n};\\nListItem.argTypes = {\\n  ...createModeControl({\\n    summaryValue: ListItem.args.mode\\n  }),\\n  title: {\\n    control: 'text',\\n    description: 'Title text',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  description: {\\n    control: 'text',\\n    description: 'Description text',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  shouldCollapse: {\\n    control: 'boolean',\\n    description: 'When in unfocused or disabled mode, if this flag is true the description will collapse (when focused, it will always be expanded)',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  },\\n  prefix: {\\n    control: 'radio',\\n    options: [null, 'toggle', 'radio', 'checkbox'],\\n    description: 'Lightning components to be placed to the left of the title',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  prefixLogo: {\\n    control: 'radio',\\n    options: ['none', 'xfinity'],\\n    description: 'Logo to be placed to the left of the title. If prefix and prefixLogo are both set, prefixLogo will take precedence for what is rendered and prefix will be ignored',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  suffix: {\\n    control: 'radio',\\n    options: [null, 'toggle', 'radio', 'checkbox'],\\n    description: 'Lightning components to be placed to the right of the title',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  suffixLogo: {\\n    control: 'radio',\\n    options: ['none', 'xfinity'],\\n    description: 'Logo to be placed to the right of the title. If suffix and suffixLogo are both set, suffixLogo will take precedence for what is rendered and suffix will be ignored',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  }\\n};\\nconst logoSet = {\\n  none: null,\\n  xfinity: xfinity\\n};\\nconst elementSet = {\\n  toggle: {\\n    type: Toggle,\\n    checked: true\\n  },\\n  radio: {\\n    type: Radio,\\n    checked: true\\n  },\\n  checkbox: {\\n    type: Checkbox,\\n    checked: true\\n  }\\n};\\nconst sharedArgActions = {\\n  prefix: (prefix, component) => {\\n    if (prefix == null) {\\n      component.tag('ListItem').prefix = [];\\n    } else {\\n      component.tag('ListItem').prefix = elementSet[prefix];\\n    }\\n  },\\n  prefixLogo: (prefixLogo, component) => {\\n    component.tag('ListItem').prefixLogo = logoSet[prefixLogo];\\n  },\\n  suffixLogo: (suffixLogo, component) => {\\n    component.tag('ListItem').suffixLogo = logoSet[suffixLogo];\\n  },\\n  suffix: (suffix, component) => {\\n    if (suffix == null) {\\n      component.tag('ListItem').suffix = [];\\n    } else {\\n      component.tag('ListItem').suffix = elementSet[suffix];\\n    }\\n  }\\n};\\nListItem.parameters = {\\n  argActions: sharedArgActions\\n};\\nListItem.parameters = {\\n  ...ListItem.parameters,\\n  docs: {\\n    ...ListItem.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class ListItem extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      ListItem: {\\\\n        type: ListItemComponent\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...ListItem.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"list-item\": {\n        \"startLoc\": {\n          \"col\": 24,\n          \"line\": 29\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 37\n        },\n        \"startBody\": {\n          \"col\": 24,\n          \"line\": 29\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 37\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/ListItem/ListItem'\n};\nexport const ListItem = () => class ListItem extends lng.Component {\n  static _template() {\n    return {\n      ListItem: {\n        type: ListItemComponent\n      }\n    };\n  }\n};\nListItem.storyName = 'ListItem';\nListItem.args = {\n  title: 'List Item',\n  shouldCollapse: false,\n  description: 'Description',\n  prefix: null,\n  prefixLogo: 'none',\n  suffix: null,\n  suffixLogo: 'none',\n  mode: 'focused'\n};\nListItem.argTypes = {\n  ...createModeControl({\n    summaryValue: ListItem.args.mode\n  }),\n  title: {\n    control: 'text',\n    description: 'Title text',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  description: {\n    control: 'text',\n    description: 'Description text',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  shouldCollapse: {\n    control: 'boolean',\n    description: 'When in unfocused or disabled mode, if this flag is true the description will collapse (when focused, it will always be expanded)',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  },\n  prefix: {\n    control: 'radio',\n    options: [null, 'toggle', 'radio', 'checkbox'],\n    description: 'Lightning components to be placed to the left of the title',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  prefixLogo: {\n    control: 'radio',\n    options: ['none', 'xfinity'],\n    description: 'Logo to be placed to the left of the title. If prefix and prefixLogo are both set, prefixLogo will take precedence for what is rendered and prefix will be ignored',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  suffix: {\n    control: 'radio',\n    options: [null, 'toggle', 'radio', 'checkbox'],\n    description: 'Lightning components to be placed to the right of the title',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  suffixLogo: {\n    control: 'radio',\n    options: ['none', 'xfinity'],\n    description: 'Logo to be placed to the right of the title. If suffix and suffixLogo are both set, suffixLogo will take precedence for what is rendered and suffix will be ignored',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  }\n};\nconst logoSet = {\n  none: null,\n  xfinity: xfinity\n};\nconst elementSet = {\n  toggle: {\n    type: Toggle,\n    checked: true\n  },\n  radio: {\n    type: Radio,\n    checked: true\n  },\n  checkbox: {\n    type: Checkbox,\n    checked: true\n  }\n};\nconst sharedArgActions = {\n  prefix: (prefix, component) => {\n    if (prefix == null) {\n      component.tag('ListItem').prefix = [];\n    } else {\n      component.tag('ListItem').prefix = elementSet[prefix];\n    }\n  },\n  prefixLogo: (prefixLogo, component) => {\n    component.tag('ListItem').prefixLogo = logoSet[prefixLogo];\n  },\n  suffixLogo: (suffixLogo, component) => {\n    component.tag('ListItem').suffixLogo = logoSet[suffixLogo];\n  },\n  suffix: (suffix, component) => {\n    if (suffix == null) {\n      component.tag('ListItem').suffix = [];\n    } else {\n      component.tag('ListItem').suffix = elementSet[suffix];\n    }\n  }\n};\nListItem.parameters = {\n  argActions: sharedArgActions\n};\nListItem.parameters = {\n  ...ListItem.parameters,\n  docs: {\n    ...ListItem.parameters?.docs,\n    source: {\n      originalSource: \"() => class ListItem extends lng.Component {\\n  static _template() {\\n    return {\\n      ListItem: {\\n        type: ListItemComponent\\n      }\\n    };\\n  }\\n}\",\n      ...ListItem.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const strokeWidth = theme.stroke.sm;\n  const size = theme.spacer.xxl - strokeWidth * 2;\n  return {\n    alpha: theme.alpha.primary,\n    width: size,\n    height: size,\n    checkWidth: theme.spacer.lg,\n    checkHeight: theme.spacer.md + theme.spacer.xs,\n    checkSrc: theme.asset.check,\n    radius: size / 2,\n    strokeWidth\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    strokeColor: theme.color.strokeInverse,\n    checkColor: theme.color.textInverse,\n    backgroundColor: theme.color.fillNeutralDisabled,\n    backgroundColorChecked: theme.color.fillNeutral\n  },\n  inverse: {\n    strokeColor: theme.color.strokeNeutral,\n    checkColor: theme.color.textNeutral,\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillInverse\n  },\n  brand: {\n    strokeColor: theme.color.strokeNeutral,\n    checkColor: theme.color.textNeutral,\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillBrand\n  }\n});\n\nexport const mode = theme => ({\n  disabled: { alpha: theme.alpha.inactive }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Icon from '../Icon';\nimport Base from '../Base';\nimport * as styles from './Checkbox.styles.js';\n\nexport default class Checkbox extends Base {\n  static get __componentName() {\n    return 'Checkbox';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    const center = { mount: 0.5, x: w => w / 2, y: h => h / 2 };\n    return {\n      Body: {\n        rtt: true, // ensures the background color doesn't bleed into the checkbox icon when disabled\n        ...center,\n        Check: {\n          type: Icon,\n          ...center,\n          alpha: 0\n        }\n      },\n      Stroke: center\n    };\n  }\n\n  static get tags() {\n    return ['Check', 'Body', 'Stroke'];\n  }\n\n  static get properties() {\n    return ['checked'];\n  }\n\n  static get aliasStyles() {\n    return [\n      { prev: 'checkH', curr: 'checkHeight' },\n      { prev: 'checkW', curr: 'checkWidth' }\n    ];\n  }\n\n  _update() {\n    this._updateBody();\n    this._updateStroke();\n    this._updateCheck();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n    this._updateOpacity();\n  }\n\n  _updateCheck() {\n    this._Check.patch({\n      w: this.style.checkWidth,\n      h: this.style.checkHeight,\n      icon: this.style.checkSrc,\n      style: { color: this.style.checkColor }\n    });\n\n    const alphaPatch = {\n      alpha: this.checked ? 1 : 0\n    };\n\n    this.applySmooth(this._Check, alphaPatch);\n  }\n\n  _updateBody() {\n    const bodyColor = this.checked\n      ? this.style.backgroundColorChecked\n      : this.style.backgroundColor;\n\n    // if the inner checkbox should be square, a rounded corner radius can still be applied to the stroke\n    const radius =\n      this.style.radius >= this.w / 2\n        ? (this.w - this.style.strokeWidth) / 2\n        : 0;\n\n    this._Body.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w - this.style.strokeWidth,\n        this.h - this.style.strokeWidth,\n        radius,\n        0,\n        null,\n        true,\n        bodyColor\n      )\n    });\n  }\n\n  _updateStroke() {\n    this._Stroke.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w,\n        this.h,\n        this.style.radius,\n        this.style.strokeWidth,\n        this.style.strokeColor,\n        false\n      )\n    });\n  }\n\n  _updateOpacity() {\n    this.applySmooth(this, { alpha: this.style.alpha });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport utils from '../../utils';\n\nexport const base = theme => ({\n  alpha: theme.alpha.primary,\n  descriptionTextStyle: {\n    ...theme.typography.body3,\n    maxLines: 1,\n    textColor: theme.color.textNeutralSecondary\n  },\n  height: theme.spacer.xxl * 3,\n  logoStyle: {\n    width: theme.spacer.xxl * 2,\n    height: theme.spacer.xxl * 2,\n    radius: theme.radius.sm\n  },\n  paddingX: theme.spacer.xl,\n  contentSpacing: theme.spacer.lg,\n  titleTextStyle: {\n    ...theme.typography.headline3,\n    maxLines: 1,\n    textColor: theme.color.textNeutral\n  },\n  width: utils.getWidthByColumnSpan(theme, 3)\n});\n\nexport const mode = theme => ({\n  disabled: {\n    alpha: theme.alpha.inactive,\n    descriptionTextStyle: { textColor: theme.color.textNeutralDisabled },\n    titleTextStyle: { textColor: theme.color.textNeutralDisabled }\n  },\n  focused: {\n    descriptionTextStyle: { textColor: theme.color.textInverseSecondary },\n    titleTextStyle: { textColor: theme.color.textInverse }\n  }\n});\n\nexport const tone = theme => ({\n  inverse: {\n    mode: {\n      focused: {\n        descriptionTextStyle: { textColor: theme.color.textNeutral },\n        titleTextStyle: { textColor: theme.color.textNeutral }\n      }\n    }\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as styles from './ListItem.styles.js';\nimport Button from '../Button';\nimport TextBox from '../TextBox';\nimport Icon from '../Icon';\n\nexport default class ListItem extends Button {\n  static get __componentName() {\n    return 'ListItem';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      ...super._template(),\n      justify: 'left',\n      fixed: true,\n      Content: {\n        ...super._template().Content,\n        TextWrapper: {\n          mountY: 0.5,\n          flex: { direction: 'column' },\n          Title: {\n            type: TextBox,\n            signals: {\n              textBoxChanged: '_onTextBoxChanged'\n            }\n          }\n        }\n      }\n    };\n  }\n  static get properties() {\n    return [\n      ...super.properties,\n      'description',\n      'prefixLogo',\n      'suffixLogo',\n      'shouldCollapse'\n    ];\n  }\n\n  static get aliasStyles() {\n    return [{ prev: 'titlePadding', curr: 'contentSpacing' }];\n  }\n\n  static get tags() {\n    return [\n      ...super.tags,\n      { name: 'Description', path: 'Content.TextWrapper.Description' }\n    ];\n  }\n\n  _onTextBoxChanged() {\n    this._updateTitle();\n    this._updateDescription();\n    this._updateTruncation();\n  }\n\n  _update() {\n    this._updatePrefixLogo();\n    this._updateSuffixLogo();\n    super._update();\n    this._updateDescription();\n  }\n\n  _updateTitle() {\n    this._TextWrapper.patch({\n      Title: {\n        content: this.title,\n        style: { textStyle: this.style.titleTextStyle }\n      }\n    });\n  }\n\n  _updateDescription() {\n    if (this._hasDescription) {\n      let descriptionPatch = {\n        content: this.description,\n        style: {\n          textStyle: {\n            ...this.style.descriptionTextStyle,\n            wordWrap: true,\n            wordWrapWidth: this._fixedWordWrapWidth\n          }\n        },\n        visible: !this._collapse\n      };\n      if (!this._Description) {\n        descriptionPatch = {\n          type: TextBox,\n          signals: {\n            textBoxChanged: '_onTextBoxChanged'\n          },\n          ...descriptionPatch\n        };\n      }\n      this._TextWrapper.patch({ Description: descriptionPatch });\n    } else {\n      this._TextWrapper.patch({ Description: undefined });\n    }\n  }\n\n  _updateTruncation() {\n    if (this._Title) {\n      this._Title.patch({\n        style: {\n          textStyle: {\n            ...this.style.titleTextStyle,\n            wordWrap: this.fixed,\n            wordWrapWidth: this.fixed ? this._fixedWordWrapWidth : 0\n          }\n        }\n      });\n    }\n  }\n\n  _updatePrefixLogo() {\n    if (this._hasPrefixLogo) {\n      this._prefix = this._addLogoProps(this._prefixLogo);\n    }\n  }\n\n  _updateSuffixLogo() {\n    if (this._hasSuffixLogo) {\n      this._suffix = this._addLogoProps(this._suffixLogo);\n    }\n  }\n\n  _addLogoProps(icon) {\n    return {\n      type: Icon,\n      icon,\n      style: { color: undefined, ...this.style.logoStyle }\n    };\n  }\n\n  get _hasPrefixLogo() {\n    return this.prefixLogo;\n  }\n\n  get _hasSuffixLogo() {\n    return this.suffixLogo;\n  }\n\n  get _rowProps() {\n    return {\n      ...super._rowProps,\n      autoResizeHeight: true\n    };\n  }\n\n  get _buttonProps() {\n    return {\n      ...super._buttonProps,\n      alpha: this.style.alpha\n    };\n  }\n\n  get _hasDescription() {\n    return !!this.description;\n  }\n\n  get _suffixX() {\n    return this.w - this._paddingRight - this._suffixW - this.style.paddingX;\n  }\n\n  get _collapse() {\n    return this.shouldCollapse && !this._isFocusedMode;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    if (this._announce) {\n      return this._announce;\n    }\n\n    return this.title + this.description + ', List Item';\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const size = theme.spacer.xxl;\n  return {\n    alpha: theme.alpha.primary,\n    width: size,\n    height: size,\n    knobHeight: size / 2,\n    knobWidth: size / 2,\n    radius: size / 2,\n    strokeWidth: theme.stroke.sm\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    backgroundColor: theme.color.fillNeutralDisabled,\n    backgroundColorChecked: theme.color.fillNeutral,\n    knobColor: theme.color.fillInverse,\n    strokeColor: theme.color.strokeInverse\n  },\n  inverse: {\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillInverse,\n    knobColor: theme.color.fillNeutral,\n    strokeColor: theme.color.strokeNeutral\n  },\n  brand: {\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillBrand,\n    knobColor: theme.color.fillNeutral,\n    strokeColor: theme.color.strokeNeutral\n  }\n});\n\nexport const mode = theme => ({\n  disabled: { alpha: theme.alpha.inactive }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Base from '../Base';\nimport lng from '@lightningjs/core';\nimport * as styles from './Radio.styles.js';\n\nexport default class Radio extends Base {\n  static get __componentName() {\n    return 'Radio';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    const center = { mount: 0.5, x: w => w / 2, y: h => h / 2 };\n    return {\n      Body: {\n        rtt: true, // ensures the background color doesn't bleed into the knob when disabled\n        ...center,\n        Knob: {\n          ...center,\n          alpha: 0\n        }\n      },\n      Stroke: center\n    };\n  }\n\n  static get tags() {\n    return ['Knob', 'Body', 'Stroke'];\n  }\n  static get properties() {\n    return ['checked'];\n  }\n\n  _update() {\n    this._updateBody();\n    this._updateStroke();\n    this._updateKnob();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n    this._updateOpacity();\n  }\n\n  _updateBody() {\n    const bodyColor = this.checked\n      ? this.style.backgroundColorChecked\n      : this.style.backgroundColor;\n\n    // if the inner body should be square, a rounded corner radius can still be applied to the stroke\n    const radius =\n      this.style.radius >= this.w / 2\n        ? (this.w - this.style.strokeWidth) / 2\n        : 0;\n\n    this._Body.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w - this.style.strokeWidth,\n        this.h - this.style.strokeWidth,\n        radius,\n        null,\n        null,\n        true,\n        bodyColor\n      )\n    });\n  }\n\n  _updateStroke() {\n    this._Stroke.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w,\n        this.h,\n        this.style.radius,\n        this.style.strokeWidth,\n        this.style.strokeColor,\n        false\n      )\n    });\n  }\n\n  _updateKnob() {\n    this._Knob.patch({\n      texture: lng.Tools.getRoundRect(\n        this.style.knobWidth,\n        this.style.knobHeight,\n        this.style.knobWidth / 2,\n        null,\n        null,\n        true,\n        this.style.knobColor\n      )\n    });\n\n    this.applySmooth(this._Knob, {\n      alpha: this.checked ? 1 : 0\n    });\n  }\n\n  _updateOpacity() {\n    this.applySmooth(this, { alpha: this.style.alpha });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n"],"names":[],"sourceRoot":""}