{"version":3,"file":"mixins-withThemeStyles-withThemeStyles-stories.57386a4f.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withThemeStyles/withThemeStyles.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport withThemeStylesMixin from './index';\nimport context from '../../globals/context/index';\n\nexport default {\n  title: 'Utilities/withThemeStyles'\n};\n\nexport const withThemeStyles = () => {\n  const style = {\n    color: context.theme.color.fillNeutral\n  };\n\n  class Box extends lng.Component {\n    static get __componentName() {\n      return 'Box';\n    }\n\n    static get __themeStyle() {\n      return style;\n    }\n\n    static _template() {\n      return {\n        Box: {\n          w: 150,\n          h: 150,\n          rect: true\n        }\n      };\n    }\n\n    toggleColor(theme) {\n      this.tag('Box').color = theme ? this.style.color : 0xff0000ff;\n    }\n  }\n\n  return class withThemeStyles extends lng.Component {\n    static _template() {\n      return {\n        Box: {\n          type: withThemeStylesMixin(Box)\n        }\n      };\n    }\n  };\n};\n\nwithThemeStyles.storyName = 'withThemeStyles';\nwithThemeStyles.args = {\n  themeColor: true\n};\nwithThemeStyles.argTypes = {\n  themeColor: {\n    control: 'boolean',\n    description: 'Should the box use the color from the theme?',\n    table: {\n      defaultValue: { summary: withThemeStyles.args.themeColor }\n    }\n  }\n};\nwithThemeStyles.parameters = {\n  argActions: {\n    themeColor: (themeColor, component) => {\n      component.tag('Box').toggleColor(themeColor);\n    }\n  }\n};\n"],"names":[],"sourceRoot":""}