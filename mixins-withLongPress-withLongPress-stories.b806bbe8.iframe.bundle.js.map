{"version":3,"file":"mixins-withLongPress-withLongPress-stories.b806bbe8.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAtDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAjEA;AACA;AAAA;AAAA;AAkEA;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Surface/Surface.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Surface/Surface.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withLongPress/index.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withLongPress/withLongPress.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  backgroundColor: theme.color.interactiveNeutral,\n  radius: theme.radius.md,\n  animation: {}\n});\n\nexport const tone = theme => ({\n  inverse: {\n    backgroundColor: theme.color.interactiveInverse\n  }\n});\n\nexport const mode = theme => ({\n  focused: {\n    backgroundColor: theme.color.interactiveNeutralFocus,\n    tone: {\n      inverse: {\n        backgroundColor: theme.color.interactiveInverseFocus\n      }\n    }\n  },\n  disabled: {\n    backgroundColor: theme.color.fillNeutralDisabled\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getMaxRoundRadius } from '../../utils';\nimport Base from '../Base';\nimport * as styles from './Surface.styles';\nimport lng from '@lightningjs/core';\n\nexport default class Surface extends Base {\n  static _template() {\n    return {\n      Background: {}\n    };\n  }\n\n  static get __componentName() {\n    return 'Surface';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static get properties() {\n    return [];\n  }\n\n  static get tags() {\n    return ['Background'];\n  }\n\n  get innerH() {\n    return this.h;\n  }\n\n  get innerW() {\n    return this.w;\n  }\n\n  _update() {\n    this._updateLayout();\n    this._updateScale();\n  }\n\n  _updateLayout() {\n    this._Background.patch({\n      texture: lng.Tools.getRoundRect(\n        this.innerW - 2, // Reference the underscored values here in cause the h or w getters need to be overwritten for alignment - see Tile\n        this.innerH - 2,\n        getMaxRoundRadius(this.style.radius, this.w, this.h),\n        0,\n        null,\n        true,\n        this.style.backgroundColor\n      )\n    });\n  }\n\n  _updateScale() {\n    const scale = this._isFocusedMode\n      ? this.getFocusScale(this.w, this.h)\n      : this.getUnfocusScale(this.w, this.h);\n\n    this.applySmooth(this, { scale }, { scale: [scale, this.style.animation] });\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport default function withLongPress(Base) {\n  return class extends Base {\n    static get name() {\n      return Base.name;\n    }\n\n    set threshold(value) {\n      this._threshold = value;\n    }\n\n    get threshold() {\n      return this._threshold;\n    }\n\n    set continuousExecution(val) {\n      this._continuousExecution = val;\n    }\n\n    _construct() {\n      this._pressedTimeStart = null;\n      this._hasExecuted = false;\n      this._threshold = 2000;\n      super._construct();\n    }\n\n    /**\n     * this will handle only key down events\n     * it will grab a reference start time stamp and compare it to any subsequent key down events' timestamp values\n     * when we meet the set threshold time in seconds, we will execute a supplied callback method\n     * */\n    _handleKey(keyEvent) {\n      // capture the key event time stamp the first time through to use as a reference.\n      if (!this._firstPressed) {\n        this._firstPressed = this._pressedTimeStart = keyEvent.timeStamp;\n        super._handleKey(keyEvent);\n      }\n      // check latest keyEvent time stamp against the start time stamp and see if the difference\n      // is greater than the threshold\n      if (\n        // eslint-disable-next-line no-constant-condition\n        this._pressedTimeStart &&\n        keyEvent.timeStamp - this._pressedTimeStart >= this.threshold\n      ) {\n        // short circuit here if we only want to execute once before a key up event\n        if (!this._continuousExecution && this._hasExecuted) {\n          return;\n        }\n        this.fireAncestors('$longPressHit', keyEvent.key);\n        if (this._continuousExecution) {\n          this._pressedTimeStart += this.threshold;\n        } else {\n          this._hasExecuted = true;\n          this._pressedTimeStart = null;\n        }\n      }\n    }\n\n    /**\n     * this will handle only key up events\n     * */\n    _handleKeyRelease(keyEvent) {\n      if (keyEvent.timeStamp - this._firstPressed >= this.threshold) {\n        this.fireAncestors('$longPressEnd', keyEvent.key);\n      }\n      this._firstPressed = null;\n      this._pressedTimeStart = null;\n      this._hasExecuted = false;\n      super._handleKeyRelease(keyEvent);\n    }\n  };\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Tile from '../../components/Tile/Tile';\nimport withLongPressMixin from '.';\nimport TextBox from '../../components/TextBox';\n\nexport default {\n  title: 'Utilities/withLongPress'\n};\n\nexport const withLongPress = args => {\n  class withLongPress extends lng.Component {\n    static _template() {\n      return {\n        Tile: {\n          type: withLongPressMixin(Tile),\n          src: 'https://image.tmdb.org/t/p/w500/zHdQ6yaqDf3OQO5uhr0auAgwK6O.jpg',\n          w: 320,\n          h: 180,\n          threshold: args.threshold,\n          continuousExecution: args.continuousExecution\n        },\n        Notification: {\n          y: 220,\n          type: TextBox,\n          style: { textStyle: { maxLines: 3 } },\n          alpha: 0\n        }\n      };\n    }\n    _init() {\n      super._init();\n    }\n\n    get _continuousExecution() {\n      return this.tag('Tile')._continuousExecution;\n    }\n\n    $longPressHit(data) {\n      this.tag('Notification').patch({\n        content: `Long Press detected on ${data}`\n      });\n      this.tag('Notification').setSmooth('alpha', 1);\n\n      !this._continuousExecution &&\n        setTimeout(() => {\n          this.tag('Notification').setSmooth('alpha', 0);\n        }, 2000);\n    }\n\n    $longPressEnd() {\n      this.tag('Notification').setSmooth('alpha', 0);\n    }\n\n    _getFocused() {\n      return this.tag('Tile');\n    }\n  }\n\n  return withLongPressMixin(withLongPress);\n};\n\nwithLongPress.storyName = 'withLongPress';\n\nwithLongPress.args = {\n  threshold: 2000,\n  continuousExecution: false\n};\n\nwithLongPress.argTypes = {\n  threshold: {\n    control: { type: 'number', min: 1000 },\n    description: 'Time in ms to trigger long press',\n    table: { defaultValue: { summary: 2000 } }\n  },\n  continuousExecution: {\n    control: { type: 'boolean' },\n    description:\n      'execute long press action continuously when threshold is met again',\n    table: { defaultValue: { summary: false } }\n  }\n};\n"],"names":[],"sourceRoot":""}