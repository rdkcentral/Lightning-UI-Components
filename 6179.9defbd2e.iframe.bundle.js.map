{"version":3,"file":"6179.9defbd2e.iframe.bundle.js","mappingsjBA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAbA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AATA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAhBA;AAiBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAZA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AATA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AArBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AA1BA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAhBA;AAiBA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAtCA;AAyDA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAZA;AAaA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;AAAA;AAAA;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AApBA;AAyBA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACpiCA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAJA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AAGA;AAAA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AASA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAMA;AAGA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Row/Row.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/story-components/SignalButton.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/utils.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { getWidthByUpCount } from '../../utils';\\nimport { default as RowComponent } from '.';\\nimport Column from '../Column';\\nimport { context } from '../../globals';\\nimport { createModeControl } from '../../docs/utils';\\nimport { SignalButton } from '../../docs/story-components';\\nimport Button from '../Button';\\n\\nexport default {\\n  title: 'Components/Row',\\n  parameters: {\\n    remountAll: true\\n  }\\n};\\n\\n/**\\n * Shared Args and Arg Types for Stories\\n */\\nconst sharedArgs = {\\n  alwaysScroll: false,\\n  lazyScroll: false,\\n  neverScroll: false,\\n  scrollIndex: 0,\\n  mode: 'focused'\\n};\\n\\nconst sharedArgTypes = {\\n  ...createModeControl({ summaryValue: 'focused' }),\\n  scrollIndex: {\\n    control: { type: 'number', min: 0 },\\n    description:\\n      'Item index at which scrolling begins, provided the sum of item widths is greater than the width of the Row',\\n    table: { defaultValue: { summary: 0 } }\\n  },\\n  alwaysScroll: {\\n    control: 'boolean',\\n    description:\\n      'Determines whether the row will stop scrolling as it nears the right to prevent white space',\\n    table: { defaultValue: { summary: false } }\\n  },\\n  neverScroll: {\\n    control: 'boolean',\\n    description:\\n      'If true, the row will never scroll, unless alwaysScroll is set to true, and if false, the row will apply normal scrolling logic',\\n    table: { defaultValue: { summary: false } }\\n  },\\n  lazyScroll: {\\n    control: 'boolean',\\n    description:\\n      'Will only scroll the row if the item is off screen and alwaysScroll and neverScroll are both false',\\n    table: { defaultValue: { summary: false } }\\n  }\\n};\\n\\n// creates an array of buttons to be used in Stories\\nconst createItems = (buttonType, length, isVariedWidth = false) => {\\n  return Array.from({ length }).map((_, i) => ({\\n    type: buttonType,\\n    title: `Button ${i + 1}`,\\n    ...(isVariedWidth\\n      ? {\\n          fixed: true,\\n          w: 200 + Math.floor(Math.random() * 100)\\n        }\\n      : {})\\n  }));\\n};\\n\\nclass ExpandingButton extends Button {\\n  _construct() {\\n    super._construct();\\n    this.fixed = true;\\n    this.w = 250;\\n  }\\n  _focus() {\\n    super._focus();\\n    this.smooth = { w: 350 };\\n  }\\n\\n  _unfocus() {\\n    super._unfocus();\\n    this.smooth = { w: 250 };\\n  }\\n}\\n\\nclass ExpandingHeightButton extends Button {\\n  _focus() {\\n    super._focus();\\n    this.smooth = { h: 150 };\\n    this.fireAncestors('$itemChanged');\\n  }\\n\\n  _unfocus() {\\n    super._unfocus();\\n    this.smooth = { h: 75 };\\n  }\\n}\\n\\nclass Title extends lng.Component {\\n  static _template() {\\n    return {\\n      Label: {\\n        x: 75,\\n        y: 22,\\n        mount: 0.5,\\n        color: 0xffffffff,\\n        text: { fontSize: 20 }\\n      }\\n    };\\n  }\\n\\n  _init() {\\n    this.tag('Label').on('txLoaded', () => {\\n      this.w = this.tag('Label').renderWidth;\\n      this.h = this.tag('Label').renderHeight;\\n      this.fireAncestors('$itemChanged');\\n    });\\n  }\\n\\n  set titleText(titleText) {\\n    this.tag('Label').text = titleText;\\n  }\\n}\\n\\n/**\\n * Stories for various versions of the component\\n */\\n\\nexport const Row = () =>\\n  class Row extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          items: createItems(Button, 12)\\n        }\\n      };\\n    }\\n  };\\n\\nRow.args = sharedArgs;\\nRow.argTypes = sharedArgTypes;\\n\\nexport const FocusHeightChange = () =>\\n  class FocusHeightChange extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          items: Array.apply(null, { length: 5 }).map(() => ({\\n            type: ExpandingHeightButton,\\n            title: 'Button',\\n            w: 150,\\n            h: 75\\n          }))\\n        }\\n      };\\n    }\\n  };\\n\\nexport const VaryingItemWidth = () =>\\n  class VaryingItemWidth extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          items: createItems(Button, 10, {\\n            fixed: true,\\n            w: 200 + Math.floor(Math.random() * 100)\\n          })\\n        }\\n      };\\n    }\\n  };\\n\\nexport const ExpandableWidth = () =>\\n  class ExpandableWidth extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          items: createItems(ExpandingButton, 6)\\n        }\\n      };\\n    }\\n  };\\n\\nexport const CenteredInParent = () =>\\n  class CenteredInParent extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          autoResizeHeight: true,\\n          w: getWidthByUpCount(context.theme, 1),\\n          items: [\\n            {\\n              type: Column,\\n              autoResizeWidth: true,\\n              autoResizeHeight: true,\\n              items: createItems(Button, 3)\\n            },\\n            {\\n              type: Column,\\n              autoResizeWidth: true,\\n              autoResizeHeight: true,\\n              centerInParent: true,\\n              items: createItems(Button, 1)\\n            }\\n          ]\\n        }\\n      };\\n    }\\n  };\\nCenteredInParent.parameters = {\\n  storyDetails:\\n    'This Row has 2 Columns as items. The second Column with 1 Button as an item has the centerInParent property enabled so it is vertically centered in the Row.'\\n};\\n\\nexport const Plinko = () => {\\n  return class Plinko extends lng.Component {\\n    static _template() {\\n      const skipFocusButtons = createItems(Button, 3);\\n      skipFocusButtons[1].skipFocus = true;\\n      skipFocusButtons[1].title = 'Skip Focus';\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          autoResizeHeight: true,\\n          plinko: true,\\n          items: [\\n            {\\n              type: Column,\\n              autoResizeWidth: true,\\n              items: createItems(Button, 3)\\n            },\\n            {\\n              type: Column,\\n              autoResizeWidth: true,\\n              items: skipFocusButtons\\n            },\\n            {\\n              type: Column,\\n              autoResizeWidth: true,\\n              items: createItems(Button, 3)\\n            },\\n            {\\n              type: Column,\\n              autoResizeWidth: true,\\n              items: createItems(Button, 3)\\n            }\\n          ]\\n        }\\n      };\\n    }\\n  };\\n};\\n\\nexport const SkipFocus = args =>\\n  class SkipFocus extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          wrapSelected: args.wrapSelected,\\n          items: [\\n            ...Array.apply(null, { length: 13 }).map((_, i) => {\\n              if (i % 4 === 0)\\n                return {\\n                  type: Title,\\n                  titleText: 'Skip Focus Text',\\n                  skipFocus: true\\n                };\\n              return { type: Button, title: 'Button' };\\n            }),\\n            {\\n              type: Title,\\n              titleText: 'Skip Focus Text',\\n              skipFocus: true\\n            }\\n          ]\\n        }\\n      };\\n    }\\n  };\\n\\nSkipFocus.args = {\\n  wrapSelected: false\\n};\\n\\nSkipFocus.argTypes = {\\n  wrapSelected: {\\n    control: 'boolean',\\n    description:\\n      'Enables wrapping behavior, so selectNext() selects the first item if the current item is the last on the list and vice versa',\\n    table: { defaultValue: { summary: false } }\\n  }\\n};\\n\\nexport const LazyScrollIndexes = ({\\n  startLazyScrollIndex,\\n  stopLazyScrollIndex\\n}) =>\\n  class LazyScrollIndexes extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          items: Array.apply(null, { length: 12 }).map((_, i) => ({\\n            type: Button,\\n            title: `Button ${i + 1} ${\\n              i === startLazyScrollIndex ? '(start lazy scroll)' : ''\\n            } ${i === stopLazyScrollIndex ? '(stop lazy scroll)' : ''}`\\n          })),\\n          startLazyScrollIndex,\\n          stopLazyScrollIndex\\n        }\\n      };\\n    }\\n  };\\nLazyScrollIndexes.args = {\\n  ...sharedArgs,\\n  lazyScroll: true,\\n  startLazyScrollIndex: 1,\\n  stopLazyScrollIndex: 10\\n};\\nLazyScrollIndexes.argTypes = {\\n  ...sharedArgTypes,\\n  startLazyScrollIndex: {\\n    control: 'number',\\n    description:\\n      'Index of item in items, and items thereafter, at which lazy scrolling should occur at',\\n    table: { defaultValue: { summary: 0 } }\\n  },\\n  stopLazyScrollIndex: {\\n    control: 'number',\\n    description:\\n      'Index of item in items, and items preceding, at which lazy scrolling should occur',\\n    table: { defaultValue: { summary: 0 } }\\n  }\\n};\\nLazyScrollIndexes.parameters = {\\n  storyDetails:\\n    'Items before the item at startLazyScrollIndex and after the item at stopLazyScrollIndex will use alwaysScroll. Items at and between startLazyScrollIndex and stopLazyScrollIndex will use lazyScroll.'\\n};\\n\\nexport const AddingItems = args =>\\n  class AddingItems extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1), // x offset from preview.js * 2\\n          lazyUpCount: args.lazyUpCount,\\n          lazyUpCountBuffer: args.lazyUpCountBuffer,\\n          signals: {\\n            append: 'appendButton',\\n            appendAt: 'appendButtonAt',\\n            prepend: 'prependButton'\\n          },\\n          items: [\\n            {\\n              type: SignalButton,\\n              title: 'Prepend 1 Button (prependItems)',\\n              signalName: 'prepend',\\n              passSignals: { prepend: true }\\n            },\\n            {\\n              type: SignalButton,\\n              title: 'Append 1 Button at index 1 (appendItemsAt)',\\n              signalName: 'appendAt',\\n              passSignals: { appendAt: true }\\n            },\\n            {\\n              type: SignalButton,\\n              title: 'Append 1 Button to the Row (appendItems)',\\n              signalName: 'append',\\n              passSignals: { append: true }\\n            }\\n          ]\\n        }\\n      };\\n    }\\n\\n    prependButton() {\\n      this.tag('Row').prependItems([\\n        {\\n          type: Button,\\n          title: 'Prepended Button'\\n        }\\n      ]);\\n    }\\n\\n    appendButtonAt() {\\n      this.tag('Row').appendItemsAt(\\n        [\\n          {\\n            type: Button,\\n            title: 'Appended Button at index 1'\\n          }\\n        ],\\n        1\\n      );\\n    }\\n\\n    appendButton() {\\n      this.tag('Row').appendItems([\\n        {\\n          type: Button,\\n          title: 'Appended Button'\\n        }\\n      ]);\\n    }\\n  };\\nAddingItems.args = {\\n  ...sharedArgs,\\n  lazyUpCountBuffer: 2\\n};\\nAddingItems.argTypes = {\\n  ...sharedArgTypes,\\n  lazyUpCount: {\\n    control: 'number',\\n    description:\\n      'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  lazyUpCountBuffer: {\\n    control: 'number',\\n    description:\\n      'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: { summary: 2 }\\n    }\\n  }\\n};\\nAddingItems.parameters = {\\n  storyDetails:\\n    'The 3 buttons initially rendered in this story are configured to invoke 1 of the 3 methods available to add items to a Row (the name of the method used is in parenthesis on the button). Press enter on any of those 3 buttons to invoke that method and add a button to the Row.'\\n};\\n\\nexport const LazyUpCount = args =>\\n  class LazyUpCount extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1), // x offset from preview.js * 2\\n          lazyUpCount: args.lazyUpCount,\\n          lazyUpCountBuffer: args.lazyUpCountBuffer,\\n          items: createItems(Button, 12)\\n        }\\n      };\\n    }\\n  };\\nLazyUpCount.args = {\\n  ...sharedArgs,\\n  lazyUpCount: 5,\\n  lazyUpCountBuffer: 2\\n};\\nLazyUpCount.argTypes = {\\n  ...sharedArgTypes,\\n  lazyUpCount: {\\n    control: 'number',\\n    description:\\n      'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  lazyUpCountBuffer: {\\n    control: 'number',\\n    description:\\n      'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: { summary: 2 }\\n    }\\n  }\\n};\\nLazyUpCount.parameters = {\\n  storyDetails:\\n    'There are 12 items passed to this Row. The number of items that are initially rendered equals the sum of the lazyUpCount and the lazyUpCountBuffer properties. Each time the next item is selected, an additional item is added to the end of the Row until all 12 items have been rendered.'\\n};\\n\\nexport const RemovingItems = () =>\\n  class RemovingItems extends lng.Component {\\n    static _template() {\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1), // x offset from preview.js * 2\\n          signals: {\\n            removeAt: 'removeButton'\\n          },\\n          items: [\\n            ...createItems(Button, 2),\\n            {\\n              type: SignalButton,\\n              title: 'Press Enter on this button to remove it (removeItemAt)',\\n              signalName: 'removeAt',\\n              passSignals: { removeAt: true }\\n            }\\n          ]\\n        }\\n      };\\n    }\\n\\n    removeButton() {\\n      this.tag('Row').removeItemAt(2);\\n    }\\n  };\\nRemovingItems.args = {\\n  ...sharedArgs\\n};\\nRemovingItems.argTypes = {\\n  ...sharedArgTypes\\n};\\nRemovingItems.parameters = {\\n  storyDetails:\\n    'The third button in this row is configured to invoke removeItemAt to remove that button. Focus on that button and press Enter to invoke that method and remove the button from the row.'\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Row\": {\n    \"startLoc\": {\n      \"col\": 19,\n      \"line\": 166\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 176\n    },\n    \"startBody\": {\n      \"col\": 19,\n      \"line\": 166\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 176\n    }\n  },\n  \"FocusHeightChange\": {\n    \"startLoc\": {\n      \"col\": 33,\n      \"line\": 179\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 196\n    },\n    \"startBody\": {\n      \"col\": 33,\n      \"line\": 179\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 196\n    }\n  },\n  \"VaryingItemWidth\": {\n    \"startLoc\": {\n      \"col\": 32,\n      \"line\": 197\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 210\n    },\n    \"startBody\": {\n      \"col\": 32,\n      \"line\": 197\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 210\n    }\n  },\n  \"ExpandableWidth\": {\n    \"startLoc\": {\n      \"col\": 31,\n      \"line\": 211\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 221\n    },\n    \"startBody\": {\n      \"col\": 31,\n      \"line\": 211\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 221\n    }\n  },\n  \"CenteredInParent\": {\n    \"startLoc\": {\n      \"col\": 32,\n      \"line\": 222\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 244\n    },\n    \"startBody\": {\n      \"col\": 32,\n      \"line\": 222\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 244\n    }\n  },\n  \"Plinko\": {\n    \"startLoc\": {\n      \"col\": 22,\n      \"line\": 248\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 281\n    },\n    \"startBody\": {\n      \"col\": 22,\n      \"line\": 248\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 281\n    }\n  },\n  \"SkipFocus\": {\n    \"startLoc\": {\n      \"col\": 25,\n      \"line\": 282\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 309\n    },\n    \"startBody\": {\n      \"col\": 25,\n      \"line\": 282\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 309\n    }\n  },\n  \"LazyScrollIndexes\": {\n    \"startLoc\": {\n      \"col\": 33,\n      \"line\": 324\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 344\n    },\n    \"startBody\": {\n      \"col\": 33,\n      \"line\": 324\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 344\n    }\n  },\n  \"AddingItems\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 375\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 432\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 375\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 432\n    }\n  },\n  \"LazyUpCount\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 461\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 474\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 461\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 474\n    }\n  },\n  \"RemovingItems\": {\n    \"startLoc\": {\n      \"col\": 29,\n      \"line\": 504\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 528\n    },\n    \"startBody\": {\n      \"col\": 29,\n      \"line\": 504\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 528\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { getWidthByUpCount } from '../../utils';\nimport { default as RowComponent } from '.';\nimport Column from '../Column';\nimport { context } from '../../globals';\nimport { createModeControl } from '../../docs/utils';\nimport { SignalButton } from '../../docs/story-components';\nimport Button from '../Button';\nexport default {\n  title: 'Components/Row',\n  parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { getWidthByUpCount } from '../../utils';\\nimport { default as RowComponent } from '.';\\nimport Column from '../Column';\\nimport { context } from '../../globals';\\nimport { createModeControl } from '../../docs/utils';\\nimport { SignalButton } from '../../docs/story-components';\\nimport Button from '../Button';\\nexport default {\\n  title: 'Components/Row',\\n  parameters: {\\n    remountAll: true\\n  }\\n};\\n\\n/**\\n * Shared Args and Arg Types for Stories\\n */\\nconst sharedArgs = {\\n  alwaysScroll: false,\\n  lazyScroll: false,\\n  neverScroll: false,\\n  scrollIndex: 0,\\n  mode: 'focused'\\n};\\nconst sharedArgTypes = {\\n  ...createModeControl({\\n    summaryValue: 'focused'\\n  }),\\n  scrollIndex: {\\n    control: {\\n      type: 'number',\\n      min: 0\\n    },\\n    description: 'Item index at which scrolling begins, provided the sum of item widths is greater than the width of the Row',\\n    table: {\\n      defaultValue: {\\n        summary: 0\\n      }\\n    }\\n  },\\n  alwaysScroll: {\\n    control: 'boolean',\\n    description: 'Determines whether the row will stop scrolling as it nears the right to prevent white space',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  },\\n  neverScroll: {\\n    control: 'boolean',\\n    description: 'If true, the row will never scroll, unless alwaysScroll is set to true, and if false, the row will apply normal scrolling logic',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  },\\n  lazyScroll: {\\n    control: 'boolean',\\n    description: 'Will only scroll the row if the item is off screen and alwaysScroll and neverScroll are both false',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  }\\n};\\n\\n// creates an array of buttons to be used in Stories\\nconst createItems = (buttonType, length, isVariedWidth = false) => {\\n  return Array.from({\\n    length\\n  }).map((_, i) => ({\\n    type: buttonType,\\n    title: `Button ${i + 1}`,\\n    ...(isVariedWidth ? {\\n      fixed: true,\\n      w: 200 + Math.floor(Math.random() * 100)\\n    } : {})\\n  }));\\n};\\nclass ExpandingButton extends Button {\\n  _construct() {\\n    super._construct();\\n    this.fixed = true;\\n    this.w = 250;\\n  }\\n  _focus() {\\n    super._focus();\\n    this.smooth = {\\n      w: 350\\n    };\\n  }\\n  _unfocus() {\\n    super._unfocus();\\n    this.smooth = {\\n      w: 250\\n    };\\n  }\\n}\\nclass ExpandingHeightButton extends Button {\\n  _focus() {\\n    super._focus();\\n    this.smooth = {\\n      h: 150\\n    };\\n    this.fireAncestors('$itemChanged');\\n  }\\n  _unfocus() {\\n    super._unfocus();\\n    this.smooth = {\\n      h: 75\\n    };\\n  }\\n}\\nclass Title extends lng.Component {\\n  static _template() {\\n    return {\\n      Label: {\\n        x: 75,\\n        y: 22,\\n        mount: 0.5,\\n        color: 0xffffffff,\\n        text: {\\n          fontSize: 20\\n        }\\n      }\\n    };\\n  }\\n  _init() {\\n    this.tag('Label').on('txLoaded', () => {\\n      this.w = this.tag('Label').renderWidth;\\n      this.h = this.tag('Label').renderHeight;\\n      this.fireAncestors('$itemChanged');\\n    });\\n  }\\n  set titleText(titleText) {\\n    this.tag('Label').text = titleText;\\n  }\\n}\\n\\n/**\\n * Stories for various versions of the component\\n */\\n\\nexport const Row = () => class Row extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: createItems(Button, 12)\\n      }\\n    };\\n  }\\n};\\nRow.args = sharedArgs;\\nRow.argTypes = sharedArgTypes;\\nexport const FocusHeightChange = () => class FocusHeightChange extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: Array.apply(null, {\\n          length: 5\\n        }).map(() => ({\\n          type: ExpandingHeightButton,\\n          title: 'Button',\\n          w: 150,\\n          h: 75\\n        }))\\n      }\\n    };\\n  }\\n};\\nexport const VaryingItemWidth = () => class VaryingItemWidth extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: createItems(Button, 10, {\\n          fixed: true,\\n          w: 200 + Math.floor(Math.random() * 100)\\n        })\\n      }\\n    };\\n  }\\n};\\nexport const ExpandableWidth = () => class ExpandableWidth extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: createItems(ExpandingButton, 6)\\n      }\\n    };\\n  }\\n};\\nexport const CenteredInParent = () => class CenteredInParent extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        autoResizeHeight: true,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: [{\\n          type: Column,\\n          autoResizeWidth: true,\\n          autoResizeHeight: true,\\n          items: createItems(Button, 3)\\n        }, {\\n          type: Column,\\n          autoResizeWidth: true,\\n          autoResizeHeight: true,\\n          centerInParent: true,\\n          items: createItems(Button, 1)\\n        }]\\n      }\\n    };\\n  }\\n};\\nCenteredInParent.parameters = {\\n  storyDetails: 'This Row has 2 Columns as items. The second Column with 1 Button as an item has the centerInParent property enabled so it is vertically centered in the Row.'\\n};\\nexport const Plinko = () => {\\n  return class Plinko extends lng.Component {\\n    static _template() {\\n      const skipFocusButtons = createItems(Button, 3);\\n      skipFocusButtons[1].skipFocus = true;\\n      skipFocusButtons[1].title = 'Skip Focus';\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          autoResizeHeight: true,\\n          plinko: true,\\n          items: [{\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: createItems(Button, 3)\\n          }, {\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: skipFocusButtons\\n          }, {\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: createItems(Button, 3)\\n          }, {\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: createItems(Button, 3)\\n          }]\\n        }\\n      };\\n    }\\n  };\\n};\\nexport const SkipFocus = args => class SkipFocus extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        wrapSelected: args.wrapSelected,\\n        items: [...Array.apply(null, {\\n          length: 13\\n        }).map((_, i) => {\\n          if (i % 4 === 0) return {\\n            type: Title,\\n            titleText: 'Skip Focus Text',\\n            skipFocus: true\\n          };\\n          return {\\n            type: Button,\\n            title: 'Button'\\n          };\\n        }), {\\n          type: Title,\\n          titleText: 'Skip Focus Text',\\n          skipFocus: true\\n        }]\\n      }\\n    };\\n  }\\n};\\nSkipFocus.args = {\\n  wrapSelected: false\\n};\\nSkipFocus.argTypes = {\\n  wrapSelected: {\\n    control: 'boolean',\\n    description: 'Enables wrapping behavior, so selectNext() selects the first item if the current item is the last on the list and vice versa',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  }\\n};\\nexport const LazyScrollIndexes = ({\\n  startLazyScrollIndex,\\n  stopLazyScrollIndex\\n}) => class LazyScrollIndexes extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: Array.apply(null, {\\n          length: 12\\n        }).map((_, i) => ({\\n          type: Button,\\n          title: `Button ${i + 1} ${i === startLazyScrollIndex ? '(start lazy scroll)' : ''} ${i === stopLazyScrollIndex ? '(stop lazy scroll)' : ''}`\\n        })),\\n        startLazyScrollIndex,\\n        stopLazyScrollIndex\\n      }\\n    };\\n  }\\n};\\nLazyScrollIndexes.args = {\\n  ...sharedArgs,\\n  lazyScroll: true,\\n  startLazyScrollIndex: 1,\\n  stopLazyScrollIndex: 10\\n};\\nLazyScrollIndexes.argTypes = {\\n  ...sharedArgTypes,\\n  startLazyScrollIndex: {\\n    control: 'number',\\n    description: 'Index of item in items, and items thereafter, at which lazy scrolling should occur at',\\n    table: {\\n      defaultValue: {\\n        summary: 0\\n      }\\n    }\\n  },\\n  stopLazyScrollIndex: {\\n    control: 'number',\\n    description: 'Index of item in items, and items preceding, at which lazy scrolling should occur',\\n    table: {\\n      defaultValue: {\\n        summary: 0\\n      }\\n    }\\n  }\\n};\\nLazyScrollIndexes.parameters = {\\n  storyDetails: 'Items before the item at startLazyScrollIndex and after the item at stopLazyScrollIndex will use alwaysScroll. Items at and between startLazyScrollIndex and stopLazyScrollIndex will use lazyScroll.'\\n};\\nexport const AddingItems = args => class AddingItems extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        // x offset from preview.js * 2\\n        lazyUpCount: args.lazyUpCount,\\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\\n        signals: {\\n          append: 'appendButton',\\n          appendAt: 'appendButtonAt',\\n          prepend: 'prependButton'\\n        },\\n        items: [{\\n          type: SignalButton,\\n          title: 'Prepend 1 Button (prependItems)',\\n          signalName: 'prepend',\\n          passSignals: {\\n            prepend: true\\n          }\\n        }, {\\n          type: SignalButton,\\n          title: 'Append 1 Button at index 1 (appendItemsAt)',\\n          signalName: 'appendAt',\\n          passSignals: {\\n            appendAt: true\\n          }\\n        }, {\\n          type: SignalButton,\\n          title: 'Append 1 Button to the Row (appendItems)',\\n          signalName: 'append',\\n          passSignals: {\\n            append: true\\n          }\\n        }]\\n      }\\n    };\\n  }\\n  prependButton() {\\n    this.tag('Row').prependItems([{\\n      type: Button,\\n      title: 'Prepended Button'\\n    }]);\\n  }\\n  appendButtonAt() {\\n    this.tag('Row').appendItemsAt([{\\n      type: Button,\\n      title: 'Appended Button at index 1'\\n    }], 1);\\n  }\\n  appendButton() {\\n    this.tag('Row').appendItems([{\\n      type: Button,\\n      title: 'Appended Button'\\n    }]);\\n  }\\n};\\nAddingItems.args = {\\n  ...sharedArgs,\\n  lazyUpCountBuffer: 2\\n};\\nAddingItems.argTypes = {\\n  ...sharedArgTypes,\\n  lazyUpCount: {\\n    control: 'number',\\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  lazyUpCountBuffer: {\\n    control: 'number',\\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: {\\n        summary: 2\\n      }\\n    }\\n  }\\n};\\nAddingItems.parameters = {\\n  storyDetails: 'The 3 buttons initially rendered in this story are configured to invoke 1 of the 3 methods available to add items to a Row (the name of the method used is in parenthesis on the button). Press enter on any of those 3 buttons to invoke that method and add a button to the Row.'\\n};\\nexport const LazyUpCount = args => class LazyUpCount extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        // x offset from preview.js * 2\\n        lazyUpCount: args.lazyUpCount,\\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\\n        items: createItems(Button, 12)\\n      }\\n    };\\n  }\\n};\\nLazyUpCount.args = {\\n  ...sharedArgs,\\n  lazyUpCount: 5,\\n  lazyUpCountBuffer: 2\\n};\\nLazyUpCount.argTypes = {\\n  ...sharedArgTypes,\\n  lazyUpCount: {\\n    control: 'number',\\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  lazyUpCountBuffer: {\\n    control: 'number',\\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\\n    table: {\\n      defaultValue: {\\n        summary: 2\\n      }\\n    }\\n  }\\n};\\nLazyUpCount.parameters = {\\n  storyDetails: 'There are 12 items passed to this Row. The number of items that are initially rendered equals the sum of the lazyUpCount and the lazyUpCountBuffer properties. Each time the next item is selected, an additional item is added to the end of the Row until all 12 items have been rendered.'\\n};\\nexport const RemovingItems = () => class RemovingItems extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        // x offset from preview.js * 2\\n        signals: {\\n          removeAt: 'removeButton'\\n        },\\n        items: [...createItems(Button, 2), {\\n          type: SignalButton,\\n          title: 'Press Enter on this button to remove it (removeItemAt)',\\n          signalName: 'removeAt',\\n          passSignals: {\\n            removeAt: true\\n          }\\n        }]\\n      }\\n    };\\n  }\\n  removeButton() {\\n    this.tag('Row').removeItemAt(2);\\n  }\\n};\\nRemovingItems.args = {\\n  ...sharedArgs\\n};\\nRemovingItems.argTypes = {\\n  ...sharedArgTypes\\n};\\nRemovingItems.parameters = {\\n  storyDetails: 'The third button in this row is configured to invoke removeItemAt to remove that button. Focus on that button and press Enter to invoke that method and remove the button from the row.'\\n};\\nRow.parameters = {\\n  ...Row.parameters,\\n  docs: {\\n    ...Row.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class Row extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        items: createItems(Button, 12)\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...Row.parameters?.docs?.source\\n    },\\n    description: {\\n      story: \\\"Stories for various versions of the component\\\",\\n      ...Row.parameters?.docs?.description\\n    }\\n  }\\n};\\nFocusHeightChange.parameters = {\\n  ...FocusHeightChange.parameters,\\n  docs: {\\n    ...FocusHeightChange.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class FocusHeightChange extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        items: Array.apply(null, {\\\\n          length: 5\\\\n        }).map(() => ({\\\\n          type: ExpandingHeightButton,\\\\n          title: 'Button',\\\\n          w: 150,\\\\n          h: 75\\\\n        }))\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...FocusHeightChange.parameters?.docs?.source\\n    }\\n  }\\n};\\nVaryingItemWidth.parameters = {\\n  ...VaryingItemWidth.parameters,\\n  docs: {\\n    ...VaryingItemWidth.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class VaryingItemWidth extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        items: createItems(Button, 10, {\\\\n          fixed: true,\\\\n          w: 200 + Math.floor(Math.random() * 100)\\\\n        })\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...VaryingItemWidth.parameters?.docs?.source\\n    }\\n  }\\n};\\nExpandableWidth.parameters = {\\n  ...ExpandableWidth.parameters,\\n  docs: {\\n    ...ExpandableWidth.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class ExpandableWidth extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        items: createItems(ExpandingButton, 6)\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...ExpandableWidth.parameters?.docs?.source\\n    }\\n  }\\n};\\nCenteredInParent.parameters = {\\n  ...CenteredInParent.parameters,\\n  docs: {\\n    ...CenteredInParent.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class CenteredInParent extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        autoResizeHeight: true,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        items: [{\\\\n          type: Column,\\\\n          autoResizeWidth: true,\\\\n          autoResizeHeight: true,\\\\n          items: createItems(Button, 3)\\\\n        }, {\\\\n          type: Column,\\\\n          autoResizeWidth: true,\\\\n          autoResizeHeight: true,\\\\n          centerInParent: true,\\\\n          items: createItems(Button, 1)\\\\n        }]\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...CenteredInParent.parameters?.docs?.source\\n    }\\n  }\\n};\\nPlinko.parameters = {\\n  ...Plinko.parameters,\\n  docs: {\\n    ...Plinko.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => {\\\\n  return class Plinko extends lng.Component {\\\\n    static _template() {\\\\n      const skipFocusButtons = createItems(Button, 3);\\\\n      skipFocusButtons[1].skipFocus = true;\\\\n      skipFocusButtons[1].title = 'Skip Focus';\\\\n      return {\\\\n        Row: {\\\\n          type: RowComponent,\\\\n          w: getWidthByUpCount(context.theme, 1),\\\\n          autoResizeHeight: true,\\\\n          plinko: true,\\\\n          items: [{\\\\n            type: Column,\\\\n            autoResizeWidth: true,\\\\n            items: createItems(Button, 3)\\\\n          }, {\\\\n            type: Column,\\\\n            autoResizeWidth: true,\\\\n            items: skipFocusButtons\\\\n          }, {\\\\n            type: Column,\\\\n            autoResizeWidth: true,\\\\n            items: createItems(Button, 3)\\\\n          }, {\\\\n            type: Column,\\\\n            autoResizeWidth: true,\\\\n            items: createItems(Button, 3)\\\\n          }]\\\\n        }\\\\n      };\\\\n    }\\\\n  };\\\\n}\\\",\\n      ...Plinko.parameters?.docs?.source\\n    }\\n  }\\n};\\nSkipFocus.parameters = {\\n  ...SkipFocus.parameters,\\n  docs: {\\n    ...SkipFocus.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class SkipFocus extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        wrapSelected: args.wrapSelected,\\\\n        items: [...Array.apply(null, {\\\\n          length: 13\\\\n        }).map((_, i) => {\\\\n          if (i % 4 === 0) return {\\\\n            type: Title,\\\\n            titleText: 'Skip Focus Text',\\\\n            skipFocus: true\\\\n          };\\\\n          return {\\\\n            type: Button,\\\\n            title: 'Button'\\\\n          };\\\\n        }), {\\\\n          type: Title,\\\\n          titleText: 'Skip Focus Text',\\\\n          skipFocus: true\\\\n        }]\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...SkipFocus.parameters?.docs?.source\\n    }\\n  }\\n};\\nLazyScrollIndexes.parameters = {\\n  ...LazyScrollIndexes.parameters,\\n  docs: {\\n    ...LazyScrollIndexes.parameters?.docs,\\n    source: {\\n      originalSource: \\\"({\\\\n  startLazyScrollIndex,\\\\n  stopLazyScrollIndex\\\\n}) => class LazyScrollIndexes extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        items: Array.apply(null, {\\\\n          length: 12\\\\n        }).map((_, i) => ({\\\\n          type: Button,\\\\n          title: `Button ${i + 1} ${i === startLazyScrollIndex ? '(start lazy scroll)' : ''} ${i === stopLazyScrollIndex ? '(stop lazy scroll)' : ''}`\\\\n        })),\\\\n        startLazyScrollIndex,\\\\n        stopLazyScrollIndex\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...LazyScrollIndexes.parameters?.docs?.source\\n    }\\n  }\\n};\\nAddingItems.parameters = {\\n  ...AddingItems.parameters,\\n  docs: {\\n    ...AddingItems.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class AddingItems extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        // x offset from preview.js * 2\\\\n        lazyUpCount: args.lazyUpCount,\\\\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\\\\n        signals: {\\\\n          append: 'appendButton',\\\\n          appendAt: 'appendButtonAt',\\\\n          prepend: 'prependButton'\\\\n        },\\\\n        items: [{\\\\n          type: SignalButton,\\\\n          title: 'Prepend 1 Button (prependItems)',\\\\n          signalName: 'prepend',\\\\n          passSignals: {\\\\n            prepend: true\\\\n          }\\\\n        }, {\\\\n          type: SignalButton,\\\\n          title: 'Append 1 Button at index 1 (appendItemsAt)',\\\\n          signalName: 'appendAt',\\\\n          passSignals: {\\\\n            appendAt: true\\\\n          }\\\\n        }, {\\\\n          type: SignalButton,\\\\n          title: 'Append 1 Button to the Row (appendItems)',\\\\n          signalName: 'append',\\\\n          passSignals: {\\\\n            append: true\\\\n          }\\\\n        }]\\\\n      }\\\\n    };\\\\n  }\\\\n  prependButton() {\\\\n    this.tag('Row').prependItems([{\\\\n      type: Button,\\\\n      title: 'Prepended Button'\\\\n    }]);\\\\n  }\\\\n  appendButtonAt() {\\\\n    this.tag('Row').appendItemsAt([{\\\\n      type: Button,\\\\n      title: 'Appended Button at index 1'\\\\n    }], 1);\\\\n  }\\\\n  appendButton() {\\\\n    this.tag('Row').appendItems([{\\\\n      type: Button,\\\\n      title: 'Appended Button'\\\\n    }]);\\\\n  }\\\\n}\\\",\\n      ...AddingItems.parameters?.docs?.source\\n    }\\n  }\\n};\\nLazyUpCount.parameters = {\\n  ...LazyUpCount.parameters,\\n  docs: {\\n    ...LazyUpCount.parameters?.docs,\\n    source: {\\n      originalSource: \\\"args => class LazyUpCount extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        // x offset from preview.js * 2\\\\n        lazyUpCount: args.lazyUpCount,\\\\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\\\\n        items: createItems(Button, 12)\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...LazyUpCount.parameters?.docs?.source\\n    }\\n  }\\n};\\nRemovingItems.parameters = {\\n  ...RemovingItems.parameters,\\n  docs: {\\n    ...RemovingItems.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class RemovingItems extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Row: {\\\\n        type: RowComponent,\\\\n        w: getWidthByUpCount(context.theme, 1),\\\\n        // x offset from preview.js * 2\\\\n        signals: {\\\\n          removeAt: 'removeButton'\\\\n        },\\\\n        items: [...createItems(Button, 2), {\\\\n          type: SignalButton,\\\\n          title: 'Press Enter on this button to remove it (removeItemAt)',\\\\n          signalName: 'removeAt',\\\\n          passSignals: {\\\\n            removeAt: true\\\\n          }\\\\n        }]\\\\n      }\\\\n    };\\\\n  }\\\\n  removeButton() {\\\\n    this.tag('Row').removeItemAt(2);\\\\n  }\\\\n}\\\",\\n      ...RemovingItems.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"row\": {\n        \"startLoc\": {\n          \"col\": 19,\n          \"line\": 166\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 176\n        },\n        \"startBody\": {\n          \"col\": 19,\n          \"line\": 166\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 176\n        }\n      },\n      \"focus-height-change\": {\n        \"startLoc\": {\n          \"col\": 33,\n          \"line\": 179\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 196\n        },\n        \"startBody\": {\n          \"col\": 33,\n          \"line\": 179\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 196\n        }\n      },\n      \"varying-item-width\": {\n        \"startLoc\": {\n          \"col\": 32,\n          \"line\": 197\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 210\n        },\n        \"startBody\": {\n          \"col\": 32,\n          \"line\": 197\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 210\n        }\n      },\n      \"expandable-width\": {\n        \"startLoc\": {\n          \"col\": 31,\n          \"line\": 211\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 221\n        },\n        \"startBody\": {\n          \"col\": 31,\n          \"line\": 211\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 221\n        }\n      },\n      \"centered-in-parent\": {\n        \"startLoc\": {\n          \"col\": 32,\n          \"line\": 222\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 244\n        },\n        \"startBody\": {\n          \"col\": 32,\n          \"line\": 222\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 244\n        }\n      },\n      \"plinko\": {\n        \"startLoc\": {\n          \"col\": 22,\n          \"line\": 248\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 281\n        },\n        \"startBody\": {\n          \"col\": 22,\n          \"line\": 248\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 281\n        }\n      },\n      \"skip-focus\": {\n        \"startLoc\": {\n          \"col\": 25,\n          \"line\": 282\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 309\n        },\n        \"startBody\": {\n          \"col\": 25,\n          \"line\": 282\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 309\n        }\n      },\n      \"lazy-scroll-indexes\": {\n        \"startLoc\": {\n          \"col\": 33,\n          \"line\": 324\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 344\n        },\n        \"startBody\": {\n          \"col\": 33,\n          \"line\": 324\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 344\n        }\n      },\n      \"adding-items\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 375\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 432\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 375\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 432\n        }\n      },\n      \"lazy-up-count\": {\n        \"startLoc\": {\n          \"col\": 27,\n          \"line\": 461\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 474\n        },\n        \"startBody\": {\n          \"col\": 27,\n          \"line\": 461\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 474\n        }\n      },\n      \"removing-items\": {\n        \"startLoc\": {\n          \"col\": 29,\n          \"line\": 504\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 528\n        },\n        \"startBody\": {\n          \"col\": 29,\n          \"line\": 504\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 528\n        }\n      }\n    }\n  }\n,\n    remountAll: true\n  },};\n\n/**\n * Shared Args and Arg Types for Stories\n */\nconst sharedArgs = {\n  alwaysScroll: false,\n  lazyScroll: false,\n  neverScroll: false,\n  scrollIndex: 0,\n  mode: 'focused'\n};\nconst sharedArgTypes = {\n  ...createModeControl({\n    summaryValue: 'focused'\n  }),\n  scrollIndex: {\n    control: {\n      type: 'number',\n      min: 0\n    },\n    description: 'Item index at which scrolling begins, provided the sum of item widths is greater than the width of the Row',\n    table: {\n      defaultValue: {\n        summary: 0\n      }\n    }\n  },\n  alwaysScroll: {\n    control: 'boolean',\n    description: 'Determines whether the row will stop scrolling as it nears the right to prevent white space',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  },\n  neverScroll: {\n    control: 'boolean',\n    description: 'If true, the row will never scroll, unless alwaysScroll is set to true, and if false, the row will apply normal scrolling logic',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  },\n  lazyScroll: {\n    control: 'boolean',\n    description: 'Will only scroll the row if the item is off screen and alwaysScroll and neverScroll are both false',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  }\n};\n\n// creates an array of buttons to be used in Stories\nconst createItems = (buttonType, length, isVariedWidth = false) => {\n  return Array.from({\n    length\n  }).map((_, i) => ({\n    type: buttonType,\n    title: `Button ${i + 1}`,\n    ...(isVariedWidth ? {\n      fixed: true,\n      w: 200 + Math.floor(Math.random() * 100)\n    } : {})\n  }));\n};\nclass ExpandingButton extends Button {\n  _construct() {\n    super._construct();\n    this.fixed = true;\n    this.w = 250;\n  }\n  _focus() {\n    super._focus();\n    this.smooth = {\n      w: 350\n    };\n  }\n  _unfocus() {\n    super._unfocus();\n    this.smooth = {\n      w: 250\n    };\n  }\n}\nclass ExpandingHeightButton extends Button {\n  _focus() {\n    super._focus();\n    this.smooth = {\n      h: 150\n    };\n    this.fireAncestors('$itemChanged');\n  }\n  _unfocus() {\n    super._unfocus();\n    this.smooth = {\n      h: 75\n    };\n  }\n}\nclass Title extends lng.Component {\n  static _template() {\n    return {\n      Label: {\n        x: 75,\n        y: 22,\n        mount: 0.5,\n        color: 0xffffffff,\n        text: {\n          fontSize: 20\n        }\n      }\n    };\n  }\n  _init() {\n    this.tag('Label').on('txLoaded', () => {\n      this.w = this.tag('Label').renderWidth;\n      this.h = this.tag('Label').renderHeight;\n      this.fireAncestors('$itemChanged');\n    });\n  }\n  set titleText(titleText) {\n    this.tag('Label').text = titleText;\n  }\n}\n\n/**\n * Stories for various versions of the component\n */\n\nexport const Row = () => class Row extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        items: createItems(Button, 12)\n      }\n    };\n  }\n};;\nRow.args = sharedArgs;\nRow.argTypes = sharedArgTypes;\nexport const FocusHeightChange = () => class FocusHeightChange extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        items: Array.apply(null, {\n          length: 5\n        }).map(() => ({\n          type: ExpandingHeightButton,\n          title: 'Button',\n          w: 150,\n          h: 75\n        }))\n      }\n    };\n  }\n};;\nexport const VaryingItemWidth = () => class VaryingItemWidth extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        items: createItems(Button, 10, {\n          fixed: true,\n          w: 200 + Math.floor(Math.random() * 100)\n        })\n      }\n    };\n  }\n};;\nexport const ExpandableWidth = () => class ExpandableWidth extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        items: createItems(ExpandingButton, 6)\n      }\n    };\n  }\n};;\nexport const CenteredInParent = () => class CenteredInParent extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        autoResizeHeight: true,\n        w: getWidthByUpCount(context.theme, 1),\n        items: [{\n          type: Column,\n          autoResizeWidth: true,\n          autoResizeHeight: true,\n          items: createItems(Button, 3)\n        }, {\n          type: Column,\n          autoResizeWidth: true,\n          autoResizeHeight: true,\n          centerInParent: true,\n          items: createItems(Button, 1)\n        }]\n      }\n    };\n  }\n};;\nCenteredInParent.parameters = {\n  storyDetails: 'This Row has 2 Columns as items. The second Column with 1 Button as an item has the centerInParent property enabled so it is vertically centered in the Row.'\n};\nexport const Plinko = () => {\n  return class Plinko extends lng.Component {\n    static _template() {\n      const skipFocusButtons = createItems(Button, 3);\n      skipFocusButtons[1].skipFocus = true;\n      skipFocusButtons[1].title = 'Skip Focus';\n      return {\n        Row: {\n          type: RowComponent,\n          w: getWidthByUpCount(context.theme, 1),\n          autoResizeHeight: true,\n          plinko: true,\n          items: [{\n            type: Column,\n            autoResizeWidth: true,\n            items: createItems(Button, 3)\n          }, {\n            type: Column,\n            autoResizeWidth: true,\n            items: skipFocusButtons\n          }, {\n            type: Column,\n            autoResizeWidth: true,\n            items: createItems(Button, 3)\n          }, {\n            type: Column,\n            autoResizeWidth: true,\n            items: createItems(Button, 3)\n          }]\n        }\n      };\n    }\n  };\n};;\nexport const SkipFocus = args => class SkipFocus extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        wrapSelected: args.wrapSelected,\n        items: [...Array.apply(null, {\n          length: 13\n        }).map((_, i) => {\n          if (i % 4 === 0) return {\n            type: Title,\n            titleText: 'Skip Focus Text',\n            skipFocus: true\n          };\n          return {\n            type: Button,\n            title: 'Button'\n          };\n        }), {\n          type: Title,\n          titleText: 'Skip Focus Text',\n          skipFocus: true\n        }]\n      }\n    };\n  }\n};;\nSkipFocus.args = {\n  wrapSelected: false\n};\nSkipFocus.argTypes = {\n  wrapSelected: {\n    control: 'boolean',\n    description: 'Enables wrapping behavior, so selectNext() selects the first item if the current item is the last on the list and vice versa',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  }\n};\nexport const LazyScrollIndexes = ({\n  startLazyScrollIndex,\n  stopLazyScrollIndex\n}) => class LazyScrollIndexes extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        items: Array.apply(null, {\n          length: 12\n        }).map((_, i) => ({\n          type: Button,\n          title: `Button ${i + 1} ${i === startLazyScrollIndex ? '(start lazy scroll)' : ''} ${i === stopLazyScrollIndex ? '(stop lazy scroll)' : ''}`\n        })),\n        startLazyScrollIndex,\n        stopLazyScrollIndex\n      }\n    };\n  }\n};;\nLazyScrollIndexes.args = {\n  ...sharedArgs,\n  lazyScroll: true,\n  startLazyScrollIndex: 1,\n  stopLazyScrollIndex: 10\n};\nLazyScrollIndexes.argTypes = {\n  ...sharedArgTypes,\n  startLazyScrollIndex: {\n    control: 'number',\n    description: 'Index of item in items, and items thereafter, at which lazy scrolling should occur at',\n    table: {\n      defaultValue: {\n        summary: 0\n      }\n    }\n  },\n  stopLazyScrollIndex: {\n    control: 'number',\n    description: 'Index of item in items, and items preceding, at which lazy scrolling should occur',\n    table: {\n      defaultValue: {\n        summary: 0\n      }\n    }\n  }\n};\nLazyScrollIndexes.parameters = {\n  storyDetails: 'Items before the item at startLazyScrollIndex and after the item at stopLazyScrollIndex will use alwaysScroll. Items at and between startLazyScrollIndex and stopLazyScrollIndex will use lazyScroll.'\n};\nexport const AddingItems = args => class AddingItems extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        // x offset from preview.js * 2\n        lazyUpCount: args.lazyUpCount,\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\n        signals: {\n          append: 'appendButton',\n          appendAt: 'appendButtonAt',\n          prepend: 'prependButton'\n        },\n        items: [{\n          type: SignalButton,\n          title: 'Prepend 1 Button (prependItems)',\n          signalName: 'prepend',\n          passSignals: {\n            prepend: true\n          }\n        }, {\n          type: SignalButton,\n          title: 'Append 1 Button at index 1 (appendItemsAt)',\n          signalName: 'appendAt',\n          passSignals: {\n            appendAt: true\n          }\n        }, {\n          type: SignalButton,\n          title: 'Append 1 Button to the Row (appendItems)',\n          signalName: 'append',\n          passSignals: {\n            append: true\n          }\n        }]\n      }\n    };\n  }\n  prependButton() {\n    this.tag('Row').prependItems([{\n      type: Button,\n      title: 'Prepended Button'\n    }]);\n  }\n  appendButtonAt() {\n    this.tag('Row').appendItemsAt([{\n      type: Button,\n      title: 'Appended Button at index 1'\n    }], 1);\n  }\n  appendButton() {\n    this.tag('Row').appendItems([{\n      type: Button,\n      title: 'Appended Button'\n    }]);\n  }\n};;\nAddingItems.args = {\n  ...sharedArgs,\n  lazyUpCountBuffer: 2\n};\nAddingItems.argTypes = {\n  ...sharedArgTypes,\n  lazyUpCount: {\n    control: 'number',\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  lazyUpCountBuffer: {\n    control: 'number',\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\n    table: {\n      defaultValue: {\n        summary: 2\n      }\n    }\n  }\n};\nAddingItems.parameters = {\n  storyDetails: 'The 3 buttons initially rendered in this story are configured to invoke 1 of the 3 methods available to add items to a Row (the name of the method used is in parenthesis on the button). Press enter on any of those 3 buttons to invoke that method and add a button to the Row.'\n};\nexport const LazyUpCount = args => class LazyUpCount extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        // x offset from preview.js * 2\n        lazyUpCount: args.lazyUpCount,\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\n        items: createItems(Button, 12)\n      }\n    };\n  }\n};;\nLazyUpCount.args = {\n  ...sharedArgs,\n  lazyUpCount: 5,\n  lazyUpCountBuffer: 2\n};\nLazyUpCount.argTypes = {\n  ...sharedArgTypes,\n  lazyUpCount: {\n    control: 'number',\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  lazyUpCountBuffer: {\n    control: 'number',\n    description: 'Used to calculate the number of items to display on the first render, see [Docs](?path=/docs/navigation-navigationmanager--row#properties) for more details. <br/> **NOTE: changing this value requires refreshing the story to see its effect.**',\n    table: {\n      defaultValue: {\n        summary: 2\n      }\n    }\n  }\n};\nLazyUpCount.parameters = {\n  storyDetails: 'There are 12 items passed to this Row. The number of items that are initially rendered equals the sum of the lazyUpCount and the lazyUpCountBuffer properties. Each time the next item is selected, an additional item is added to the end of the Row until all 12 items have been rendered.'\n};\nexport const RemovingItems = () => class RemovingItems extends lng.Component {\n  static _template() {\n    return {\n      Row: {\n        type: RowComponent,\n        w: getWidthByUpCount(context.theme, 1),\n        // x offset from preview.js * 2\n        signals: {\n          removeAt: 'removeButton'\n        },\n        items: [...createItems(Button, 2), {\n          type: SignalButton,\n          title: 'Press Enter on this button to remove it (removeItemAt)',\n          signalName: 'removeAt',\n          passSignals: {\n            removeAt: true\n          }\n        }]\n      }\n    };\n  }\n  removeButton() {\n    this.tag('Row').removeItemAt(2);\n  }\n};\nRemovingItems.args = {\n  ...sharedArgs\n};\nRemovingItems.argTypes = {\n  ...sharedArgTypes\n};\nRemovingItems.parameters = {\n  storyDetails: 'The third button in this row is configured to invoke removeItemAt to remove that button. Focus on that button and press Enter to invoke that method and remove the button from the row.'\n};\nRow.parameters = {\n  ...Row.parameters,\n  docs: {\n    ...Row.parameters?.docs,\n    source: {\n      originalSource: \"() => class Row extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: createItems(Button, 12)\\n      }\\n    };\\n  }\\n}\",\n      ...Row.parameters?.docs?.source\n    },\n    description: {\n      story: \"Stories for various versions of the component\",\n      ...Row.parameters?.docs?.description\n    }\n  }\n};\nFocusHeightChange.parameters = {\n  ...FocusHeightChange.parameters,\n  docs: {\n    ...FocusHeightChange.parameters?.docs,\n    source: {\n      originalSource: \"() => class FocusHeightChange extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: Array.apply(null, {\\n          length: 5\\n        }).map(() => ({\\n          type: ExpandingHeightButton,\\n          title: 'Button',\\n          w: 150,\\n          h: 75\\n        }))\\n      }\\n    };\\n  }\\n}\",\n      ...FocusHeightChange.parameters?.docs?.source\n    }\n  }\n};\nVaryingItemWidth.parameters = {\n  ...VaryingItemWidth.parameters,\n  docs: {\n    ...VaryingItemWidth.parameters?.docs,\n    source: {\n      originalSource: \"() => class VaryingItemWidth extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: createItems(Button, 10, {\\n          fixed: true,\\n          w: 200 + Math.floor(Math.random() * 100)\\n        })\\n      }\\n    };\\n  }\\n}\",\n      ...VaryingItemWidth.parameters?.docs?.source\n    }\n  }\n};\nExpandableWidth.parameters = {\n  ...ExpandableWidth.parameters,\n  docs: {\n    ...ExpandableWidth.parameters?.docs,\n    source: {\n      originalSource: \"() => class ExpandableWidth extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: createItems(ExpandingButton, 6)\\n      }\\n    };\\n  }\\n}\",\n      ...ExpandableWidth.parameters?.docs?.source\n    }\n  }\n};\nCenteredInParent.parameters = {\n  ...CenteredInParent.parameters,\n  docs: {\n    ...CenteredInParent.parameters?.docs,\n    source: {\n      originalSource: \"() => class CenteredInParent extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        autoResizeHeight: true,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: [{\\n          type: Column,\\n          autoResizeWidth: true,\\n          autoResizeHeight: true,\\n          items: createItems(Button, 3)\\n        }, {\\n          type: Column,\\n          autoResizeWidth: true,\\n          autoResizeHeight: true,\\n          centerInParent: true,\\n          items: createItems(Button, 1)\\n        }]\\n      }\\n    };\\n  }\\n}\",\n      ...CenteredInParent.parameters?.docs?.source\n    }\n  }\n};\nPlinko.parameters = {\n  ...Plinko.parameters,\n  docs: {\n    ...Plinko.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return class Plinko extends lng.Component {\\n    static _template() {\\n      const skipFocusButtons = createItems(Button, 3);\\n      skipFocusButtons[1].skipFocus = true;\\n      skipFocusButtons[1].title = 'Skip Focus';\\n      return {\\n        Row: {\\n          type: RowComponent,\\n          w: getWidthByUpCount(context.theme, 1),\\n          autoResizeHeight: true,\\n          plinko: true,\\n          items: [{\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: createItems(Button, 3)\\n          }, {\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: skipFocusButtons\\n          }, {\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: createItems(Button, 3)\\n          }, {\\n            type: Column,\\n            autoResizeWidth: true,\\n            items: createItems(Button, 3)\\n          }]\\n        }\\n      };\\n    }\\n  };\\n}\",\n      ...Plinko.parameters?.docs?.source\n    }\n  }\n};\nSkipFocus.parameters = {\n  ...SkipFocus.parameters,\n  docs: {\n    ...SkipFocus.parameters?.docs,\n    source: {\n      originalSource: \"args => class SkipFocus extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        wrapSelected: args.wrapSelected,\\n        items: [...Array.apply(null, {\\n          length: 13\\n        }).map((_, i) => {\\n          if (i % 4 === 0) return {\\n            type: Title,\\n            titleText: 'Skip Focus Text',\\n            skipFocus: true\\n          };\\n          return {\\n            type: Button,\\n            title: 'Button'\\n          };\\n        }), {\\n          type: Title,\\n          titleText: 'Skip Focus Text',\\n          skipFocus: true\\n        }]\\n      }\\n    };\\n  }\\n}\",\n      ...SkipFocus.parameters?.docs?.source\n    }\n  }\n};\nLazyScrollIndexes.parameters = {\n  ...LazyScrollIndexes.parameters,\n  docs: {\n    ...LazyScrollIndexes.parameters?.docs,\n    source: {\n      originalSource: \"({\\n  startLazyScrollIndex,\\n  stopLazyScrollIndex\\n}) => class LazyScrollIndexes extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        items: Array.apply(null, {\\n          length: 12\\n        }).map((_, i) => ({\\n          type: Button,\\n          title: `Button ${i + 1} ${i === startLazyScrollIndex ? '(start lazy scroll)' : ''} ${i === stopLazyScrollIndex ? '(stop lazy scroll)' : ''}`\\n        })),\\n        startLazyScrollIndex,\\n        stopLazyScrollIndex\\n      }\\n    };\\n  }\\n}\",\n      ...LazyScrollIndexes.parameters?.docs?.source\n    }\n  }\n};\nAddingItems.parameters = {\n  ...AddingItems.parameters,\n  docs: {\n    ...AddingItems.parameters?.docs,\n    source: {\n      originalSource: \"args => class AddingItems extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        // x offset from preview.js * 2\\n        lazyUpCount: args.lazyUpCount,\\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\\n        signals: {\\n          append: 'appendButton',\\n          appendAt: 'appendButtonAt',\\n          prepend: 'prependButton'\\n        },\\n        items: [{\\n          type: SignalButton,\\n          title: 'Prepend 1 Button (prependItems)',\\n          signalName: 'prepend',\\n          passSignals: {\\n            prepend: true\\n          }\\n        }, {\\n          type: SignalButton,\\n          title: 'Append 1 Button at index 1 (appendItemsAt)',\\n          signalName: 'appendAt',\\n          passSignals: {\\n            appendAt: true\\n          }\\n        }, {\\n          type: SignalButton,\\n          title: 'Append 1 Button to the Row (appendItems)',\\n          signalName: 'append',\\n          passSignals: {\\n            append: true\\n          }\\n        }]\\n      }\\n    };\\n  }\\n  prependButton() {\\n    this.tag('Row').prependItems([{\\n      type: Button,\\n      title: 'Prepended Button'\\n    }]);\\n  }\\n  appendButtonAt() {\\n    this.tag('Row').appendItemsAt([{\\n      type: Button,\\n      title: 'Appended Button at index 1'\\n    }], 1);\\n  }\\n  appendButton() {\\n    this.tag('Row').appendItems([{\\n      type: Button,\\n      title: 'Appended Button'\\n    }]);\\n  }\\n}\",\n      ...AddingItems.parameters?.docs?.source\n    }\n  }\n};\nLazyUpCount.parameters = {\n  ...LazyUpCount.parameters,\n  docs: {\n    ...LazyUpCount.parameters?.docs,\n    source: {\n      originalSource: \"args => class LazyUpCount extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        // x offset from preview.js * 2\\n        lazyUpCount: args.lazyUpCount,\\n        lazyUpCountBuffer: args.lazyUpCountBuffer,\\n        items: createItems(Button, 12)\\n      }\\n    };\\n  }\\n}\",\n      ...LazyUpCount.parameters?.docs?.source\n    }\n  }\n};\nRemovingItems.parameters = {\n  ...RemovingItems.parameters,\n  docs: {\n    ...RemovingItems.parameters?.docs,\n    source: {\n      originalSource: \"() => class RemovingItems extends lng.Component {\\n  static _template() {\\n    return {\\n      Row: {\\n        type: RowComponent,\\n        w: getWidthByUpCount(context.theme, 1),\\n        // x offset from preview.js * 2\\n        signals: {\\n          removeAt: 'removeButton'\\n        },\\n        items: [...createItems(Button, 2), {\\n          type: SignalButton,\\n          title: 'Press Enter on this button to remove it (removeItemAt)',\\n          signalName: 'removeAt',\\n          passSignals: {\\n            removeAt: true\\n          }\\n        }]\\n      }\\n    };\\n  }\\n  removeButton() {\\n    this.tag('Row').removeItemAt(2);\\n  }\\n}\",\n      ...RemovingItems.parameters?.docs?.source\n    }\n  }\n};","import Button from '../../components/Button/Button';\n\nexport default class SignalButton extends Button {\n  onEnter() {\n    this.signal(this.signalName);\n  }\n  set signalName(signalName) {\n    this._signalName = signalName;\n  }\n  get signalName() {\n    return this._signalName;\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport utils from '../utils';\n\n// creates Mode control on stories\nexport const createModeControl = ({ options, summaryValue } = {}) => {\n  return {\n    mode: {\n      control: 'radio',\n      options:\n        options && Array.isArray(options)\n          ? ['unfocused', ...options]\n          : ['unfocused', 'focused', 'disabled'],\n      description: 'Sets the visual mode for the component',\n      table: {\n        defaultValue: { summary: summaryValue }\n      },\n      type: { name: 'string', required: true }\n    }\n  };\n};\n\n/**\n * @param {object} config Parameters for generating nested args: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgs(config) {\n  const { argsObj, targetProp, include, overrides } = config;\n  return Object.keys(argsObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]:\n        (overrides.args && overrides.args[curr]) || argsObj[curr]\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating nested arg types: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgTypes(config) {\n  const { argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: {\n        // Namespaced to avoid conflicts\n        name: curr,\n        ...argTypesObj[curr],\n        ...overrides[curr],\n        table: {\n          ...(argTypesObj[curr].table || {}),\n          ...(overrides[curr] && overrides[curr].table),\n          category: targetProp\n        }\n      }\n    };\n  }, {});\n}\n\nexport const prevValues = {};\n\n/**\n * @param {object} config Parameters for generating nested arg actions: { componentName, argsTypeObj, targetProp, include, overrides }\n */\nexport function nestedArgActions(config) {\n  const { componentName, argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: (value, component) => {\n        component.tag(componentName).patch({\n          [targetProp]: {\n            ...prevValues[targetProp],\n            [curr.replace(targetProp + '_', '')]:\n              value === 'none'\n                ? undefined\n                : (overrides && overrides[curr]) || value // There are issues with merging objects here\n          }\n        });\n        // Allow patching to work with nested objects\n        if (!prevValues[targetProp]) {\n          prevValues[targetProp] = {};\n        }\n        prevValues[targetProp][curr.replace(targetProp + '_', '')] =\n          value === 'none'\n            ? undefined\n            : (overrides && overrides[curr]) || value;\n      }\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating story: { componentName, baseStory, subStory, targetProperty, include, options }\n */\nexport function generateSubStory(config) {\n  config.baseStory.args = {\n    ...config.baseStory.args,\n    ...nestedArgs({\n      argsObj: config.subStory.args || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.args) || {}\n    })\n  };\n\n  config.baseStory.argTypes = {\n    ...config.baseStory.argTypes,\n    ...nestedArgTypes({\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argTypes) || {}\n    })\n  };\n\n  if (\n    !(\n      config.baseStory &&\n      config.baseStory.parameters &&\n      config.baseStory.parameters.argActions\n    )\n  ) {\n    config.baseStory.parameters = {\n      argActions: {}\n    };\n  }\n\n  config.baseStory.parameters.argActions = {\n    ...config.baseStory.parameters.argActions,\n    ...nestedArgActions({\n      componentName: config.componentName,\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argActions) || {}\n    })\n  };\n}\n\n// used to create links to Lightning docs given an id\nexport const DocsLink = ({ children, id }) => {\n  const docsmap = {\n    lng: {\n      _base: 'https://rdkcentral.github.io/Lightning/docs',\n      Component: '/components/overview',\n      Text: '/textures/text',\n      Transition: '/transitions/attributes'\n    }\n  };\n  const [source, path] = id.split('.');\n  const href = docsmap[source]._base + docsmap[source][path];\n  return (\n    <a href={href} target=\"_blank\">\n      {children || id}\n    </a>\n  );\n};\n\nexport const Item = ({ children }) => children;\n\n/**\n * Creates formatted object for markdown prop tables\n * see Column and Row stories\n * @param {object} props\n * @param {object} props.type - TS-style generic/utility type\n */\nexport const ObjectFormat = ({ object }) => {\n  return [\n    '{',\n    <br />,\n    '  ',\n    ...utils.flatten(\n      Object.entries(object).map(([k, v]) => [\n        <span>&nbsp;&nbsp;</span>,\n        `${k}: `,\n        v,\n        ',',\n        <br />\n      ])\n    ),\n    '}'\n  ].map((x, i) => <Item key={i}>{x}</Item>);\n};\n\n/**\n * Formats TS-style generic types\n * See Columns and Row stories\n * @param {object} props\n * @param {object} props.children - component children\n * @param {string} props.type - Name of generic type\n */\nexport const GenericType = ({ children, type }) => {\n  return [type, '<', children, '>'].map((x, i) => <Item key={i}>{x}</Item>);\n};\n"],"names":[],"sourceRoot":""}