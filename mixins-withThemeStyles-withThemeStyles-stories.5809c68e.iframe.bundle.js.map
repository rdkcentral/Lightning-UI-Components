{"version":3,"file":"mixins-withThemeStyles-withThemeStyles-stories.5809c68e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AAAA;AAAA;AAAA;AAhBA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/mixins/withThemeStyles/withThemeStyles.stories.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport withThemeStylesMixin from './index.js';\\nimport { context } from '../../globals';\\n\\nexport default {\\n  title: 'Utilities/withThemeStyles'\\n};\\n\\nexport const withThemeStyles = () => {\\n  const style = {\\n    color: context.theme.color.fillNeutral\\n  };\\n\\n  class Box extends lng.Component {\\n    static get __componentName() {\\n      return 'Box';\\n    }\\n\\n    static get __themeStyle() {\\n      return style;\\n    }\\n\\n    static _template() {\\n      return {\\n        Box: {\\n          w: 150,\\n          h: 150,\\n          rect: true\\n        }\\n      };\\n    }\\n\\n    toggleColor(theme) {\\n      this.tag('Box').color = theme ? this.style.color : 0xff0000ff;\\n    }\\n  }\\n\\n  return class withThemeStyles extends lng.Component {\\n    static _template() {\\n      return {\\n        Box: {\\n          type: withThemeStylesMixin(Box)\\n        }\\n      };\\n    }\\n  };\\n};\\n\\nwithThemeStyles.storyName = 'withThemeStyles';\\nwithThemeStyles.args = {\\n  themeColor: true\\n};\\nwithThemeStyles.argTypes = {\\n  themeColor: {\\n    control: 'boolean',\\n    description: 'Should the box use the color from the theme?',\\n    table: {\\n      defaultValue: { summary: withThemeStyles.args.themeColor }\\n    }\\n  }\\n};\\nwithThemeStyles.parameters = {\\n  argActions: {\\n    themeColor: (themeColor, component) => {\\n      component.tag('Box').toggleColor(themeColor);\\n    }\\n  }\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"withThemeStyles\": {\n    \"startLoc\": {\n      \"col\": 31,\n      \"line\": 25\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 58\n    },\n    \"startBody\": {\n      \"col\": 31,\n      \"line\": 25\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 58\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport withThemeStylesMixin from './index.js';\nimport { context } from '../../globals';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport withThemeStylesMixin from './index.js';\\nimport { context } from '../../globals';\\nexport default {\\n  title: 'Utilities/withThemeStyles'\\n};\\nexport const withThemeStyles = () => {\\n  const style = {\\n    color: context.theme.color.fillNeutral\\n  };\\n  class Box extends lng.Component {\\n    static get __componentName() {\\n      return 'Box';\\n    }\\n    static get __themeStyle() {\\n      return style;\\n    }\\n    static _template() {\\n      return {\\n        Box: {\\n          w: 150,\\n          h: 150,\\n          rect: true\\n        }\\n      };\\n    }\\n    toggleColor(theme) {\\n      this.tag('Box').color = theme ? this.style.color : 0xff0000ff;\\n    }\\n  }\\n  return class withThemeStyles extends lng.Component {\\n    static _template() {\\n      return {\\n        Box: {\\n          type: withThemeStylesMixin(Box)\\n        }\\n      };\\n    }\\n  };\\n};\\nwithThemeStyles.storyName = 'withThemeStyles';\\nwithThemeStyles.args = {\\n  themeColor: true\\n};\\nwithThemeStyles.argTypes = {\\n  themeColor: {\\n    control: 'boolean',\\n    description: 'Should the box use the color from the theme?',\\n    table: {\\n      defaultValue: {\\n        summary: withThemeStyles.args.themeColor\\n      }\\n    }\\n  }\\n};\\nwithThemeStyles.parameters = {\\n  argActions: {\\n    themeColor: (themeColor, component) => {\\n      component.tag('Box').toggleColor(themeColor);\\n    }\\n  }\\n};\\nwithThemeStyles.parameters = {\\n  ...withThemeStyles.parameters,\\n  docs: {\\n    ...withThemeStyles.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => {\\\\n  const style = {\\\\n    color: context.theme.color.fillNeutral\\\\n  };\\\\n  class Box extends lng.Component {\\\\n    static get __componentName() {\\\\n      return 'Box';\\\\n    }\\\\n    static get __themeStyle() {\\\\n      return style;\\\\n    }\\\\n    static _template() {\\\\n      return {\\\\n        Box: {\\\\n          w: 150,\\\\n          h: 150,\\\\n          rect: true\\\\n        }\\\\n      };\\\\n    }\\\\n    toggleColor(theme) {\\\\n      this.tag('Box').color = theme ? this.style.color : 0xff0000ff;\\\\n    }\\\\n  }\\\\n  return class withThemeStyles extends lng.Component {\\\\n    static _template() {\\\\n      return {\\\\n        Box: {\\\\n          type: withThemeStylesMixin(Box)\\\\n        }\\\\n      };\\\\n    }\\\\n  };\\\\n}\\\",\\n      ...withThemeStyles.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"with-theme-styles\": {\n        \"startLoc\": {\n          \"col\": 31,\n          \"line\": 25\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 58\n        },\n        \"startBody\": {\n          \"col\": 31,\n          \"line\": 25\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 58\n        }\n      }\n    }\n  }\n,},\n  title: 'Utilities/withThemeStyles'\n};\nexport const withThemeStyles = () => {\n  const style = {\n    color: context.theme.color.fillNeutral\n  };\n  class Box extends lng.Component {\n    static get __componentName() {\n      return 'Box';\n    }\n    static get __themeStyle() {\n      return style;\n    }\n    static _template() {\n      return {\n        Box: {\n          w: 150,\n          h: 150,\n          rect: true\n        }\n      };\n    }\n    toggleColor(theme) {\n      this.tag('Box').color = theme ? this.style.color : 0xff0000ff;\n    }\n  }\n  return class withThemeStyles extends lng.Component {\n    static _template() {\n      return {\n        Box: {\n          type: withThemeStylesMixin(Box)\n        }\n      };\n    }\n  };\n};\nwithThemeStyles.storyName = 'withThemeStyles';\nwithThemeStyles.args = {\n  themeColor: true\n};\nwithThemeStyles.argTypes = {\n  themeColor: {\n    control: 'boolean',\n    description: 'Should the box use the color from the theme?',\n    table: {\n      defaultValue: {\n        summary: withThemeStyles.args.themeColor\n      }\n    }\n  }\n};\nwithThemeStyles.parameters = {\n  argActions: {\n    themeColor: (themeColor, component) => {\n      component.tag('Box').toggleColor(themeColor);\n    }\n  }\n};\nwithThemeStyles.parameters = {\n  ...withThemeStyles.parameters,\n  docs: {\n    ...withThemeStyles.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  const style = {\\n    color: context.theme.color.fillNeutral\\n  };\\n  class Box extends lng.Component {\\n    static get __componentName() {\\n      return 'Box';\\n    }\\n    static get __themeStyle() {\\n      return style;\\n    }\\n    static _template() {\\n      return {\\n        Box: {\\n          w: 150,\\n          h: 150,\\n          rect: true\\n        }\\n      };\\n    }\\n    toggleColor(theme) {\\n      this.tag('Box').color = theme ? this.style.color : 0xff0000ff;\\n    }\\n  }\\n  return class withThemeStyles extends lng.Component {\\n    static _template() {\\n      return {\\n        Box: {\\n          type: withThemeStylesMixin(Box)\\n        }\\n      };\\n    }\\n  };\\n}\",\n      ...withThemeStyles.parameters?.docs?.source\n    }\n  }\n};"],"names":[],"sourceRoot":""}