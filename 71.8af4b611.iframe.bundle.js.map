{"version":3,"file":"71.8af4b611.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAxBA;AACA;AAAA;AAAA;AAAA;AA0BA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAxaA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAtDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Button/Button.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Button/Button.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Surface/Surface.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Surface/Surface.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getWidthByColumnSpan } from '../../utils';\n\nexport const base = theme => ({\n  width: 0,\n  justify: 'center',\n  minWidth: getWidthByColumnSpan(theme, 3),\n  paddingX: theme.spacer.xxxl,\n  paddingXNoTitle: theme.spacer.xl,\n  paddingY: theme.spacer.xl,\n  radius: theme.radius.sm,\n  contentSpacing: theme.spacer.md,\n  itemSpacing: theme.spacer.md,\n  textStyle: {\n    ...theme.typography.button1,\n    maxLines: 1,\n    textColor: theme.color.textNeutral\n  },\n  contentColor: theme.color.fillNeutral\n});\n\nexport const mode = theme => ({\n  focused: {\n    textStyle: { textColor: theme.color.textInverse },\n    contentColor: theme.color.fillInverse,\n    tone: {\n      inverse: {\n        textStyle: { textColor: theme.color.textNeutral },\n        contentColor: theme.color.fillNeutral\n      },\n      brand: {\n        contentColor: theme.color.fillNeutral\n      }\n    }\n  },\n  disabled: {\n    textStyle: { textColor: theme.color.textNeutralDisabled },\n    contentColor: theme.color.fillNeutralDisabled\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as styles from './Button.styles.js';\nimport Row from '../Row';\nimport Surface from '../Surface';\nimport TextBox from '../TextBox'; // There seams to be some issue with the circular dependency here\n\n/**\n * Button Component\n *\n * Generic Button Component that handles setting text icon and checkbox\n */\nexport default class Button extends Surface {\n  static get __componentName() {\n    return 'Button';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static get properties() {\n    return ['fixed', 'justify', 'prefix', 'suffix', 'title'];\n  }\n\n  static get aliasStyles() {\n    return [{ prev: 'titlePadding', curr: 'contentSpacing' }];\n  }\n\n  static get tags() {\n    return [\n      ...super.tags,\n      'Content',\n      { name: 'TextWrapper', path: 'Content.TextWrapper' },\n      { name: 'Title', path: 'Content.TextWrapper.Title' },\n      { name: 'Prefix', path: 'Content.Prefix' },\n      { name: 'Suffix', path: 'Content.Suffix' }\n    ];\n  }\n\n  static _template() {\n    return {\n      ...super._template(),\n      Content: {\n        mount: 0.5,\n        x: w => w / 2,\n        y: h => h / 2,\n        zIndex: 2 // ensure content (title) is rendered above Surface Background\n      }\n    };\n  }\n\n  _update() {\n    this._updatePrefix();\n    this._updateTitle();\n    this._updateSuffix();\n    this._updateAllPositioning();\n    this._updateTruncation();\n  }\n\n  _updateAllPositioning() {\n    this._updatePositions();\n    this._updateContentDimensions();\n    this._updateSurfaceDimensions();\n    this._updateContentPosition();\n    // delaying the super._update call so we update the surface sizing after the button has finished updating\n    super._update();\n  }\n\n  $itemChanged() {\n    this._updateAllPositioning();\n    this._updateTruncation();\n  }\n\n  _onTitleTextBoxChanged() {\n    this._updateAllPositioning();\n  }\n\n  _updatePositions() {\n    if (this._hasPrefix) {\n      this._Prefix.x = this._prefixX;\n    }\n    if (this._hasTitle) {\n      this._TextWrapper.x = this._titleX;\n    }\n    if (this._hasSuffix) {\n      this._Suffix.x = this._suffixX;\n    }\n  }\n\n  _updatePrefix() {\n    if (this.prefix) {\n      let prefixPatch = {\n        style: {\n          itemSpacing: this.style.itemSpacing\n        }\n      };\n      if (!this._Prefix) {\n        prefixPatch = {\n          ...this._rowProps,\n          ...prefixPatch\n        };\n      }\n      this._Content.patch({ Prefix: prefixPatch });\n\n      /**\n       * Repatching all items re-renders all the components in the Prefix Row.\n       * This can cause items to shift while their layout in the Row is re-calculated if\n       * any of the items do not have width or height on their initial render (ex. an Icon\n       * does not have width and height until after its texture loads).\n       * If the contents of the Prefix are the same components and this update was triggered\n       * from something else (ex. a change in mode), only update the styles applied to the\n       * items in the Prefix (ex. updating the color to the value appropriate to the new mode).\n       */\n      const prefixString = JSON.stringify(this.prefix);\n      if (prefixString !== this._prevPrefix) {\n        this._prevPrefix = prefixString;\n        this._Prefix.items = this._addButtonProps(this.prefix);\n      } else {\n        this._updatePrefixStyles();\n      }\n    } else {\n      this._Content.patch({ Prefix: undefined });\n    }\n  }\n\n  _updatePrefixStyles() {\n    this._Prefix.Items.children.forEach((item, idx) => {\n      item.color = Array.isArray(this.prefix)\n        ? this.prefix[idx].color\n        : this.prefix.color;\n      item.style = {\n        ...item.style,\n        color: this.style.contentColor\n      };\n    });\n  }\n\n  _updateTitle() {\n    if (this._hasTitle) {\n      let titlePatch = {\n        content: this.title,\n        style: { textStyle: this.style.textStyle }\n      };\n      if (!this._Title) {\n        titlePatch = {\n          type: TextBox,\n          mountY: 0.5,\n          y: h => h / 2,\n          signals: {\n            textBoxChanged: '_onTitleTextBoxChanged'\n          },\n          ...titlePatch\n        };\n      }\n      this._Content.patch({\n        TextWrapper: {\n          mountY: 0.5,\n          Title: titlePatch\n        }\n      });\n    } else {\n      this._Content.patch({ TextWrapper: { Title: undefined } });\n    }\n  }\n\n  _updateSuffix() {\n    if (this.suffix) {\n      let suffixPatch = {\n        style: {\n          itemSpacing: this.style.itemSpacing\n        }\n      };\n      if (!this._Suffix) {\n        suffixPatch = {\n          ...this._rowProps,\n          ...suffixPatch\n        };\n      }\n      this._Content.patch({ Suffix: suffixPatch });\n      this._Suffix.items = this._addButtonProps(this.suffix);\n    } else {\n      this._Content.patch({ Suffix: undefined });\n    }\n  }\n\n  _updateTruncation() {\n    /**\n     * needs to run before rest of content updates to prevent a bug causing text\n     * to sometimes truncate and then un-truncate(with no width change) when\n     * toggling fixed after toggling focus\n     */\n    if (this._Title) {\n      this._Title.patch({\n        style: {\n          textStyle: {\n            ...this.style.textStyle,\n            wordWrap: this.fixed,\n            wordWrapWidth: this.fixed ? this._fixedWordWrapWidth : 0\n          }\n        }\n      });\n    }\n  }\n\n  _updateContentDimensions() {\n    const contentDimensionsPatch = {};\n    const y = this.h / 2;\n\n    // reference transition targets to ensure we aren't checking against intermittent values\n    if (this._Content.transition('w').targetValue !== this._contentW) {\n      this._Content.w = this._contentW;\n    }\n\n    if (this._Content.y !== y) {\n      contentDimensionsPatch.y = y;\n    }\n\n    if (Object.keys(contentDimensionsPatch).length > 0) {\n      this.applySmooth(this._Content, contentDimensionsPatch);\n    }\n  }\n\n  _updateContentPosition() {\n    this._Content.patch(this._contentProps);\n  }\n\n  _updateSurfaceDimensions() {\n    let newWidth = this.w;\n    if (this.fixed) {\n      newWidth = this._w;\n    } else {\n      // if no title, ignore minWidth and use prefix/suffix width\n      // when the title is collapsed, width should be the same as if there is no title\n      newWidth =\n        (!this._hasTitle && (this._hasPrefix || this._hasSuffix)) ||\n        (this._Title &&\n          !this._Title.visible &&\n          (this._hasPrefix || this._hasSuffix))\n          ? this._contentW + this._paddingX\n          : Math.max(this._contentW + this._paddingX, this.style.minWidth);\n    }\n\n    if (newWidth !== this.w) {\n      this.w = newWidth;\n    }\n\n    // In order to ensure the \"hSetByUser\" flag is not set to true,\n    // skip over \"set h\" by directly updating \"_h\"\n    // Using the \"get h\" return statement does not force an update to the inspector,\n    // whereas this will ensure the \"height\" attribute is updated\n    if (!this._hSetByUser && !this.style.h) {\n      this._h = this.style.textStyle.lineHeight + this.style.paddingY * 2;\n    }\n\n    // TODO breaks row resizing if this is wrapped in the width conditional above\n    this.fireAncestors('$itemChanged');\n  }\n\n  _addButtonProps(arr) {\n    const items = Array.isArray(arr) ? arr : [arr];\n    return items.map(item => ({\n      ...this._buttonProps,\n      ...item,\n      style: {\n        color: this.style.contentColor,\n        ...item.style\n      }\n    }));\n  }\n\n  _getJustify() {\n    return !!this._justify ? this._justify : this.style.justify;\n  }\n\n  get _contentProps() {\n    let mountX;\n    let x;\n\n    switch (this.justify) {\n      case 'left':\n        mountX = 0;\n        x = this._paddingLeft;\n        break;\n      case 'right':\n        mountX = 1;\n        x = this.w - this._paddingRight;\n        break;\n      case 'center':\n      default:\n        mountX = 0.5;\n        x = this.w / 2;\n        break;\n    }\n    return { mountX, x };\n  }\n\n  get _buttonProps() {\n    return {\n      centerInParent: true,\n      mode: this.mode\n    };\n  }\n\n  get _hasPrefix() {\n    return !!(this.prefix && Object.keys(this.prefix).length);\n  }\n\n  get _prefixW() {\n    return this._hasPrefix ? this._Prefix.w : 0;\n  }\n\n  get _prefixX() {\n    return 0;\n  }\n\n  get _hasTitle() {\n    return !!this.title;\n  }\n\n  get _titleW() {\n    // get the pre-calculated text width of the title to solve some race condition bugs\n    if (\n      this._hasTitle &&\n      this._Title &&\n      this._Title._Text &&\n      this._Title.visible\n    ) {\n      return this._Title.w;\n    }\n    return 0;\n  }\n\n  get _titleX() {\n    return this._hasPrefix ? this._prefixW + this.style.contentSpacing : 0;\n  }\n\n  get _hasSuffix() {\n    return !!(this.suffix && Object.keys(this.suffix).length);\n  }\n\n  get _suffixW() {\n    return this._hasSuffix ? this._Suffix.w : 0;\n  }\n\n  get _suffixX() {\n    if (this._hasTitle) {\n      return this._titleW + this._TextWrapper.x + this.style.contentSpacing;\n    } else if (this._hasPrefix) {\n      return this._prefixW + this.style.itemSpacing;\n    }\n    return 0;\n  }\n\n  get _contentW() {\n    if (this._hasSuffix) {\n      return this._suffixX + this._suffixW;\n    } else if (this._hasTitle && this._Title && this._Title.visible) {\n      return this._titleX + this._titleW;\n    } else if (this._hasPrefix) {\n      return this._prefixX + this._prefixW;\n    }\n    return 0;\n  }\n\n  get _rowProps() {\n    return {\n      type: Row,\n      mountY: 0.5,\n      autoResizeHeight: true,\n      autoResizeWidth: true\n    };\n  }\n\n  get _totalTitlePaddingX() {\n    let totalTitlePadding = 0;\n    if (this._hasPrefix) {\n      totalTitlePadding += this.style.contentSpacing;\n    }\n    if (this._hasSuffix) {\n      totalTitlePadding += this.style.contentSpacing;\n    }\n    return totalTitlePadding;\n  }\n\n  /**\n   * Button w must be >= nonTextSpace + smallest possible width of truncated\n   * text(width of the first set of characters before a space + width of TextBox.maxLinesSuffix).\n   * Disregarding this results in the contents of the button being a greater width than the\n   * fixed w of the Button(w/o decreasing _paddingX or _totalTitlePadding).\n   */\n  get _fixedWordWrapWidth() {\n    const { w, _paddingX, _prefixW, _suffixW, _totalTitlePaddingX } = this;\n    const nonTextSpace = _paddingX + _prefixW + _suffixW + _totalTitlePaddingX;\n    return Math.max(1, w - nonTextSpace);\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    if (this._announce) {\n      return this._announce;\n    }\n\n    // TODO - Localization?\n    // Do we need a locale file with\n    // component translations?\n    const announce = [];\n    if (this.title) {\n      announce.push(this.title);\n    }\n    announce.push(this._announceComponentName);\n    if (this._hasPrefix && this._Prefix.items.length) {\n      announce.push(...this._Prefix.items.map(item => item.announce));\n    }\n    if (this._hasSuffix && this._Suffix.items.length) {\n      announce.push(...this._Suffix.items.map(item => item.announce));\n    }\n\n    return announce;\n  }\n\n  get _announceComponentName() {\n    return Button.__componentName;\n  }\n\n  get _paddingX() {\n    return this._paddingLeft + this._paddingRight;\n  }\n\n  get _paddingLeft() {\n    return this._hasTitle ? this.style.paddingX : this.style.paddingXNoTitle;\n  }\n\n  get _paddingRight() {\n    return this._hasTitle ? this.style.paddingX : this.style.paddingXNoTitle;\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => ({\n  backgroundColor: theme.color.interactiveNeutral,\n  radius: theme.radius.md,\n  animation: {}\n});\n\nexport const tone = theme => ({\n  inverse: {\n    backgroundColor: theme.color.interactiveInverse\n  }\n});\n\nexport const mode = theme => ({\n  focused: {\n    backgroundColor: theme.color.interactiveNeutralFocus,\n    tone: {\n      inverse: {\n        backgroundColor: theme.color.interactiveInverseFocus\n      }\n    }\n  },\n  disabled: {\n    backgroundColor: theme.color.fillNeutralDisabled\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Base from '../Base';\nimport * as styles from './Surface.styles.js';\nimport lng from '@lightningjs/core';\n\nexport default class Surface extends Base {\n  static _template() {\n    return {\n      Background: {}\n    };\n  }\n\n  static get __componentName() {\n    return 'Surface';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static get properties() {\n    return [];\n  }\n\n  static get tags() {\n    return ['Background'];\n  }\n\n  get innerH() {\n    return this.h;\n  }\n\n  get innerW() {\n    return this.w;\n  }\n\n  _update() {\n    this._updateLayout();\n    this._updateScale();\n  }\n\n  _updateLayout() {\n    this._Background.patch({\n      texture: lng.Tools.getRoundRect(\n        this.innerW - 2, // Reference the underscored values here in cause the h or w getters need to be overwritten for alignment - see Tile\n        this.innerH - 2,\n        this.style.radius,\n        0,\n        null,\n        true,\n        this.style.backgroundColor\n      )\n    });\n  }\n\n  _updateScale() {\n    const scale = this._isFocusedMode\n      ? this.getFocusScale(this.w, this.h)\n      : this.getUnfocusScale(this.w, this.h);\n\n    this.applySmooth(this, { scale }, { scale: [scale, this.style.animation] });\n  }\n}\n"],"names":[],"sourceRoot":""}