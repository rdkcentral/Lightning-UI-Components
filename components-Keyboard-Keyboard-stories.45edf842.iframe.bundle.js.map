{"version":3,"file":"components-Keyboard-Keyboard-stories.45edf842.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAokBA;AACA;AACA;AACA;AACA;AAAA;AARA;AACA;AAAA;AAAA;AAAA;AAcA;AAMA;AAAA;AAVA;AACA;AAAA;AAAA;AAAA;AArSA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAOA;AAAA;AAAA;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Keyboard/Keyboard.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Keyboard/Keyboard.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Keyboard/Keyboard.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport context from '../../globals/context/index';\nimport Base from '../Base';\nimport Key from '../Key';\nimport Row from '../Row';\nimport Column from '../Column';\nimport * as styles from './Keyboard.styles';\n\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nexport default class Keyboard extends Base {\n  static get __componentName() {\n    return 'Keyboard';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static get properties() {\n    return [\n      'formats',\n      'centerKeyboard',\n      'rowWrap',\n      'centerKeys',\n      'keyComponent'\n    ];\n  }\n\n  _init() {\n    this._setShouldUpdateThemeBound = this._setShouldUpdateTheme.bind(this);\n    context.on('themeUpdate', this._setShouldUpdateThemeBound);\n    super._init();\n  }\n\n  _setShouldUpdateTheme() {\n    this.shouldUpdateTheme = true;\n  }\n\n  _detach() {\n    super._detach();\n    context.off('themeUpdate', this._setShouldUpdateThemeBound);\n  }\n\n  _focus() {\n    super._focus();\n    this.fireAncestors('$keyboardFocused', true);\n  }\n\n  _getFocused() {\n    return this._currentKeyboard || this;\n  }\n\n  _update() {\n    if (!this._currentFormat || this._shouldUpdateKeyboards) {\n      this._currentFormat = this.defaultFormat;\n    }\n    if (this.centerKeyboard) {\n      this.x = this.centeredXPos;\n    } else if (this.x === this.centeredXPos && !this.centerKeyboard) {\n      // if the keyboard was centered before but now should not be\n      this.x = 0;\n    } else {\n      this.x == null && (this.x = 0); // if x is undefined or null set it to 0, otherwise do not overwrite x pos\n    }\n    this._shouldUpdateKeyboards && this._createKeyboardsFromFormats();\n    this._formatKeys();\n  }\n\n  _createKeyboardsFromFormats() {\n    this.childList.clear(); // if new formats patched in, remove keyboards created from the previous formats\n    Object.keys(this.formats).forEach(key => {\n      const format = this.formats[key];\n      if (format) {\n        const keyboardData = this._formatKeyboardData(format);\n        this._createKeyboard(key, this._createRows(keyboardData, key));\n      }\n    });\n    this._formatsChanged = false;\n  }\n\n  _createKeyboard(key, rows = []) {\n    key = capitalize(key);\n    if (rows.length === 1) {\n      this.patch({ [key]: rows[0] });\n    } else {\n      this.patch({\n        [key]: {\n          type: Column,\n          plinko: true,\n          items: rows,\n          style: {\n            itemSpacing: this.style.keySpacing\n          },\n          autoResizeWidth: true,\n          autoResizeHeight: true,\n          neverScroll: true,\n          alpha: key === capitalize(this._currentFormat) ? 1 : 0.001\n        }\n      });\n    }\n  }\n\n  _createRows(rows = [], keyboard) {\n    return rows.map(keys => {\n      return {\n        type: Row,\n        autoResizeHeight: true,\n        autoResizeWidth: true,\n        centerInParent: this.centerKeys,\n        neverScroll: true,\n        wrapSelected: this.rowWrap !== undefined ? this.rowWrap : true,\n        style: {\n          itemSpacing: this.style.keySpacing\n        },\n        items: this._createKeys(keys, keyboard),\n        selectedIndex: this._currentKeyboard?.selected?.selectedIndex || 0\n      };\n    });\n  }\n\n  _createKeys(keys = [], keyboard) {\n    return keys.map(keyProps => {\n      if (!keyProps) {\n        return {\n          type: this.keyComponent || Key, // allows use of a custom Key component if specified\n          keySpacing: this.style.keySpacing,\n          skipFocus: true,\n          alpha: 0.01\n        };\n      }\n\n      const key = {\n        type: this.keyComponent || Key, // allows use of a custom Key component if specified\n        keySpacing: this.style.keySpacing\n      };\n\n      if (typeof keyProps === 'object') {\n        // keyId is used to account for style overrides on individual keys,\n        // icon updates, and localization\n        const keyName = keyProps.keyId || keyProps.title;\n        const keyOverrides =\n          this.style.keyProps?.[keyboard]?.[keyName] ||\n          this.style.keyProps?.[keyName] ||\n          {};\n        const keyPatch = { ...key, ...keyProps, ...keyOverrides };\n\n        if (keyOverrides?.icon) {\n          keyPatch.style = {\n            ...keyOverrides.style,\n            iconStyle: {\n              ...keyOverrides.iconStyle\n            }\n          };\n        }\n        return keyPatch;\n      }\n      return { ...key, title: keyProps };\n    });\n  }\n\n  _formatKeyboardData(data = []) {\n    if (Array.isArray(data) && data.length) {\n      if (!Array.isArray(data[0]) && !this.inline) {\n        const keyRows = [];\n        let idx, counter;\n        for (idx = 0, counter = -1; idx < data.length; idx++) {\n          if (idx % this.columnCount === 0) {\n            counter++;\n            keyRows[counter] = [];\n          }\n          keyRows[counter].push(data[idx]);\n        }\n        return keyRows; // TODO: Swap to a reduce\n      } else if (this.inline) {\n        return [data];\n      }\n      return data;\n    }\n  }\n\n  _formatKeys() {\n    Object.keys(this.formats).forEach(format => {\n      const element = this.tag(capitalize(format));\n      if (element) {\n        element.patch({\n          alpha: format === this._currentFormat ? 1 : 0.001,\n          style: {\n            itemSpacing: this.style.keySpacing\n          }\n        });\n        element.items.forEach(row => {\n          row.patch({\n            style: {\n              itemSpacing: this.style.keySpacing\n            },\n            centerInParent: this.centerKeys,\n            wrapSelected: this.rowWrap !== undefined ? this.rowWrap : true\n          });\n        });\n        // force Column to recalculate rows from the centerKeyboard toggle\n        element.queueRequestUpdate();\n      }\n    });\n  }\n\n  $toggleKeyboard(next) {\n    const nextKeyboard = capitalize(next);\n    if (next !== this._currentFormat) {\n      const nextKeyboardTag = this.tag(nextKeyboard);\n\n      this.selectKeyOn(nextKeyboardTag);\n      this._currentKeyboard.alpha = 0.001;\n      nextKeyboardTag.alpha = 1;\n      this._currentFormat = next;\n    }\n  }\n\n  selectKeyOn(keyboard, { row, column } = this.getSelectedKey()) {\n    if (keyboard && keyboard.constructor) {\n      const type = keyboard.constructor.name;\n      if (type === 'Row') {\n        keyboard.selectedIndex = column;\n      } else {\n        keyboard.selectedIndex = row;\n        keyboard.selected.selectedIndex = column;\n      }\n    }\n  }\n\n  getSelectedKey() {\n    let row, column;\n    const keyboard = this._currentKeyboard;\n    const type = keyboard.constructor.name;\n    if (type === 'Row') {\n      row = 0;\n      column = keyboard.selectedIndex;\n    } else {\n      row = keyboard.selectedIndex;\n      column = keyboard.selected.selectedIndex;\n    }\n    return { row, column };\n  }\n\n  $itemChanged() {\n    this.w = this._currentKeyboard.w;\n    this.fireAncestors('$itemChanged');\n    this.signal('keyboardWidthChanged');\n  }\n\n  _setFormats(formats = {}) {\n    this._formatsChanged = true;\n    return formats;\n  }\n\n  get centeredXPos() {\n    return (this.style.screenW - this.w) / 2 - this.style.marginX;\n  }\n\n  get _shouldUpdateKeyboards() {\n    return this.shouldUpdateTheme || this._formatsChanged;\n  }\n\n  set defaultFormat(format) {\n    this._defaultFormat = format;\n  }\n\n  get defaultFormat() {\n    return this._defaultFormat || Object.keys(this.formats)[0];\n  }\n\n  get _currentKeyboard() {\n    return this._currentFormat\n      ? this.tag(capitalize(this._currentFormat))\n      : null;\n  }\n\n  set columnCount(columnCount) {\n    this._columnCount = columnCount;\n  }\n\n  get columnCount() {\n    if (this._columnCount) return this._columnCount;\n    if (this.rowCount)\n      return (\n        this.formats[this.defaultFormat.toLowerCase()].length / this.rowCount\n      );\n    if (this.inline)\n      return this.formats[this.defaultFormat.toLowerCase()].length;\n    else return 11; // TODO: Remove this hard-coded number?\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    if (this._announce) {\n      return this._announce;\n    }\n    return 'Keyboard' + (this.title ? `, ${this.title}` : '');\n  }\n\n  set announceContext(announceContext) {\n    super.announceContext = announceContext;\n  }\n\n  get announceContext() {\n    return (\n      this._announceContext || [\n        'PAUSE-2',\n        'Use arrow keys to choose characters, press center to select'\n      ]\n    );\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  return {\n    keySpacing: theme.spacer.md,\n    screenW: theme.layout.screenW,\n    marginX: theme.layout.marginX,\n    inputSpacing: theme.spacer.md * 10 + theme.spacer.md,\n    inputStyle: { radius: theme.radius.md }\n  };\n};\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { createModeControl } from '../../docs/utils';\nimport context from '../../globals/context/index';\nimport utils from '../../utils';\nimport { default as KeyboardComponent } from './Keyboard';\n\nexport default {\n  title: 'Components/Keyboard/Keyboard'\n};\n\nexport const Keyboard = () =>\n  class Keyboard extends lng.Component {\n    static _template() {\n      return {\n        Keyboard: {\n          type: KeyboardComponent,\n          formats: {\n            lowercase: [\n              [\n                '1',\n                '2',\n                '3',\n                '4',\n                '5',\n                '6',\n                '7',\n                '8',\n                '9',\n                '0',\n                {\n                  title: 'Delete',\n                  size: 'md',\n                  keyId: 'delete',\n                  announce: 'delete, button'\n                }\n              ],\n              ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n              ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'],\n              ['z', 'x', 'c', 'v', 'b', 'n', 'm'],\n              [\n                {\n                  title: 'Clear',\n                  size: 'lg',\n                  keyId: 'clear',\n                  announce: 'clear, button'\n                },\n                {\n                  title: 'Space',\n                  size: 'xl',\n                  keyId: 'space',\n                  announce: 'space, button'\n                },\n                {\n                  title: 'Done',\n                  size: 'lg',\n                  keyId: 'done',\n                  announce: 'done, button'\n                }\n              ]\n            ]\n          }\n        },\n        w: utils.getWidthByUpCount(context.theme, 1)\n      };\n    }\n  };\n\nKeyboard.args = {\n  centerKeys: true,\n  centerKeyboard: false,\n  mode: 'focused'\n};\n\nKeyboard.sharedArgTypes = {\n  ...createModeControl({ summaryValue: 'focused' }),\n  centerKeyboard: {\n    description: \"Center the keyboard within it's set width\",\n    control: 'boolean',\n    table: {\n      defaultValue: { summary: false }\n    }\n  }\n};\n\nKeyboard.argTypes = {\n  ...Keyboard.sharedArgTypes,\n  centerKeys: {\n    description: \"Center the keys within it's set width of keyboard\",\n    control: 'boolean',\n    table: {\n      defaultValue: { summary: false }\n    }\n  }\n};\nKeyboard.parameters = {};\n"],"names":[],"sourceRoot":""}