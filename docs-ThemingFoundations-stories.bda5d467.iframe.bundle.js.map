{"version":3,"file":"docs-ThemingFoundations-stories.bda5d467.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/ThemingFoundations.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport context from '../globals/context';\nimport Base from '../components/Base/Base';\nimport Column from '../components/Column/Column';\nimport TextBox from '../components/TextBox/TextBox';\nimport Tile from '../components/Tile/Tile';\nimport Button from '../components/Button/Button';\nimport tileImage from '../assets/images/tile-image.png';\n\nexport default {\n  title: 'Collections/Theming Tokens'\n};\n\nclass Explanation extends Base {\n  static get __componentName() {\n    return 'Explanation';\n  }\n}\n\nclass Swatch extends Base {\n  static _template() {\n    const size = 24;\n    return {\n      rect: true,\n      w: size,\n      h: size,\n      texture: lng.Tools.getRoundRect(size, size, size / 2)\n    };\n  }\n\n  static get __componentName() {\n    return 'Swatch';\n  }\n\n  static get properties() {\n    return ['themeColor'];\n  }\n\n  _update() {\n    if (this.themeColor) {\n      this.color = context.theme.color[this.themeColor];\n    }\n  }\n}\n\nclass ColorInfo extends Base {\n  static _template() {\n    return {\n      h: 30,\n      Swatch: {\n        type: Swatch\n      },\n      Name: {\n        type: TextBox,\n        style: { textStyle: 'caption1' }\n      }\n    };\n  }\n\n  static get __componentName() {\n    return 'ColorInfo';\n  }\n\n  static get properties() {\n    return ['colorName'];\n  }\n\n  static get tags() {\n    return ['Swatch', 'Name'];\n  }\n\n  _init() {\n    this._Name.x = this._Swatch.w + 10;\n    super._init();\n  }\n\n  _update() {\n    if (this.colorName) {\n      this._Name.content = this.colorName;\n      this._Swatch.themeColor = this.colorName\n        .replace(/-[a-z]/g, match => match.toUpperCase())\n        .replace(/-/g, '');\n    }\n  }\n}\n\nclass Radius extends Base {\n  static _template() {\n    const size = 24;\n    return {\n      h: 25, // Base theme not updating on first load\n      Corner: { w: size, h: size },\n      Text: {\n        x: 34,\n        type: TextBox,\n        style: { textStyle: 'caption1' }\n      }\n    };\n  }\n\n  static get __componentName() {\n    return 'Radius';\n  }\n\n  static get properties() {\n    return ['radiusName'];\n  }\n\n  static get tags() {\n    return ['Text', 'Corner'];\n  }\n\n  _update() {\n    if (this.radiusName) {\n      const radius = context.theme.radius[this.radiusName];\n      this._Text.content = `${this.radiusName}: ${radius}`;\n      this._Corner.patch({\n        texture: lng.Tools.getRoundRect(\n          this._Corner.w,\n          this._Corner.h,\n          [radius, 0, 0, 0],\n          2,\n          false,\n          false,\n          false\n        )\n      });\n    }\n  }\n\n  $itemChanged() {\n    this.h = this._Text.h;\n    this.fireAncestors('$itemChanged');\n  }\n}\n\nclass MiscProp extends Base {\n  static _template() {\n    return {\n      Text: {\n        type: TextBox,\n        style: { textStyle: 'caption1' }\n      }\n    };\n  }\n\n  static get __componentName() {\n    return 'MiscProp';\n  }\n\n  static get properties() {\n    return ['propName', 'propPath'];\n  }\n\n  static get tags() {\n    return ['Text'];\n  }\n\n  _update() {\n    if (this.propName && this.propPath) {\n      if (typeof this.propPath === 'string') {\n        this._Text.content = `${this.propName}: ${\n          context.theme[this.propPath]\n        }`;\n      } else if (this.propPath.length) {\n        let val = context.theme;\n        for (let i = 0; i < this.propPath.length; i++) {\n          val = val[this.propPath[i]];\n        }\n        this._Text.content = `${this.propName}: ${val}`;\n      }\n    }\n    this.signal('miscLoaded');\n  }\n\n  $itemChanged() {\n    this.h = this._Text.h;\n    this.fireAncestors('$itemChanged');\n  }\n}\n\nexport const ThemingTokens = () => {\n  class Basic extends lng.Component {\n    static _template() {\n      const itemSpacing = 10;\n      return {\n        DummyElement: {\n          type: Explanation,\n          announce:\n            'Displays theming tokens and their values, which update on a theme change'\n        },\n        Typography: {\n          type: Column,\n          style: { itemSpacing },\n          Items: {\n            Display1: {\n              type: TextBox,\n              content: 'Display 1',\n              style: { textStyle: 'display1' }\n            },\n            Display2: {\n              type: TextBox,\n              content: 'Display 2',\n              style: { textStyle: 'display2' }\n            },\n            Headline1: {\n              type: TextBox,\n              content: 'Headline 1',\n              style: { textStyle: 'headline1' }\n            },\n            Headline2: {\n              type: TextBox,\n              content: 'Headline 2',\n              style: { textStyle: 'headline2' }\n            },\n            Headline3: {\n              type: TextBox,\n              content: 'Headline 3',\n              style: { textStyle: 'headline3' }\n            },\n            Body1: {\n              type: TextBox,\n              content: 'Body 1',\n              style: { textStyle: 'body1' }\n            },\n            Body2: {\n              type: TextBox,\n              content: 'Body 2',\n              style: { textStyle: 'body2' }\n            },\n            Body3: {\n              type: TextBox,\n              content: 'Body 3',\n              style: { textStyle: 'body3' }\n            },\n            Button1: {\n              type: TextBox,\n              content: 'Button 1',\n              style: { textStyle: 'button1' }\n            },\n            Button2: {\n              type: TextBox,\n              content: 'Button 2',\n              style: { textStyle: 'button2' }\n            },\n            Callout1: {\n              type: TextBox,\n              content: 'CALLOUT 1',\n              style: { textStyle: 'callout1' }\n            },\n            Caption: {\n              type: TextBox,\n              content: 'Caption 1',\n              style: { textStyle: 'caption1' }\n            }\n          }\n        },\n        Colors1: {\n          type: Column,\n          x: 450,\n          style: { itemSpacing },\n          Items: {\n            General: {\n              type: TextBox,\n              content: 'General',\n              style: { textStyle: 'callout1' }\n            },\n            White: {\n              type: ColorInfo,\n              colorName: 'white'\n            },\n            Grey: {\n              type: ColorInfo,\n              colorName: 'grey'\n            },\n            Black: {\n              type: ColorInfo,\n              colorName: 'black'\n            },\n            Red: {\n              type: ColorInfo,\n              colorName: 'red'\n            },\n            Orange: {\n              type: ColorInfo,\n              colorName: 'orange'\n            },\n            Yellow: {\n              type: ColorInfo,\n              colorName: 'yellow'\n            },\n            Green: {\n              type: ColorInfo,\n              colorName: 'green'\n            },\n            Blue: {\n              type: ColorInfo,\n              colorName: 'blue'\n            },\n            Purple: {\n              type: ColorInfo,\n              colorName: 'purple'\n            },\n            Material: {\n              type: TextBox,\n              content: 'Material',\n              style: { textStyle: 'callout1' }\n            },\n            MaterialSwatch: {\n              type: ColorInfo,\n              colorName: 'material'\n            },\n            MaterialBrandSwatch: {\n              type: ColorInfo,\n              colorName: 'material-brand'\n            },\n            Overlay: {\n              type: ColorInfo,\n              colorName: 'overlay'\n            },\n            Shadow: {\n              type: TextBox,\n              content: 'Shadow',\n              style: { textStyle: 'callout1' }\n            },\n            ShadowNeutralFocusSwatch: {\n              type: ColorInfo,\n              colorName: 'shadow-neutral-focus'\n            },\n            ShadowNeutralFocusSoftSwatch: {\n              type: ColorInfo,\n              colorName: 'shadow-neutral-focus-soft'\n            },\n            ShadowInverseFocusSwatch: {\n              type: ColorInfo,\n              colorName: 'shadow-inverse-focus'\n            },\n            ShadowInverseFocusSoftSwatch: {\n              type: ColorInfo,\n              colorName: 'shadow-inverse-focus-soft'\n            },\n            ShadowBrandFocusSwatch: {\n              type: ColorInfo,\n              colorName: 'shadow-brand-focus'\n            },\n            ShadowBrandFocusSoftSwatch: {\n              type: ColorInfo,\n              colorName: 'shadow-brand-focus-soft'\n            }\n          }\n        },\n        Colors2: {\n          type: Column,\n          x: 800,\n          style: { itemSpacing },\n          Items: {\n            Text: {\n              type: TextBox,\n              content: 'Text',\n              style: { textStyle: 'callout1' }\n            },\n            TextNeutralSwatch: {\n              type: ColorInfo,\n              colorName: 'text-neutral'\n            },\n            TextNeutralSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'text-neutral-secondary'\n            },\n            TextNeutralTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'text-neutral-tertiary'\n            },\n            TextNeutralDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'text-neutral-disabled'\n            },\n            TextInverseSwatch: {\n              type: ColorInfo,\n              colorName: 'text-inverse'\n            },\n            TextInverseSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'text-inverse-secondary'\n            },\n            TextInverseTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'text-inverse-tertiary'\n            },\n            TextInverseDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'text-inverse-disabled'\n            },\n            Fill: {\n              type: TextBox,\n              content: 'Fill',\n              style: { textStyle: 'callout1' }\n            },\n            FillNeutralSwatch: {\n              type: ColorInfo,\n              colorName: 'fill-neutral'\n            },\n            FillNeutralSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'fill-neutral-secondary'\n            },\n            FillNeutralTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'fill-neutral-tertiary'\n            },\n            FillNeutralDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'fill-neutral-disabled'\n            },\n            FillInverseSwatch: {\n              type: ColorInfo,\n              colorName: 'fill-inverse'\n            },\n            FillInverseSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'fill-inverse-secondary'\n            },\n            FillInverseTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'fill-inverse-tertiary'\n            },\n            FillInverseDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'fill-inverse-disabled'\n            },\n            FillBrandSwatch: {\n              type: ColorInfo,\n              colorName: 'fill-brand'\n            },\n            FillBrandSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'fill-brand-secondary'\n            },\n            FillBrandTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'fill-brand-tertiary'\n            },\n            FillBrandDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'fill-brand-disabled'\n            }\n          }\n        },\n        Colors3: {\n          type: Column,\n          x: 1150,\n          style: { itemSpacing },\n          Items: {\n            Stroke: {\n              type: TextBox,\n              content: 'Stroke',\n              style: { textStyle: 'callout1' }\n            },\n            StrokeNeutralSwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-neutral'\n            },\n            StrokeNeutralSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-neutral-secondary'\n            },\n            StrokeNeutralTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-neutral-tertiary'\n            },\n            StrokeNeutralDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-neutral-disabled'\n            },\n            StrokeInverseSwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-inverse'\n            },\n            StrokeInverseSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-inverse-secondary'\n            },\n            StrokeInverseTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-inverse-tertiary'\n            },\n            StrokeInverseDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-inverse-disabled'\n            },\n            StrokeBrandSwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-brand'\n            },\n            StrokeBrandSecondarySwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-brand-secondary'\n            },\n            StrokeBrandTertiarySwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-brand-tertiary'\n            },\n            StrokeBrandDisabledSwatch: {\n              type: ColorInfo,\n              colorName: 'stroke-brand-disabled'\n            },\n            Interactive: {\n              type: TextBox,\n              content: 'Interactive',\n              style: { textStyle: 'callout1' }\n            },\n            InteractiveNeutralFocusSwatch: {\n              type: ColorInfo,\n              colorName: 'interactive-neutral-focus'\n            },\n            InteractiveNeutralFocusSoftSwatch: {\n              type: ColorInfo,\n              colorName: 'interactive-neutral-focus-soft'\n            },\n            InteractiveInverseFocusSwatch: {\n              type: ColorInfo,\n              colorName: 'interactive-inverse-focus'\n            },\n            InteractiveInverseFocusSoftSwatch: {\n              type: ColorInfo,\n              colorName: 'interactive-inverse-focus-soft'\n            },\n            InteractiveBrandFocusSwatch: {\n              type: ColorInfo,\n              colorName: 'interactive-brand-focus'\n            },\n            InteractiveBrandFocusSoftSwatch: {\n              type: ColorInfo,\n              colorName: 'interactive-brand-focus-soft'\n            }\n          }\n        },\n        Elements: {\n          type: Column,\n          x: 1500,\n          style: { itemSpacing },\n          Items: {\n            TileWithFocus: {\n              type: Tile,\n              itemLayout: { ratioX: 1, ratioY: 1, upCount: 6 },\n              artwork: { src: tileImage },\n              progressBar: { progress: 0.5 },\n              metadataLocation: 'inset',\n              metadata: { title: 'Example' },\n              // TODO: Fix metadata not displaying in focused mode w/ out persistentMetadata flag\n              // persistentMetadata: true,\n              extraItemSpacing: itemSpacing * 4,\n              mode: 'focused'\n            },\n            ButtonWithFocus: {\n              type: Button,\n              title: 'Example',\n              style: { minWidth: 0 },\n              extraItemSpacing: itemSpacing * 2,\n              mode: 'focused'\n            },\n            ButtonWithoutFocus: {\n              type: Button,\n              title: 'Example',\n              style: { minWidth: 0 }\n            },\n            Radius: {\n              type: TextBox,\n              content: 'Radius',\n              style: { textStyle: 'callout1' }\n            },\n            RadiusGrid: {\n              type: Column,\n              style: { itemSpacing },\n              w: 150,\n              autoResizeHeight: true,\n              extraItemSpacing: itemSpacing * 4,\n              Items: {\n                RadiusNone: {\n                  type: Radius,\n                  radiusName: 'none'\n                },\n                RadiusXSmall: {\n                  type: Radius,\n                  radiusName: 'xs'\n                },\n                RadiusSmall: {\n                  type: Radius,\n                  radiusName: 'sm'\n                },\n                RadiusMedium: {\n                  type: Radius,\n                  radiusName: 'md'\n                },\n                RadiusLarge: {\n                  type: Radius,\n                  radiusName: 'lg'\n                },\n                RadiusXLarge: {\n                  type: Radius,\n                  radiusName: 'xl'\n                }\n              }\n            },\n            Misc: {\n              type: TextBox,\n              content: 'Misc',\n              style: { textStyle: 'callout1' }\n            },\n            SpacingBase: {\n              type: MiscProp,\n              propName: 'spacing-base',\n              propPath: ['spacer', 'md'],\n              signals: {\n                miscLoaded: '_update'\n              }\n            },\n            FocusScale: {\n              type: MiscProp,\n              propName: 'focus-scale',\n              propPath: ['layout', 'focusScale'],\n              signals: {\n                miscLoaded: '_update'\n              }\n            }\n          }\n        }\n      };\n    }\n  }\n  return Basic;\n};\n"],"names":[],"sourceRoot":""}