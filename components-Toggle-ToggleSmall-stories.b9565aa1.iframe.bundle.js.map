{"version":3,"file":"components-Toggle-ToggleSmall-stories.b9565aa1.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AAlvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/Toggle.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/Toggle.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/utils.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/ToggleSmall.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/ToggleSmall.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Toggle/ToggleSmall.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const knobSize = theme.spacer.xl;\n  const knobPadding = theme.spacer.xs;\n  const strokeWidth = theme.stroke.sm;\n  return {\n    height: knobSize + (knobPadding + strokeWidth) * 2,\n    knobWidth: knobSize,\n    knobHeight: knobSize,\n    knobRadius: knobSize / 2,\n    knobPadding,\n    strokeWidth,\n    width: (strokeWidth + knobPadding * 2 + knobSize) * 2\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    strokeColor: theme.color.fillNeutral,\n    backgroundColor: theme.color.fillInverseTertiary,\n    backgroundColorChecked: theme.color.fillNeutral,\n    knobColor: theme.color.fillNeutral,\n    knobColorChecked: theme.color.fillInverse,\n    mode: {\n      disabled: {\n        strokeColor: theme.color.fillNeutralDisabled,\n        backgroundColor: theme.color.fillInverseDisabled,\n        backgroundColorChecked: theme.color.fillNeutralDisabled,\n        knobColor: theme.color.fillNeutralDisabled,\n        knobColorChecked: theme.color.fillInverseDisabled\n      }\n    }\n  },\n  inverse: {\n    strokeColor: theme.color.fillInverse,\n    backgroundColor: theme.color.fillNeutralTertiary,\n    backgroundColorChecked: theme.color.fillInverse,\n    knobColor: theme.color.fillInverse,\n    knobColorChecked: theme.color.fillNeutral,\n    mode: {\n      disabled: {\n        strokeColor: theme.color.fillInverseDisabled,\n        backgroundColor: theme.color.fillNeutralDisabled,\n        backgroundColorChecked: theme.color.fillInverseDisabled,\n        knobColor: theme.color.fillInverseDisabled,\n        knobColorChecked: theme.color.fillNeutralDisabled\n      }\n    }\n  },\n  brand: {\n    strokeColor: theme.color.fillBrand,\n    backgroundColor: theme.color.fillBrandTertiary,\n    backgroundColorChecked: theme.color.fillBrand,\n    knobColor: theme.color.fillBrand,\n    knobColorChecked: theme.color.fillInverse,\n    mode: {\n      disabled: {\n        strokeColor: theme.color.fillNeutralDisabled,\n        backgroundColor: theme.color.fillInverseDisabled,\n        backgroundColorChecked: theme.color.fillNeutralDisabled,\n        knobColor: theme.color.fillNeutralDisabled,\n        knobColorChecked: theme.color.fillInverseDisabled\n      }\n    }\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport * as styles from './Toggle.styles';\nimport { getMaxRoundRadius } from '../../utils';\n\nexport default class Toggle extends Base {\n  static get __componentName() {\n    return 'Toggle';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      Container: {\n        Stroke: {},\n        Knob: {}\n      }\n    };\n  }\n\n  static get tags() {\n    return [\n      'Container',\n      {\n        name: 'Knob',\n        path: 'Container.Knob'\n      },\n      {\n        name: 'Stroke',\n        path: 'Container.Stroke'\n      }\n    ];\n  }\n\n  static get properties() {\n    return ['checked'];\n  }\n\n  static get aliasStyles() {\n    return [{ prev: 'strokeWeight', curr: 'strokeWidth' }];\n  }\n\n  _construct() {\n    super._construct && super._construct();\n    this._checked = false;\n  }\n\n  _update() {\n    this._updateKnobPosition();\n    this._updateColors();\n    this._updateContainer();\n    this._updateStroke();\n    this._updateKnob();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n  }\n\n  _updateKnobPosition() {\n    const { knobPadding, knobWidth, strokeWidth } = this.style;\n\n    this.applySmooth(this._Knob, {\n      x: this.checked\n        ? this.w - strokeWidth - knobPadding - knobWidth\n        : strokeWidth + knobPadding\n    });\n  }\n\n  _updateColors() {\n    const {\n      backgroundColor,\n      backgroundColorChecked,\n      knobColor,\n      knobColorChecked\n    } = this.style;\n\n    const currentKnobColor = this.checked ? knobColorChecked : knobColor;\n    const containerColor = this.checked\n      ? backgroundColorChecked\n      : backgroundColor;\n\n    this.applySmooth(this._Knob, { color: currentKnobColor });\n    this.applySmooth(this._Container, { color: containerColor });\n  }\n\n  _updateContainer() {\n    const { knobRadius, knobPadding, strokeRadius, strokeWidth } = this.style;\n\n    const radius =\n      strokeRadius !== undefined\n        ? strokeRadius === 0\n          ? strokeRadius\n          : Math.max(0, strokeRadius - strokeWidth)\n        : Math.max(0, knobRadius + knobPadding + strokeWidth);\n\n    this._Container.patch({\n      w: this.w,\n      h: this.h,\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - strokeWidth * 2 - 2,\n        this.h - strokeWidth * 2 - 2,\n        getMaxRoundRadius(radius, this.w, this.h),\n        strokeWidth,\n        0,\n        true,\n        false\n      )\n    });\n  }\n\n  _updateStroke() {\n    const { knobRadius, knobPadding, strokeColor, strokeRadius, strokeWidth } =\n      this.style;\n\n    this._Stroke.patch({\n      w: this.w,\n      h: this.h,\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        this.w - 2,\n        this.h - 2,\n        strokeRadius !== undefined\n          ? getMaxRoundRadius(strokeRadius, this.w, this.h)\n          : getMaxRoundRadius(\n              knobRadius,\n              this.w - knobPadding * 2 - 2,\n              this.h - knobPadding * 2 - 2\n            ) +\n              knobPadding +\n              strokeWidth,\n        strokeWidth,\n        strokeColor,\n        false,\n        false\n      )\n    });\n  }\n\n  _updateKnob() {\n    const { knobHeight, knobWidth, knobRadius } = this.style;\n\n    this._Knob.patch({\n      zIndex: 2,\n      y: (this.h - knobHeight) / 2,\n      texture: lng.Tools.getRoundRect(\n        // Compensating for the extra 2 pixels getRoundRect adds\n        knobWidth - 2,\n        knobHeight - 2,\n        getMaxRoundRadius(knobRadius, knobWidth - 2, knobHeight - 2),\n        0,\n        0,\n        true,\n        false\n      )\n    });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport utils from '../utils';\n\n// creates Mode control on stories\nexport const createModeControl = ({ options, summaryValue } = {}) => {\n  return {\n    mode: {\n      control: 'radio',\n      options:\n        options && Array.isArray(options)\n          ? ['unfocused', ...options]\n          : ['unfocused', 'focused', 'disabled'],\n      description: 'Sets the visual mode for the component',\n      table: {\n        defaultValue: { summary: summaryValue }\n      },\n      type: { name: 'string', required: true }\n    }\n  };\n};\n\n/**\n * @param {object} config Parameters for generating nested args: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgs(config) {\n  const { argsObj, targetProp, include, overrides } = config;\n  return Object.keys(argsObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]:\n        (overrides.args && overrides.args[curr]) || argsObj[curr]\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating nested arg types: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgTypes(config) {\n  const { argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: {\n        // Namespaced to avoid conflicts\n        name: curr,\n        ...argTypesObj[curr],\n        ...overrides[curr],\n        table: {\n          ...(argTypesObj[curr].table || {}),\n          ...(overrides[curr] && overrides[curr].table),\n          category: targetProp\n        }\n      }\n    };\n  }, {});\n}\n\nexport const prevValues = {};\n\n/**\n * @param {object} config Parameters for generating nested arg actions: { componentName, argsTypeObj, targetProp, include, overrides }\n */\nexport function nestedArgActions(config) {\n  const { componentName, argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: (value, component) => {\n        component.tag(componentName).patch({\n          [targetProp]: {\n            ...prevValues[targetProp],\n            [curr.replace(targetProp + '_', '')]:\n              value === 'none'\n                ? undefined\n                : (overrides && overrides[curr]) || value // There are issues with merging objects here\n          }\n        });\n        // Allow patching to work with nested objects\n        if (!prevValues[targetProp]) {\n          prevValues[targetProp] = {};\n        }\n        prevValues[targetProp][curr.replace(targetProp + '_', '')] =\n          value === 'none'\n            ? undefined\n            : (overrides && overrides[curr]) || value;\n      }\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating story: { componentName, baseStory, subStory, targetProperty, include, options }\n */\nexport function generateSubStory(config) {\n  config.baseStory.args = {\n    ...config.baseStory.args,\n    ...nestedArgs({\n      argsObj: config.subStory.args || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.args) || {}\n    })\n  };\n\n  config.baseStory.argTypes = {\n    ...config.baseStory.argTypes,\n    ...nestedArgTypes({\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argTypes) || {}\n    })\n  };\n\n  if (\n    !(\n      config.baseStory &&\n      config.baseStory.parameters &&\n      config.baseStory.parameters.argActions\n    )\n  ) {\n    config.baseStory.parameters = {\n      argActions: {}\n    };\n  }\n\n  config.baseStory.parameters.argActions = {\n    ...config.baseStory.parameters.argActions,\n    ...nestedArgActions({\n      componentName: config.componentName,\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argActions) || {}\n    })\n  };\n}\n\n// used to create links to Lightning docs given an id\nexport const DocsLink = ({ children, id }) => {\n  const docsmap = {\n    lng: {\n      _base: 'https://rdkcentral.github.io/Lightning/docs',\n      Component: '/components/overview',\n      Text: '/textures/text',\n      Transition: '/transitions/attributes'\n    }\n  };\n  const [source, path] = id.split('.');\n  const href = docsmap[source]._base + docsmap[source][path];\n  return (\n    <a href={href} target=\"_blank\">\n      {children || id}\n    </a>\n  );\n};\n\nexport const Item = ({ children }) => children;\n\n/**\n * Creates formatted object for markdown prop tables\n * see Column and Row stories\n * @param {object} props\n * @param {object} props.type - TS-style generic/utility type\n */\nexport const ObjectFormat = ({ object }) => {\n  return [\n    '{',\n    <br />,\n    '  ',\n    ...utils.flatten(\n      Object.entries(object).map(([k, v]) => [\n        <span>&nbsp;&nbsp;</span>,\n        `${k}: `,\n        v,\n        ',',\n        <br />\n      ])\n    ),\n    '}'\n  ].map((x, i) => <Item key={i}>{x}</Item>);\n};\n\n/**\n * Formats TS-style generic types\n * See Columns and Row stories\n * @param {object} props\n * @param {object} props.children - component children\n * @param {string} props.type - Name of generic type\n */\nexport const GenericType = ({ children, type }) => {\n  return [type, '<', children, '>'].map((x, i) => <Item key={i}>{x}</Item>);\n};\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const knobSize = theme.spacer.lg;\n  const knobPadding = theme.spacer.xxs;\n  const strokeWidth = theme.stroke.sm;\n  return {\n    height: knobSize + (knobPadding + strokeWidth) * 2,\n    knobWidth: knobSize,\n    knobHeight: knobSize,\n    knobRadius: knobSize / 2,\n    knobPadding,\n    strokeWidth,\n    width: (strokeWidth + knobPadding * 2 + knobSize) * 2\n  };\n};\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport Toggle from './Toggle';\nimport * as styles from './ToggleSmall.styles';\n\nexport default class ToggleSmall extends Toggle {\n  static get __componentName() {\n    return 'ToggleSmall';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { ToggleSmall as ToggleSmallComponent } from '.';\nimport { createModeControl } from '../../docs/utils';\n\nexport default {\n  title: 'Components/Toggle/ToggleSmall'\n};\n\nexport const ToggleSmall = () =>\n  class ToggleSmall extends lng.Component {\n    static _template() {\n      return {\n        flex: { direction: 'column' },\n        ToggleSmall: {\n          type: ToggleSmallComponent,\n          onEnter: toggle => {\n            alert('Sample onEnter override');\n            toggle.toggle();\n            return true;\n          }\n        }\n      };\n    }\n  };\nToggleSmall.storyName = 'ToggleSmall';\nToggleSmall.args = {\n  checked: false,\n  mode: 'focused'\n};\nToggleSmall.argTypes = {\n  ...createModeControl({ summaryValue: 'focused' }),\n  checked: {\n    control: 'boolean',\n    description: 'The state of the toggle being checked',\n    table: {\n      defaultValue: { summary: false }\n    }\n  }\n};\n"],"names":[],"sourceRoot":""}