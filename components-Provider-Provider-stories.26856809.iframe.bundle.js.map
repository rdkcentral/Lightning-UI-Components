{"version":3,"file":"components-Provider-Provider-stories.26856809.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAXA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAxBA;AA0BA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAOA;AAIA;AAAA;AAEA;AAAA;AAVA;AACA;AAAA;AAAA;AAAA;AA3JA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Provider/Provider.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Provider/Provider.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Provider/Provider.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport ProviderComponent from '.';\\nimport { default as Icon } from '../Icon';\\nimport xfinityLogo from '../../assets/images/XfinityLogo16x9.png';\\nimport xfinity from '../../assets/images/Xfinity-Provider-Logo-Square.png';\\n\\nexport default {\\n  title: 'Components/Provider'\\n};\\n\\nconst sharedArgs = {\\n  counterText: null,\\n  disableRadius: false,\\n  visibleCount: 3\\n};\\nconst sharedArgTypes = {\\n  visibleCount: {\\n    control: { type: 'range', min: 1, max: 10, step: 1 },\\n    description: 'Number of visible providers',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  counterText: {\\n    control: 'select',\\n    options: [null, '...'],\\n    description: 'Text to display in counter (overrides default behavior)',\\n    table: {\\n      defaultValue: { summary: 'undefined' }\\n    }\\n  },\\n  disableRadius: {\\n    control: 'boolean',\\n    description: 'Disable applying radius to icons',\\n    table: {\\n      defaultValue: { summary: false }\\n    }\\n  }\\n};\\n\\nexport const Provider = () =>\\n  class Provider extends lng.Component {\\n    static _template() {\\n      return {\\n        Provider: {\\n          type: ProviderComponent,\\n          providers: Array(10).fill({\\n            icon: xfinity,\\n            announce: 'xfinity'\\n          })\\n        }\\n      };\\n    }\\n  };\\n\\nProvider.args = sharedArgs;\\nProvider.argTypes = sharedArgTypes;\\n\\nexport const WithCustomIconSize = () =>\\n  class WithCustomIconSize extends lng.Component {\\n    static _template() {\\n      return {\\n        Provider: {\\n          type: ProviderComponent,\\n          providers: [\\n            {\\n              icon: xfinity,\\n              announce: 'xfinity'\\n            },\\n            {\\n              type: Icon,\\n              w: 85,\\n              h: 48,\\n              // Xfinity icon is from the Xfinity Brand Press Materials from https://corporate.comcast.com/press/kit\\n              icon: xfinityLogo,\\n              announce: 'XFinity Logo Wide'\\n            },\\n            ...Array.apply(null, { length: 8 }).map(() => ({\\n              icon: xfinity,\\n              announce: 'xfinity'\\n            }))\\n          ],\\n          visibleCount: 3\\n        }\\n      };\\n    }\\n  };\\n\\nWithCustomIconSize.args = sharedArgs;\\nWithCustomIconSize.argTypes = sharedArgTypes;\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Provider\": {\n    \"startLoc\": {\n      \"col\": 24,\n      \"line\": 67\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 79\n    },\n    \"startBody\": {\n      \"col\": 24,\n      \"line\": 67\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 79\n    }\n  },\n  \"WithCustomIconSize\": {\n    \"startLoc\": {\n      \"col\": 34,\n      \"line\": 82\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 107\n    },\n    \"startBody\": {\n      \"col\": 34,\n      \"line\": 82\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 107\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport ProviderComponent from '.';\nimport { default as Icon } from '../Icon';\nimport xfinityLogo from '../../assets/images/XfinityLogo16x9.png';\nimport xfinity from '../../assets/images/Xfinity-Provider-Logo-Square.png';\nexport default {parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport ProviderComponent from '.';\\nimport { default as Icon } from '../Icon';\\nimport xfinityLogo from '../../assets/images/XfinityLogo16x9.png';\\nimport xfinity from '../../assets/images/Xfinity-Provider-Logo-Square.png';\\nexport default {\\n  title: 'Components/Provider'\\n};\\nconst sharedArgs = {\\n  counterText: null,\\n  disableRadius: false,\\n  visibleCount: 3\\n};\\nconst sharedArgTypes = {\\n  visibleCount: {\\n    control: {\\n      type: 'range',\\n      min: 1,\\n      max: 10,\\n      step: 1\\n    },\\n    description: 'Number of visible providers',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  counterText: {\\n    control: 'select',\\n    options: [null, '...'],\\n    description: 'Text to display in counter (overrides default behavior)',\\n    table: {\\n      defaultValue: {\\n        summary: 'undefined'\\n      }\\n    }\\n  },\\n  disableRadius: {\\n    control: 'boolean',\\n    description: 'Disable applying radius to icons',\\n    table: {\\n      defaultValue: {\\n        summary: false\\n      }\\n    }\\n  }\\n};\\nexport const Provider = () => class Provider extends lng.Component {\\n  static _template() {\\n    return {\\n      Provider: {\\n        type: ProviderComponent,\\n        providers: Array(10).fill({\\n          icon: xfinity,\\n          announce: 'xfinity'\\n        })\\n      }\\n    };\\n  }\\n};\\nProvider.args = sharedArgs;\\nProvider.argTypes = sharedArgTypes;\\nexport const WithCustomIconSize = () => class WithCustomIconSize extends lng.Component {\\n  static _template() {\\n    return {\\n      Provider: {\\n        type: ProviderComponent,\\n        providers: [{\\n          icon: xfinity,\\n          announce: 'xfinity'\\n        }, {\\n          type: Icon,\\n          w: 85,\\n          h: 48,\\n          // Xfinity icon is from the Xfinity Brand Press Materials from https://corporate.comcast.com/press/kit\\n          icon: xfinityLogo,\\n          announce: 'XFinity Logo Wide'\\n        }, ...Array.apply(null, {\\n          length: 8\\n        }).map(() => ({\\n          icon: xfinity,\\n          announce: 'xfinity'\\n        }))],\\n        visibleCount: 3\\n      }\\n    };\\n  }\\n};\\nWithCustomIconSize.args = sharedArgs;\\nWithCustomIconSize.argTypes = sharedArgTypes;\\nProvider.parameters = {\\n  ...Provider.parameters,\\n  docs: {\\n    ...Provider.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class Provider extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Provider: {\\\\n        type: ProviderComponent,\\\\n        providers: Array(10).fill({\\\\n          icon: xfinity,\\\\n          announce: 'xfinity'\\\\n        })\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...Provider.parameters?.docs?.source\\n    }\\n  }\\n};\\nWithCustomIconSize.parameters = {\\n  ...WithCustomIconSize.parameters,\\n  docs: {\\n    ...WithCustomIconSize.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class WithCustomIconSize extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Provider: {\\\\n        type: ProviderComponent,\\\\n        providers: [{\\\\n          icon: xfinity,\\\\n          announce: 'xfinity'\\\\n        }, {\\\\n          type: Icon,\\\\n          w: 85,\\\\n          h: 48,\\\\n          // Xfinity icon is from the Xfinity Brand Press Materials from https://corporate.comcast.com/press/kit\\\\n          icon: xfinityLogo,\\\\n          announce: 'XFinity Logo Wide'\\\\n        }, ...Array.apply(null, {\\\\n          length: 8\\\\n        }).map(() => ({\\\\n          icon: xfinity,\\\\n          announce: 'xfinity'\\\\n        }))],\\\\n        visibleCount: 3\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...WithCustomIconSize.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"provider\": {\n        \"startLoc\": {\n          \"col\": 24,\n          \"line\": 67\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 79\n        },\n        \"startBody\": {\n          \"col\": 24,\n          \"line\": 67\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 79\n        }\n      },\n      \"with-custom-icon-size\": {\n        \"startLoc\": {\n          \"col\": 34,\n          \"line\": 82\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 107\n        },\n        \"startBody\": {\n          \"col\": 34,\n          \"line\": 82\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 107\n        }\n      }\n    }\n  }\n,},\n  title: 'Components/Provider'\n};\nconst sharedArgs = {\n  counterText: null,\n  disableRadius: false,\n  visibleCount: 3\n};\nconst sharedArgTypes = {\n  visibleCount: {\n    control: {\n      type: 'range',\n      min: 1,\n      max: 10,\n      step: 1\n    },\n    description: 'Number of visible providers',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  counterText: {\n    control: 'select',\n    options: [null, '...'],\n    description: 'Text to display in counter (overrides default behavior)',\n    table: {\n      defaultValue: {\n        summary: 'undefined'\n      }\n    }\n  },\n  disableRadius: {\n    control: 'boolean',\n    description: 'Disable applying radius to icons',\n    table: {\n      defaultValue: {\n        summary: false\n      }\n    }\n  }\n};\nexport const Provider = () => class Provider extends lng.Component {\n  static _template() {\n    return {\n      Provider: {\n        type: ProviderComponent,\n        providers: Array(10).fill({\n          icon: xfinity,\n          announce: 'xfinity'\n        })\n      }\n    };\n  }\n};;\nProvider.args = sharedArgs;\nProvider.argTypes = sharedArgTypes;\nexport const WithCustomIconSize = () => class WithCustomIconSize extends lng.Component {\n  static _template() {\n    return {\n      Provider: {\n        type: ProviderComponent,\n        providers: [{\n          icon: xfinity,\n          announce: 'xfinity'\n        }, {\n          type: Icon,\n          w: 85,\n          h: 48,\n          // Xfinity icon is from the Xfinity Brand Press Materials from https://corporate.comcast.com/press/kit\n          icon: xfinityLogo,\n          announce: 'XFinity Logo Wide'\n        }, ...Array.apply(null, {\n          length: 8\n        }).map(() => ({\n          icon: xfinity,\n          announce: 'xfinity'\n        }))],\n        visibleCount: 3\n      }\n    };\n  }\n};\nWithCustomIconSize.args = sharedArgs;\nWithCustomIconSize.argTypes = sharedArgTypes;\nProvider.parameters = {\n  ...Provider.parameters,\n  docs: {\n    ...Provider.parameters?.docs,\n    source: {\n      originalSource: \"() => class Provider extends lng.Component {\\n  static _template() {\\n    return {\\n      Provider: {\\n        type: ProviderComponent,\\n        providers: Array(10).fill({\\n          icon: xfinity,\\n          announce: 'xfinity'\\n        })\\n      }\\n    };\\n  }\\n}\",\n      ...Provider.parameters?.docs?.source\n    }\n  }\n};\nWithCustomIconSize.parameters = {\n  ...WithCustomIconSize.parameters,\n  docs: {\n    ...WithCustomIconSize.parameters?.docs,\n    source: {\n      originalSource: \"() => class WithCustomIconSize extends lng.Component {\\n  static _template() {\\n    return {\\n      Provider: {\\n        type: ProviderComponent,\\n        providers: [{\\n          icon: xfinity,\\n          announce: 'xfinity'\\n        }, {\\n          type: Icon,\\n          w: 85,\\n          h: 48,\\n          // Xfinity icon is from the Xfinity Brand Press Materials from https://corporate.comcast.com/press/kit\\n          icon: xfinityLogo,\\n          announce: 'XFinity Logo Wide'\\n        }, ...Array.apply(null, {\\n          length: 8\\n        }).map(() => ({\\n          icon: xfinity,\\n          announce: 'xfinity'\\n        }))],\\n        visibleCount: 3\\n      }\\n    };\\n  }\\n}\",\n      ...WithCustomIconSize.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport function base(theme) {\n  return {\n    alpha: theme.alpha.primary,\n    counterTextStyle: theme.typography.headline3,\n    itemSize: theme.layout.gutterX * 2,\n    itemSpacing: theme.spacer.md,\n    radius: theme.radius.sm\n  };\n}\n\nexport const mode = theme => ({\n  disabled: {\n    alpha: theme.alpha.inactive\n  }\n});\n\nexport const tone = theme => ({\n  neutral: {\n    counterBackgroundColor: theme.color.fillInverseSecondary\n  },\n  inverse: {\n    counterBackgroundColor: theme.color.fillNeutralSecondary\n  },\n  brand: {\n    counterBackgroundColor: theme.color.fillInverseSecondary\n  }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Base from '../Base';\nimport Row from '../Row';\nimport Icon from '../Icon';\nimport TextBox from '../TextBox';\nimport * as styles from './Provider.styles.js';\n\nexport default class Provider extends Base {\n  static get __componentName() {\n    return 'Provider';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    return {\n      Row: {\n        type: Row,\n        autoResizeWidth: true\n      }\n    };\n  }\n\n  static get properties() {\n    return ['disableRadius', 'counterText', 'providers', 'visibleCount'];\n  }\n\n  static get tags() {\n    return ['Row'];\n  }\n\n  get providersHidden() {\n    return this.providers.length - this._visibleCount;\n  }\n\n  _construct() {\n    this._providers = [];\n    super._construct();\n  }\n\n  _update() {\n    this._updateProviders();\n    this._updateCounter();\n  }\n\n  _updateProviders() {\n    const providerList = [];\n    this.providers.slice(0, this.visibleCount).forEach(provider => {\n      // Create a starting point for each provider icon.\n\n      let patch = {\n        centerInParent: true,\n        radius: this.disableRadius ? 0 : this.style.radius,\n        alpha: this.style.alpha,\n        style: provider.style || {}\n      };\n\n      if (\n        // If the provider is a pre-configured Icon, allow it to override the default behavior.\n        provider.type === Icon &&\n        provider.icon &&\n        provider.w &&\n        provider.h\n      ) {\n        // Maintain the ratio of the source icon while enforcing the height specified in the styles.\n        const ratio = provider.w / provider.h;\n        patch = {\n          type: Icon,\n          icon: provider.icon,\n          ...provider,\n          w: this.style.itemSize * ratio,\n          h: this.style.itemSize,\n          ...patch\n        };\n      } else {\n        // If the provider is just a string, create the rest of the Icon.\n        patch = {\n          type: Icon,\n          w: this.style.itemSize,\n          h: this.style.itemSize,\n          ...patch\n        };\n        if (typeof provider === 'object') {\n          patch = { ...patch, ...provider };\n        } else {\n          patch.icon = provider;\n        }\n      }\n      providerList.push(patch);\n    });\n    this._Row.patch({\n      style: {\n        itemSpacing: this.style.itemSpacing\n      },\n      items: providerList,\n      h: this.style.itemSize\n    });\n  }\n\n  _updateCounter() {\n    if (this.providers.length > this.visibleCount) {\n      const remaining = this.providersHidden;\n      const counter = {\n        announce: `+${remaining}`,\n        alpha: this.style.alpha,\n        w: this.style.itemSize,\n        h: this.style.itemSize,\n        centerInParent: true,\n        Background: {\n          w: this.style.itemSize,\n          h: this.style.itemSize,\n          texture: lng.Tools.getRoundRect(\n            this.style.itemSize,\n            this.style.itemSize,\n            this.style.radius,\n            0,\n            null,\n            true,\n            this.style.counterBackgroundColor\n          )\n        },\n        Text: {\n          type: TextBox,\n          mountX: 0.5,\n          mountY: 0.5,\n          x: this.style.itemSize / 2,\n          y: this.style.itemSize / 2,\n          content: this.counterText || `+${remaining}`,\n          style: { textStyle: this.style.counterTextStyle }\n        }\n      };\n      this._Row.appendItems([counter]);\n    }\n  }\n\n  $itemChanged() {\n    this.signal('providerChanged');\n  }\n\n  _getVisibleCount() {\n    const min = 1;\n    const max = this.providers.length;\n    const visibleCount = Math.min(Math.max(min, this._visibleCount), max);\n    if (this._visibleCount < min) {\n      console.warn(\n        `Warning: The specified visible count (${this._visibleCount}) is less than the minimum value (${min}). Setting it to ${min}.`\n      );\n    }\n    if (this._visibleCount > max) {\n      console.warn(\n        `Warning: The specified visible count (${this._visibleCount}) is greater than the maximum value (${max}). Setting it to ${max}.`\n      );\n    }\n    return visibleCount;\n  }\n\n  get w() {\n    return this._Row.w;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return (\n      this._announce ||\n      (this._Row.items &&\n        this._Row.items.length &&\n        this._Row.items.map(item => item.announce))\n    );\n  }\n}\n"],"names":[],"sourceRoot":""}