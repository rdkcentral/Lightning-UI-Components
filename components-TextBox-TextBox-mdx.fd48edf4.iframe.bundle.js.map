{"version":3,"file":"components-TextBox-TextBox-mdx.fd48edf4.iframe.bundle.js","mappingsnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AClQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;ACvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/TextBox/TextBox.mdx","webpack://lightning-ui-docs/../../../node_modules/@storybook/addon-docs/node_modules/@mdx-js/react/lib/index.js","webpack://lightning-ui-docs/../../../node_modules/@storybook/core/dist/components/ sync","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/InlineContent/InlineContent.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/TextBox/TextBox.stories.js","webpack://lightning-ui-docs/../../../node_modules/memoizerific/ sync"],"sourcesContent":["\nimport React from 'react';\n\n/*prettier-ignore*/\n/*\nCopyright 2023 Comcast Cable Communications Management, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nSPDX-License-Identifier: Apache-2.0\n\\*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/home/runner/work/Lightning-UI-Components/Lightning-UI-Components/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {Meta, Title} from '@storybook/blocks';\nimport * as TextBoxStories from './TextBox.stories';\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [\"\\n\", \"\\n\", \"\\n\", _jsx(Meta, {\n      of: TextBoxStories\n    }), \"\\n\", _jsx(Title, {}), \"\\n\", _jsx(_components.p, {\n      children: \"General purpose TextBox component\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"source\",\n      children: \"Source\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/rdkcentral/Lightning-UI-Components/blob/develop/packages/@lightningjs/ui-components/src/components/TextBox/TextBox.js\",\n        rel: \"nofollow\",\n        children: \"https://github.com/rdkcentral/Lightning-UI-Components/blob/develop/packages/@lightningjs/ui-components/src/components/TextBox/TextBox.js\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"usage\",\n      children: \"Usage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set a content property with your text and specify a property style as a string.\\nTextBox also accepts inline content arrays and strings which are rendered using the \", _jsx(_components.a, {\n        href: \"/docs/components-inlinecontent--test\",\n        children: \"InlineContent\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { TextBox } from '@lightningjs/ui-components';\\n\\nTextBox: {\\n  type: TextBox,\\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\\n  fixed: true,\\n  w: 600,\\n  style: {\\n    textStyle: 'headline1'\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Note on width:\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"To assign a width to the \", _jsx(_components.code, {\n          children: \"TextBox\"\n        }), \" component, either a \", _jsx(_components.code, {\n          children: \"w\"\n        }), \" value or \", _jsx(_components.code, {\n          children: \"wordWrapWidth\"\n        }), \" (nested within \", _jsx(_components.code, {\n          children: \"textStyle\"\n        }), \" and the \", _jsx(_components.code, {\n          children: \"style\"\n        }), \" prop) value may be provided.\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"If \", _jsx(_components.code, {\n            children: \"wordWrapWidth\"\n          }), \" is defined, then the component will apply that property and the width should reflect the value accordingly.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"If only a \", _jsx(_components.code, {\n            children: \"w\"\n          }), \" value is provided and no \", _jsx(_components.code, {\n            children: \"wordWrapWidth\"\n          }), \" is defined, the \", _jsx(_components.code, {\n            children: \"TextBox\"\n          }), \" component will automatically apply a \", _jsx(_components.code, {\n            children: \"wordWrapWidth\"\n          }), \" of the defined \", _jsx(_components.code, {\n            children: \"w\"\n          }), \" value to the component.\\n\", _jsx(_components.strong, {\n            children: \"Important:\"\n          }), \" the \", _jsx(_components.code, {\n            children: \"fixed\"\n          }), \" property must be set to \", _jsx(_components.code, {\n            children: \"true\"\n          }), \" in this case.\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"If neither \", _jsx(_components.code, {\n            children: \"w\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"wordWrapWidth\"\n          }), \" is defined, the component will automatically set the width to be the width of the component.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"properties\",\n      children: \"Properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"name\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"required\"\n          }), _jsx(_components.th, {\n            children: \"default\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"content\"\n          }), _jsx(_components.td, {\n            children: \"string\"\n          }), _jsx(_components.td, {\n            children: \"true\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsx(_components.td, {\n            children: \"Text to be displayed in element\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"hideOnLoad\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"undefined\"\n          }), _jsxs(_components.td, {\n            children: [\"If \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", the component will not render as visible following the text texture loading. This allows manually controlling the alpha of the component.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"fixed\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsxs(_components.td, {\n            children: [\"If \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", allows the width of the text to be set with \", _jsx(_components.code, {\n              children: \"w\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"marquee\"\n          }), _jsx(_components.td, {\n            children: \"boolean\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"false\"\n          }), _jsx(_components.td, {\n            children: \"Allows text to be scrollable\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"TextBox also supports rendering as an InlineContent component. See \", _jsx(_components.a, {\n        href: \"/docs/components-inlinecontent--basic\",\n        children: \"InlineContent documentation\"\n      }), \" for table of supported properties.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"style-properties\",\n      children: \"Style Properties\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"name\"\n          }), _jsx(_components.th, {\n            children: \"type\"\n          }), _jsx(_components.th, {\n            children: \"description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"offsetX\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"Used to ensure text is positioned correctly\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"offsetY\"\n          }), _jsx(_components.td, {\n            children: \"number\"\n          }), _jsx(_components.td, {\n            children: \"Used to ensure text is positioned correctly\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"textStyle\"\n          }), _jsx(_components.td, {\n            children: \"string | object\"\n          }), _jsxs(_components.td, {\n            children: [\"Default style of text to be displayed. Object should come from the current theme or contain any properties that the \", _jsx(_components.a, {\n              href: \"https://lightningjs.io/docs/#/lightning-core-reference/RenderEngine/Textures/Text?id=properties\",\n              rel: \"nofollow\",\n              children: \"Lightning text texture supports\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"methods\",\n      children: \"Methods\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"togglemarquee-void\",\n      children: \"toggleMarquee(): void\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will restart or stop marquee scrolling to match the marquee flag in case it has changed.\"\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../node_modules/@storybook/core/dist/components sync recursive\";\nmodule.exports = webpackEmptyContext;","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { default as InlineContentComponent } from '.';\nimport lightningbolt from '../../assets/images/ic_lightning_white_32.png';\nimport { getHexColor } from '../../utils';\n\nexport default {\n  title: 'Components/InlineContent',\n  args: {\n    contentWrap: false,\n    justify: 'center',\n    contentProperties: { marginBottom: -4 },\n    maxLines: 0,\n    maxLinesSuffix: '..'\n  },\n  argTypes: {\n    contentProperties: {\n      control: 'object',\n      description: 'Object setting flexItem props on all content items',\n      type: 'object',\n      table: {\n        defaultValue: { summary: '{}' }\n      }\n    },\n    contentWrap: {\n      control: 'boolean',\n      description:\n        'Determines whether the containing flexbox should wrap the content onto the next line',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false }\n      }\n    },\n    justify: {\n      control: 'radio',\n      options: [\n        'flex-start',\n        'flex-end',\n        'center',\n        'space-between',\n        'space-around',\n        'space-evenly'\n      ],\n      description: 'Alignment of first line flexbox content',\n      type: 'string',\n      table: {\n        defaultValue: { summary: 'center' }\n      }\n    },\n    maxLines: {\n      control: 'number',\n      description: 'maximum number of lines to render before truncation',\n      type: 'number',\n      table: {\n        defaultValue: { summary: 'undefined' }\n      }\n    },\n    maxLinesSuffix: {\n      control: 'text',\n      description:\n        'suffix appended to last line of content if it will exceed the maxLines',\n      type: 'string',\n      table: {\n        defaultValue: { summary: '..' }\n      }\n    }\n  }\n};\n\nexport const Basic = args =>\n  class Basic extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 500,\n          w: 200,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          customStyleMappings: {\n            italic: {\n              fontStyle: 'italic',\n              textColor: getHexColor('00ff00')\n            }\n          },\n          content: [\n            'Text',\n            ' and some icons',\n            {\n              icon: lightningbolt,\n              title: 'Green Lightning Bolt',\n              style: { color: getHexColor('00ff00') }\n            },\n            'Wrapping Text',\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'and more text ',\n            {\n              text: 'with some red ',\n              style: { textColor: getHexColor('FF6194') }\n            },\n            'for fun',\n            { badge: 'HD', title: 'HD' },\n            { badge: 'SD', title: 'SD' },\n            {\n              text: 'make some text italic',\n              style: 'italic'\n            }\n          ]\n        }\n      };\n    }\n  };\n\nexport const WithNewLines = args =>\n  class WithNewLines extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 500,\n          w: 400,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          content: [\n            'Example with multiple lines',\n            {\n              icon: lightningbolt,\n              style: { color: getHexColor('00ff00') },\n              title: 'Green Lightning Bolt'\n            },\n            { newline: true },\n            'this line should break here',\n            { newline: true },\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'another line break here',\n            { newline: true },\n            { badge: 'HD', title: 'HD' },\n            { newline: true },\n            { badge: 'SD', title: 'SD' }\n          ]\n        }\n      };\n    }\n  };\n\nexport const WithParsing = args =>\n  class WithParsing extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 550,\n          w: 400,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          customStyleMappings: {\n            italic: {\n              fontStyle: 'italic',\n              textColor: getHexColor('FF6194')\n            }\n          },\n          content:\n            'This is an example of using custom markup {ICON:settings|https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png} with a linebreak{NEWLINE}{BADGE:HD} that includes all available types like {TEXT:styled text|italic}.'\n        }\n      };\n    }\n  };\n\nexport const WithTruncation = args =>\n  class Basic extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          ...args,\n          w: 500,\n          content: [\n            'Text',\n            {\n              icon: lightningbolt,\n              title: 'Green Lightning Bolt',\n              style: { color: getHexColor('00ff00') }\n            },\n            'Wrapping Text',\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'and more text',\n            {\n              text: 'with some red ',\n              style: { textColor: getHexColor('FF6194') }\n            },\n            'for fun',\n            { badge: 'HD', title: 'HD' },\n            { badge: 'SD', title: 'SD' },\n            ', and this should truncate before going on to a third line.'\n          ]\n        }\n      };\n    }\n  };\nWithTruncation.args = {\n  contentWrap: true,\n  maxLines: 2,\n  maxLinesSuffix: '...'\n};\n\nexport const WithStrikeThrough = args =>\n  class WithParsing extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 550,\n          w: 400,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          content: [\n            'Rent',\n            { newline: true },\n            {\n              text: '$19.99',\n              style: { textDecoration: 'line-through' }\n            },\n            { newline: true },\n            '$12.99'\n          ]\n        }\n      };\n    }\n  };\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport TextBox from '.';\nimport lightningbolt from '../../assets/images/ic_lightning_white_32.png';\nimport { getHexColor } from '../../utils';\nimport inlineContentStory from '../InlineContent/InlineContent.stories';\n\nexport default {\n  title: 'Components/TextBox'\n};\n\nconst { args: inlineContentArgs, argTypes: inlineContentArgTypes } =\n  inlineContentStory;\n\nconst lorum =\n  'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum sodales est eu eleifend interdum. Vivamus egestas maximus elementum. Sed condimentum ligula justo, non sollicitudin lectus rutrum vel. Integer iaculis vitae nisl quis tincidunt. Sed quis dui vehicula, vehicula felis a, tempor leo. Fusce tincidunt, ante eget pretium efficitur, libero elit volutpat quam, sit amet porta tortor odio non ligula. Ut sed dolor eleifend massa auctor porttitor eget ut lectus. Vivamus elementum lorem mauris, eu luctus tortor posuere sit amet. Nunc a interdum metus.';\n\nexport const Basic = () =>\n  class Basic extends lng.Component {\n    static _template() {\n      return {\n        TextBox: {\n          type: TextBox,\n          fixed: true,\n          w: 600,\n          style: { textStyle: { maxLines: 3 } }\n        }\n      };\n    }\n  };\n\nBasic.args = {\n  content: lorum,\n  marquee: false,\n  fixed: true,\n  hideOnLoad: false,\n  w: 600\n};\n\nBasic.argTypes = {\n  content: {\n    control: 'text',\n    description: 'Text to be displayed in element',\n    table: {\n      defaultValue: { summary: 'undefined' }\n    }\n  },\n  marquee: {\n    control: 'boolean',\n    description:\n      \"Scrolls text when a single line of text is longer than the textbox's width\",\n    table: {\n      defaultValue: { summary: false }\n    }\n  },\n  fixed: {\n    control: 'boolean',\n    description:\n      'Flag that when set to `true`, allows the width of the component to be set with `w`',\n    table: {\n      defaultValue: { summary: false }\n    }\n  },\n  hideOnLoad: {\n    control: 'boolean',\n    remount: true,\n    description:\n      'If `true`, the component will not render as visible following the text texture loading. This allows manually controlling the alpha of the component. The component will not render as visible if this is set to true.',\n    table: {\n      defaultValue: { summary: false }\n    }\n  },\n  w: {\n    control: 'number',\n    description:\n      'When the `fixed` property is `true`, this will set the width of the component (but only if `wordWrapWidth` is not defined otherwise the width will reflect the `wordWrapWidth` value)',\n    table: {\n      defaultValue: { summary: 0 }\n    }\n  }\n};\n\nexport const WithInlineContentArray = () =>\n  class WithInlineContentArray extends lng.Component {\n    static _template() {\n      return {\n        TextBox: {\n          type: TextBox,\n          x: 200,\n          w: 400,\n          content: [\n            'Text',\n            {\n              icon: lightningbolt,\n              style: { color: getHexColor('00ff00') },\n              title: 'Green Lightning Bolt'\n            },\n            'Wrapping Text',\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'and more text',\n            {\n              text: 'with some red ',\n              style: { textColor: getHexColor('FF6194') }\n            },\n            'for fun',\n            { badge: 'HD', title: 'HD' },\n            { badge: 'SD', title: 'SD' }\n          ]\n        }\n      };\n    }\n  };\n\nWithInlineContentArray.args = inlineContentArgs;\nWithInlineContentArray.argTypes = inlineContentArgTypes;\n\nexport const WithInlineContentString = () =>\n  class WithInlineContentArray extends lng.Component {\n    static _template() {\n      return {\n        TextBox: {\n          type: TextBox,\n          x: 400,\n          w: 400,\n          content:\n            'This is an example of using custom markup {ICON:settings|https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png} with a linebreak{NEWLINE}{BADGE:HD} that includes all available types like {TEXT:styled text|italic}.',\n          customStyleMappings: {\n            italic: {\n              fontStyle: 'italic',\n              textColor: getHexColor('FF6194')\n            }\n          }\n        }\n      };\n    }\n  };\n\nWithInlineContentString.args = inlineContentArgs;\nWithInlineContentString.argTypes = inlineContentArgTypes;\n\nexport const WithInlineContentTruncation = () =>\n  class Basic extends lng.Component {\n    static _template() {\n      return {\n        TextBox: {\n          type: TextBox,\n          w: 500,\n          style: {\n            textStyle: {\n              maxLines: 2,\n              maxLinesSuffix: '...'\n            }\n          },\n          content: [\n            'Text',\n            {\n              icon: lightningbolt,\n              title: 'Green Lightning Bolt',\n              style: { color: getHexColor('00ff00') }\n            },\n            'Wrapping Text',\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'and more text',\n            {\n              text: 'with some red ',\n              style: { textColor: getHexColor('FF6194') }\n            },\n            'for fun',\n            { badge: 'HD', title: 'HD' },\n            { badge: 'SD', title: 'SD' },\n            ', and this should truncate before going on to a third line.'\n          ],\n          contentWrap: true\n        }\n      };\n    }\n  };\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../../../node_modules/memoizerific sync recursive\";\nmodule.exports = webpackEmptyContext;"],"names":[],"sourceRoot":""}