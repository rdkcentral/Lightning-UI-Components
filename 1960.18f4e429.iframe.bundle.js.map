{"version":3,"file":"1960.18f4e429.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;;AAIA;AACA;AAKA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AALA;AACA;AAAA;AAAA;AAAA;AAhIA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AA8BA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AAGA;AAAA;AACA;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AASA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AAMA;AAGA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Button/Button.stories.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Checkbox/Checkbox.styles.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/Checkbox/Checkbox.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/constants.js","webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/docs/utils.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"ï»¿/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as ButtonComponent } from '.';\\nimport Icon from '../Icon';\\nimport Checkbox from '../Checkbox';\\nimport lightning from '../../assets/images/ic_lightning_white_32.png';\\nimport { createModeControl } from '../../docs/utils';\\nimport { controlDescriptions } from '../../docs/constants';\\n\\nexport default {\\n  title: 'Components/Button/Button',\\n  args: {\\n    title: 'Button',\\n    fixed: false,\\n    w: 200,\\n    justify: 'center',\\n    prefix: null,\\n    suffix: null,\\n    mode: 'focused'\\n  },\\n  argTypes: {\\n    ...createModeControl({ summaryValue: 'focused' }),\\n    title: {\\n      control: 'text',\\n      description: 'Title text',\\n      table: {\\n        defaultValue: { summary: 'undefined' }\\n      }\\n    },\\n    fixed: {\\n      control: 'boolean',\\n      description: controlDescriptions.fixed,\\n      table: {\\n        defaultValue: { summary: false }\\n      }\\n    },\\n    w: {\\n      control: 'number',\\n      description:\\n        'When the fixed property is true, this will set the width of the component',\\n      table: {\\n        defaultValue: { summary: 0 }\\n      }\\n    },\\n    justify: {\\n      control: 'radio',\\n      options: ['left', 'center', 'right'],\\n      description: 'Justification of button content',\\n      table: {\\n        defaultValue: { summary: 'center' }\\n      }\\n    },\\n    prefix: {\\n      control: 'radio',\\n      options: [null, 'icon', 'checkbox', 'combo'],\\n      description: 'Lightning components to be placed to the left of the title',\\n      table: {\\n        defaultValue: { summary: 'undefined' }\\n      }\\n    },\\n    suffix: {\\n      control: 'radio',\\n      options: [null, 'icon', 'checkbox', 'combo'],\\n      description:\\n        'Lightning components to be placed to the right of the title',\\n      table: {\\n        defaultValue: { summary: 'undefined' }\\n      }\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component:\\n          'Basic component that handles styling and functionality for a button.'\\n      }\\n    }\\n  }\\n};\\n\\nfunction getComponentArray(comps) {\\n  let arr = [];\\n  switch (comps) {\\n    case 'icon':\\n      arr = [{ type: Icon, icon: lightning }];\\n      break;\\n    case 'checkbox':\\n      arr = [{ type: Checkbox, checked: true }];\\n      break;\\n    case 'combo':\\n      arr = [\\n        { type: Icon, icon: lightning },\\n        { type: Checkbox, checked: true }\\n      ];\\n      break;\\n  }\\n  return arr;\\n}\\n\\nexport const Button = () =>\\n  class Button extends lng.Component {\\n    static _template() {\\n      return {\\n        Button: {\\n          type: ButtonComponent\\n        }\\n      };\\n    }\\n  };\\n\\nconst sharedArgActions = {\\n  prefix: (prefix, component) => {\\n    component.tag('Button').prefix = getComponentArray(prefix);\\n  },\\n  suffix: (suffix, component) => {\\n    component.tag('Button').suffix = getComponentArray(suffix);\\n  }\\n};\\n\\nButton.parameters = {\\n  argActions: sharedArgActions\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"Button\": {\n    \"startLoc\": {\n      \"col\": 22,\n      \"line\": 134\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 142\n    },\n    \"startBody\": {\n      \"col\": 22,\n      \"line\": 134\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 142\n    }\n  }\n};\n    \n/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { default as ButtonComponent } from '.';\nimport Icon from '../Icon';\nimport Checkbox from '../Checkbox';\nimport lightning from '../../assets/images/ic_lightning_white_32.png';\nimport { createModeControl } from '../../docs/utils';\nimport { controlDescriptions } from '../../docs/constants';\nexport default {\n  title: 'Components/Button/Button',\n  args: {\n    title: 'Button',\n    fixed: false,\n    w: 200,\n    justify: 'center',\n    prefix: null,\n    suffix: null,\n    mode: 'focused'\n  },\n  argTypes: {\n    ...createModeControl({\n      summaryValue: 'focused'\n    }),\n    title: {\n      control: 'text',\n      description: 'Title text',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    },\n    fixed: {\n      control: 'boolean',\n      description: controlDescriptions.fixed,\n      table: {\n        defaultValue: {\n          summary: false\n        }\n      }\n    },\n    w: {\n      control: 'number',\n      description: 'When the fixed property is true, this will set the width of the component',\n      table: {\n        defaultValue: {\n          summary: 0\n        }\n      }\n    },\n    justify: {\n      control: 'radio',\n      options: ['left', 'center', 'right'],\n      description: 'Justification of button content',\n      table: {\n        defaultValue: {\n          summary: 'center'\n        }\n      }\n    },\n    prefix: {\n      control: 'radio',\n      options: [null, 'icon', 'checkbox', 'combo'],\n      description: 'Lightning components to be placed to the left of the title',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    },\n    suffix: {\n      control: 'radio',\n      options: [null, 'icon', 'checkbox', 'combo'],\n      description: 'Lightning components to be placed to the right of the title',\n      table: {\n        defaultValue: {\n          summary: 'undefined'\n        }\n      }\n    }\n  },\n  parameters: {\n  \"storySource\": {\n    \"source\": \"/**\\n * Copyright 2023 Comcast Cable Communications Management, LLC\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\nimport lng from '@lightningjs/core';\\nimport { default as ButtonComponent } from '.';\\nimport Icon from '../Icon';\\nimport Checkbox from '../Checkbox';\\nimport lightning from '../../assets/images/ic_lightning_white_32.png';\\nimport { createModeControl } from '../../docs/utils';\\nimport { controlDescriptions } from '../../docs/constants';\\nexport default {\\n  title: 'Components/Button/Button',\\n  args: {\\n    title: 'Button',\\n    fixed: false,\\n    w: 200,\\n    justify: 'center',\\n    prefix: null,\\n    suffix: null,\\n    mode: 'focused'\\n  },\\n  argTypes: {\\n    ...createModeControl({\\n      summaryValue: 'focused'\\n    }),\\n    title: {\\n      control: 'text',\\n      description: 'Title text',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    },\\n    fixed: {\\n      control: 'boolean',\\n      description: controlDescriptions.fixed,\\n      table: {\\n        defaultValue: {\\n          summary: false\\n        }\\n      }\\n    },\\n    w: {\\n      control: 'number',\\n      description: 'When the fixed property is true, this will set the width of the component',\\n      table: {\\n        defaultValue: {\\n          summary: 0\\n        }\\n      }\\n    },\\n    justify: {\\n      control: 'radio',\\n      options: ['left', 'center', 'right'],\\n      description: 'Justification of button content',\\n      table: {\\n        defaultValue: {\\n          summary: 'center'\\n        }\\n      }\\n    },\\n    prefix: {\\n      control: 'radio',\\n      options: [null, 'icon', 'checkbox', 'combo'],\\n      description: 'Lightning components to be placed to the left of the title',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    },\\n    suffix: {\\n      control: 'radio',\\n      options: [null, 'icon', 'checkbox', 'combo'],\\n      description: 'Lightning components to be placed to the right of the title',\\n      table: {\\n        defaultValue: {\\n          summary: 'undefined'\\n        }\\n      }\\n    }\\n  },\\n  parameters: {\\n    docs: {\\n      description: {\\n        component: 'Basic component that handles styling and functionality for a button.'\\n      }\\n    }\\n  }\\n};\\nfunction getComponentArray(comps) {\\n  let arr = [];\\n  switch (comps) {\\n    case 'icon':\\n      arr = [{\\n        type: Icon,\\n        icon: lightning\\n      }];\\n      break;\\n    case 'checkbox':\\n      arr = [{\\n        type: Checkbox,\\n        checked: true\\n      }];\\n      break;\\n    case 'combo':\\n      arr = [{\\n        type: Icon,\\n        icon: lightning\\n      }, {\\n        type: Checkbox,\\n        checked: true\\n      }];\\n      break;\\n  }\\n  return arr;\\n}\\nexport const Button = () => class Button extends lng.Component {\\n  static _template() {\\n    return {\\n      Button: {\\n        type: ButtonComponent\\n      }\\n    };\\n  }\\n};\\nconst sharedArgActions = {\\n  prefix: (prefix, component) => {\\n    component.tag('Button').prefix = getComponentArray(prefix);\\n  },\\n  suffix: (suffix, component) => {\\n    component.tag('Button').suffix = getComponentArray(suffix);\\n  }\\n};\\nButton.parameters = {\\n  argActions: sharedArgActions\\n};\\nButton.parameters = {\\n  ...Button.parameters,\\n  docs: {\\n    ...Button.parameters?.docs,\\n    source: {\\n      originalSource: \\\"() => class Button extends lng.Component {\\\\n  static _template() {\\\\n    return {\\\\n      Button: {\\\\n        type: ButtonComponent\\\\n      }\\\\n    };\\\\n  }\\\\n}\\\",\\n      ...Button.parameters?.docs?.source\\n    }\\n  }\\n};\",\n    \"locationsMap\": {\n      \"button\": {\n        \"startLoc\": {\n          \"col\": 22,\n          \"line\": 134\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 142\n        },\n        \"startBody\": {\n          \"col\": 22,\n          \"line\": 134\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 142\n        }\n      }\n    }\n  }\n,\n    docs: {\n      description: {\n        component: 'Basic component that handles styling and functionality for a button.'\n      }\n    }\n  },};\nfunction getComponentArray(comps) {\n  let arr = [];\n  switch (comps) {\n    case 'icon':\n      arr = [{\n        type: Icon,\n        icon: lightning\n      }];\n      break;\n    case 'checkbox':\n      arr = [{\n        type: Checkbox,\n        checked: true\n      }];\n      break;\n    case 'combo':\n      arr = [{\n        type: Icon,\n        icon: lightning\n      }, {\n        type: Checkbox,\n        checked: true\n      }];\n      break;\n  }\n  return arr;\n}\nexport const Button = () => class Button extends lng.Component {\n  static _template() {\n    return {\n      Button: {\n        type: ButtonComponent\n      }\n    };\n  }\n};\nconst sharedArgActions = {\n  prefix: (prefix, component) => {\n    component.tag('Button').prefix = getComponentArray(prefix);\n  },\n  suffix: (suffix, component) => {\n    component.tag('Button').suffix = getComponentArray(suffix);\n  }\n};\nButton.parameters = {\n  argActions: sharedArgActions\n};\nButton.parameters = {\n  ...Button.parameters,\n  docs: {\n    ...Button.parameters?.docs,\n    source: {\n      originalSource: \"() => class Button extends lng.Component {\\n  static _template() {\\n    return {\\n      Button: {\\n        type: ButtonComponent\\n      }\\n    };\\n  }\\n}\",\n      ...Button.parameters?.docs?.source\n    }\n  }\n};","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const base = theme => {\n  const strokeWidth = theme.stroke.sm;\n  const size = theme.spacer.xxl - strokeWidth * 2;\n  return {\n    alpha: theme.alpha.primary,\n    width: size,\n    height: size,\n    checkWidth: theme.spacer.lg,\n    checkHeight: theme.spacer.md + theme.spacer.xs,\n    checkSrc: theme.asset.check,\n    radius: size / 2,\n    strokeWidth\n  };\n};\n\nexport const tone = theme => ({\n  neutral: {\n    strokeColor: theme.color.strokeInverse,\n    checkColor: theme.color.textInverse,\n    backgroundColor: theme.color.fillNeutralDisabled,\n    backgroundColorChecked: theme.color.fillNeutral\n  },\n  inverse: {\n    strokeColor: theme.color.strokeNeutral,\n    checkColor: theme.color.textNeutral,\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillInverse\n  },\n  brand: {\n    strokeColor: theme.color.strokeNeutral,\n    checkColor: theme.color.textNeutral,\n    backgroundColor: theme.color.fillInverseDisabled,\n    backgroundColorChecked: theme.color.fillBrand\n  }\n});\n\nexport const mode = theme => ({\n  disabled: { alpha: theme.alpha.inactive }\n});\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport Icon from '../Icon';\nimport Base from '../Base';\nimport * as styles from './Checkbox.styles.js';\n\nexport default class Checkbox extends Base {\n  static get __componentName() {\n    return 'Checkbox';\n  }\n\n  static get __themeStyle() {\n    return styles;\n  }\n\n  static _template() {\n    const center = { mount: 0.5, x: w => w / 2, y: h => h / 2 };\n    return {\n      Body: {\n        rtt: true, // ensures the background color doesn't bleed into the checkbox icon when disabled\n        ...center,\n        Check: {\n          type: Icon,\n          ...center,\n          alpha: 0\n        }\n      },\n      Stroke: center\n    };\n  }\n\n  static get tags() {\n    return ['Check', 'Body', 'Stroke'];\n  }\n\n  static get properties() {\n    return ['checked'];\n  }\n\n  static get aliasStyles() {\n    return [\n      { prev: 'checkH', curr: 'checkHeight' },\n      { prev: 'checkW', curr: 'checkWidth' }\n    ];\n  }\n\n  _update() {\n    this._updateBody();\n    this._updateStroke();\n    this._updateCheck();\n    if (this._checkedChanged) {\n      this.fireAncestors('$announce', this.announce);\n      this._checkedChanged = false;\n    }\n    this._updateOpacity();\n  }\n\n  _updateCheck() {\n    this._Check.patch({\n      w: this.style.checkWidth,\n      h: this.style.checkHeight,\n      icon: this.style.checkSrc,\n      style: { color: this.style.checkColor }\n    });\n\n    const alphaPatch = {\n      alpha: this.checked ? 1 : 0\n    };\n\n    this.applySmooth(this._Check, alphaPatch);\n  }\n\n  _updateBody() {\n    const bodyColor = this.checked\n      ? this.style.backgroundColorChecked\n      : this.style.backgroundColor;\n\n    // if the inner checkbox should be square, a rounded corner radius can still be applied to the stroke\n    const radius =\n      this.style.radius >= this.w / 2\n        ? (this.w - this.style.strokeWidth) / 2\n        : 0;\n\n    this._Body.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w - this.style.strokeWidth,\n        this.h - this.style.strokeWidth,\n        radius,\n        0,\n        null,\n        true,\n        bodyColor\n      )\n    });\n  }\n\n  _updateStroke() {\n    this._Stroke.patch({\n      texture: lng.Tools.getRoundRect(\n        this.w,\n        this.h,\n        this.style.radius,\n        this.style.strokeWidth,\n        this.style.strokeColor,\n        false\n      )\n    });\n  }\n\n  _updateOpacity() {\n    this.applySmooth(this, { alpha: this.style.alpha });\n  }\n\n  _setChecked(checked) {\n    this._checkedChanged = checked !== this._checked;\n    return checked;\n  }\n\n  toggle() {\n    if (!this._isDisabledMode) {\n      this.checked = !this.checked;\n    }\n    return this;\n  }\n\n  _handleEnter() {\n    if (typeof this.onEnter === 'function') {\n      return this.onEnter(this);\n    } else {\n      this.toggle();\n    }\n    return false;\n  }\n\n  set announce(announce) {\n    super.announce = announce;\n  }\n\n  get announce() {\n    return this._announce || (this.checked ? 'Checked' : 'Unchecked');\n  }\n}\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const CATEGORIES = {\n  0: 'Docs',\n  2: 'Collections',\n  4: 'Utilities',\n  8: 'Components',\n  16: 'Patterns',\n  32: 'Templates'\n};\n\n/** Storybook config constants should go in this file */\n\nexport const storySortOrder = [\n  CATEGORIES[0],\n  [\n    'Introduction',\n    'Read Me',\n    'Base',\n    'Contributing',\n    'Lightning Resources',\n    'Theming',\n    [\n      'Overview',\n      'Component Config',\n      'Tones',\n      'Modes',\n      'Extensions',\n      'Subtheming',\n      'Use in Storybook',\n      'Theme Properties',\n      '*'\n    ],\n    'Unit Testing',\n    ['Overview', 'Test Renderer', 'Test Utils', ['makeCreateComponent', '*']]\n  ],\n  CATEGORIES[2],\n  CATEGORIES[4],\n  CATEGORIES[8],\n  CATEGORIES[16],\n  CATEGORIES[32]\n];\n\nexport const controlDescriptions = {\n  collapseToMetadata:\n    'When in unfocused or disabled mode, if shouldCollapse property is true it will collapse the image to metadata (when focused, it will always be expanded)',\n  shouldCollapse:\n    'When in unfocused or disabled mode, if this flag is true metadata will collapse (when focused, it will always be expanded)',\n  fixed:\n    'Stops the width from being calculated dynamically based on content and will instead use the`w` property'\n};\n","/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// eslint-disable-next-line no-unused-vars\nimport React from 'react';\nimport utils from '../utils';\n\n// creates Mode control on stories\nexport const createModeControl = ({ options, summaryValue } = {}) => {\n  return {\n    mode: {\n      control: 'radio',\n      options:\n        options && Array.isArray(options)\n          ? ['unfocused', ...options]\n          : ['unfocused', 'focused', 'disabled'],\n      description: 'Sets the visual mode for the component',\n      table: {\n        defaultValue: { summary: summaryValue }\n      },\n      type: { name: 'string', required: true }\n    }\n  };\n};\n\n/**\n * @param {object} config Parameters for generating nested args: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgs(config) {\n  const { argsObj, targetProp, include, overrides } = config;\n  return Object.keys(argsObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]:\n        (overrides.args && overrides.args[curr]) || argsObj[curr]\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating nested arg types: { argsObj, targetProp, include, overrides }\n */\nexport function nestedArgTypes(config) {\n  const { argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: {\n        // Namespaced to avoid conflicts\n        name: curr,\n        ...argTypesObj[curr],\n        ...overrides[curr],\n        table: {\n          ...(argTypesObj[curr].table || {}),\n          ...(overrides[curr] && overrides[curr].table),\n          category: targetProp\n        }\n      }\n    };\n  }, {});\n}\n\nexport const prevValues = {};\n\n/**\n * @param {object} config Parameters for generating nested arg actions: { componentName, argsTypeObj, targetProp, include, overrides }\n */\nexport function nestedArgActions(config) {\n  const { componentName, argTypesObj, targetProp, include, overrides } = config;\n  return Object.keys(argTypesObj).reduce((acc, curr) => {\n    if (!include.includes(curr)) return acc;\n    return {\n      ...acc,\n      [targetProp + '_' + curr]: (value, component) => {\n        component.tag(componentName).patch({\n          [targetProp]: {\n            ...prevValues[targetProp],\n            [curr.replace(targetProp + '_', '')]:\n              value === 'none'\n                ? undefined\n                : (overrides && overrides[curr]) || value // There are issues with merging objects here\n          }\n        });\n        // Allow patching to work with nested objects\n        if (!prevValues[targetProp]) {\n          prevValues[targetProp] = {};\n        }\n        prevValues[targetProp][curr.replace(targetProp + '_', '')] =\n          value === 'none'\n            ? undefined\n            : (overrides && overrides[curr]) || value;\n      }\n    };\n  }, {});\n}\n\n/**\n * @param {object} config Parameters for generating story: { componentName, baseStory, subStory, targetProperty, include, options }\n */\nexport function generateSubStory(config) {\n  config.baseStory.args = {\n    ...config.baseStory.args,\n    ...nestedArgs({\n      argsObj: config.subStory.args || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.args) || {}\n    })\n  };\n\n  config.baseStory.argTypes = {\n    ...config.baseStory.argTypes,\n    ...nestedArgTypes({\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argTypes) || {}\n    })\n  };\n\n  if (\n    !(\n      config.baseStory &&\n      config.baseStory.parameters &&\n      config.baseStory.parameters.argActions\n    )\n  ) {\n    config.baseStory.parameters = {\n      argActions: {}\n    };\n  }\n\n  config.baseStory.parameters.argActions = {\n    ...config.baseStory.parameters.argActions,\n    ...nestedArgActions({\n      componentName: config.componentName,\n      argTypesObj: config.subStory.argTypes || {},\n      targetProp: config.targetProperty,\n      include: config.include,\n      overrides: (config.overrides && config.overrides.argActions) || {}\n    })\n  };\n}\n\n// used to create links to Lightning docs given an id\nexport const DocsLink = ({ children, id }) => {\n  const docsmap = {\n    lng: {\n      _base: 'https://rdkcentral.github.io/Lightning/docs',\n      Component: '/components/overview',\n      Text: '/textures/text',\n      Transition: '/transitions/attributes'\n    }\n  };\n  const [source, path] = id.split('.');\n  const href = docsmap[source]._base + docsmap[source][path];\n  return (\n    <a href={href} target=\"_blank\">\n      {children || id}\n    </a>\n  );\n};\n\nexport const Item = ({ children }) => children;\n\n/**\n * Creates formatted object for markdown prop tables\n * see Column and Row stories\n * @param {object} props\n * @param {object} props.type - TS-style generic/utility type\n */\nexport const ObjectFormat = ({ object }) => {\n  return [\n    '{',\n    <br />,\n    '  ',\n    ...utils.flatten(\n      Object.entries(object).map(([k, v]) => [\n        <span>&nbsp;&nbsp;</span>,\n        `${k}: `,\n        v,\n        ',',\n        <br />\n      ])\n    ),\n    '}'\n  ].map((x, i) => <Item key={i}>{x}</Item>);\n};\n\n/**\n * Formats TS-style generic types\n * See Columns and Row stories\n * @param {object} props\n * @param {object} props.children - component children\n * @param {string} props.type - Name of generic type\n */\nexport const GenericType = ({ children, type }) => {\n  return [type, '<', children, '>'].map((x, i) => <Item key={i}>{x}</Item>);\n};\n"],"names":[],"sourceRoot":""}