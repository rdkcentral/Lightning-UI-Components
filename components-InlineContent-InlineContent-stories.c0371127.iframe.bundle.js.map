{"version":3,"file":"components-InlineContent-InlineContent-stories.c0371127.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lightning-ui-docs/../../@lightningjs/ui-components/src/components/InlineContent/InlineContent.stories.js"],"sourcesContent":["/**\n * Copyright 2023 Comcast Cable Communications Management, LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport lng from '@lightningjs/core';\nimport { default as InlineContentComponent } from '.';\nimport lightningbolt from '../../assets/images/ic_lightning_white_32.png';\nimport { getHexColor } from '../../utils';\n\nexport default {\n  title: 'Components/InlineContent',\n  args: {\n    contentWrap: false,\n    justify: 'center',\n    contentProperties: { marginBottom: -4 },\n    maxLines: 0,\n    maxLinesSuffix: '..'\n  },\n  argTypes: {\n    contentProperties: {\n      control: 'object',\n      description: 'Object setting flexItem props on all content items',\n      type: 'object',\n      table: {\n        defaultValue: { summary: '{}' }\n      }\n    },\n    contentWrap: {\n      control: 'boolean',\n      description:\n        'Determines whether the containing flexbox should wrap the content onto the next line',\n      type: 'boolean',\n      table: {\n        defaultValue: { summary: false }\n      }\n    },\n    justify: {\n      control: 'radio',\n      options: [\n        'flex-start',\n        'flex-end',\n        'center',\n        'space-between',\n        'space-around',\n        'space-evenly'\n      ],\n      description: 'Alignment of first line flexbox content',\n      type: 'string',\n      table: {\n        defaultValue: { summary: 'center' }\n      }\n    },\n    maxLines: {\n      control: 'number',\n      description: 'maximum number of lines to render before truncation',\n      type: 'number',\n      table: {\n        defaultValue: { summary: 'undefined' }\n      }\n    },\n    maxLinesSuffix: {\n      control: 'text',\n      description:\n        'suffix appended to last line of content if it will exceed the maxLines',\n      type: 'string',\n      table: {\n        defaultValue: { summary: '..' }\n      }\n    }\n  }\n};\n\nexport const Basic = args =>\n  class Basic extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 500,\n          w: 200,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          customStyleMappings: {\n            italic: {\n              fontStyle: 'italic',\n              textColor: getHexColor('00ff00')\n            }\n          },\n          content: [\n            'Text',\n            ' and some icons',\n            {\n              icon: lightningbolt,\n              title: 'Green Lightning Bolt',\n              style: { color: getHexColor('00ff00') }\n            },\n            'Wrapping Text',\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'and more text ',\n            {\n              text: 'with some red ',\n              style: { textColor: getHexColor('FF6194') }\n            },\n            'for fun',\n            { badge: 'HD', title: 'HD' },\n            { badge: 'SD', title: 'SD' },\n            {\n              text: 'make some text italic',\n              style: 'italic'\n            }\n          ]\n        }\n      };\n    }\n  };\n\nexport const WithNewLines = args =>\n  class WithNewLines extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 500,\n          w: 400,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          content: [\n            'Example with multiple lines',\n            {\n              icon: lightningbolt,\n              style: { color: getHexColor('00ff00') },\n              title: 'Green Lightning Bolt'\n            },\n            { newline: true },\n            'this line should break here',\n            { newline: true },\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'another line break here',\n            { newline: true },\n            { badge: 'HD', title: 'HD' },\n            { newline: true },\n            { badge: 'SD', title: 'SD' }\n          ]\n        }\n      };\n    }\n  };\n\nexport const WithParsing = args =>\n  class WithParsing extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 550,\n          w: 400,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          customStyleMappings: {\n            italic: {\n              fontStyle: 'italic',\n              textColor: getHexColor('FF6194')\n            }\n          },\n          content:\n            'This is an example of using custom markup {ICON:settings|https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png} with a linebreak{NEWLINE}{BADGE:HD} that includes all available types like {TEXT:styled text|italic}.'\n        }\n      };\n    }\n  };\n\nexport const WithTruncation = args =>\n  class Basic extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          ...args,\n          w: 500,\n          content: [\n            'Text',\n            {\n              icon: lightningbolt,\n              title: 'Green Lightning Bolt',\n              style: { color: getHexColor('00ff00') }\n            },\n            'Wrapping Text',\n            {\n              icon: 'https://upload.wikimedia.org/wikipedia/commons/b/b6/Tomato-Torrent-Icon.png',\n              title: 'Rotten Tomatoes rating'\n            },\n            'and more text',\n            {\n              text: 'with some red ',\n              style: { textColor: getHexColor('FF6194') }\n            },\n            'for fun',\n            { badge: 'HD', title: 'HD' },\n            { badge: 'SD', title: 'SD' },\n            ', and this should truncate before going on to a third line.'\n          ]\n        }\n      };\n    }\n  };\nWithTruncation.args = {\n  contentWrap: true,\n  maxLines: 2,\n  maxLinesSuffix: '...'\n};\n\nexport const WithStrikeThrough = args =>\n  class WithParsing extends lng.Component {\n    static _template() {\n      return {\n        InlineContent: {\n          type: InlineContentComponent,\n          x: 550,\n          w: 400,\n          contentWrap: args.contentWrap,\n          contentProperties: args.contentProperties,\n          justify: args.justify,\n          content: [\n            'Rent',\n            { newline: true },\n            {\n              text: '$19.99',\n              style: { textDecoration: 'line-through' }\n            },\n            { newline: true },\n            '$12.99'\n          ]\n        }\n      };\n    }\n  };\n"],"names":[],"sourceRoot":""}